<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\Project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\Project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Mon Sep 09 22:41:55 2024
<BR><P>
<H3>Maximum Stack Usage =        352 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
MF_S522_CardActive &rArr; MF_S522_CardRequest &rArr; FM_Anticollision &rArr; FM_Comm &rArr; FM_Read_FIFO &rArr; FM_Read_Reg
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[3]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">HardFault_Handler</a><BR>
 <LI><a href="#[4]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">SVC_Handler</a><BR>
 <LI><a href="#[5]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">PendSV_Handler</a><BR>
 <LI><a href="#[7]">IRQ0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">IRQ0_Handler</a><BR>
 <LI><a href="#[8]">IRQ1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">IRQ1_Handler</a><BR>
 <LI><a href="#[9]">IRQ2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">IRQ2_Handler</a><BR>
 <LI><a href="#[a]">IRQ3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">IRQ3_Handler</a><BR>
 <LI><a href="#[b]">IRQ4_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">IRQ4_Handler</a><BR>
 <LI><a href="#[c]">IRQ5_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">IRQ5_Handler</a><BR>
 <LI><a href="#[d]">IRQ6_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">IRQ6_Handler</a><BR>
 <LI><a href="#[e]">IRQ7_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">IRQ7_Handler</a><BR>
 <LI><a href="#[f]">IRQ8_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">IRQ8_Handler</a><BR>
 <LI><a href="#[10]">IRQ9_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">IRQ9_Handler</a><BR>
 <LI><a href="#[11]">IRQ10_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">IRQ10_Handler</a><BR>
 <LI><a href="#[12]">IRQ11_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">IRQ11_Handler</a><BR>
 <LI><a href="#[13]">IRQ12_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">IRQ12_Handler</a><BR>
 <LI><a href="#[14]">IRQ13_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">IRQ13_Handler</a><BR>
 <LI><a href="#[15]">IRQ14_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">IRQ14_Handler</a><BR>
 <LI><a href="#[16]">IRQ15_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">IRQ15_Handler</a><BR>
 <LI><a href="#[17]">IRQ16_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">IRQ16_Handler</a><BR>
 <LI><a href="#[18]">IRQ17_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">IRQ17_Handler</a><BR>
 <LI><a href="#[19]">IRQ18_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">IRQ18_Handler</a><BR>
 <LI><a href="#[1a]">IRQ19_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">IRQ19_Handler</a><BR>
 <LI><a href="#[1b]">IRQ20_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">IRQ20_Handler</a><BR>
 <LI><a href="#[1c]">IRQ21_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">IRQ21_Handler</a><BR>
 <LI><a href="#[1d]">IRQ22_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">IRQ22_Handler</a><BR>
 <LI><a href="#[1e]">IRQ23_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">IRQ23_Handler</a><BR>
 <LI><a href="#[1f]">IRQ24_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">IRQ24_Handler</a><BR>
 <LI><a href="#[20]">IRQ25_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">IRQ25_Handler</a><BR>
 <LI><a href="#[21]">IRQ26_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21]">IRQ26_Handler</a><BR>
 <LI><a href="#[22]">IRQ27_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">IRQ27_Handler</a><BR>
 <LI><a href="#[23]">IRQ28_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23]">IRQ28_Handler</a><BR>
 <LI><a href="#[24]">IRQ29_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">IRQ29_Handler</a><BR>
 <LI><a href="#[25]">IRQ30_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25]">IRQ30_Handler</a><BR>
 <LI><a href="#[26]">IRQ31_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26]">IRQ31_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[60]">Bus_Init</a> from ili9341.o(i.Bus_Init) referenced from ili9341.o(i.ILI_Init)
 <LI><a href="#[113]">Bus_LCD8_Init</a> from fw_bus.o(i.Bus_LCD8_Init) referenced from fw_bus.o(.constdata)
 <LI><a href="#[116]">Bus_LCD8_ReadData</a> from fw_bus.o(i.Bus_LCD8_ReadData) referenced from fw_bus.o(.constdata)
 <LI><a href="#[2e]">Bus_LCD8_ReadDataU16</a> from fw_bus.o(i.Bus_LCD8_ReadDataU16) referenced from fw_bus.o(i.Bus_LCD8_Init)
 <LI><a href="#[2b]">Bus_LCD8_ReadDataU32</a> from fw_bus.o(i.Bus_LCD8_ReadDataU32) referenced from fw_bus.o(i.Bus_LCD8_Init)
 <LI><a href="#[31]">Bus_LCD8_ReadDataU8</a> from fw_bus.o(i.Bus_LCD8_ReadDataU8) referenced from fw_bus.o(i.Bus_LCD8_Init)
 <LI><a href="#[114]">Bus_LCD8_WriteCmd</a> from fw_bus.o(i.Bus_LCD8_WriteCmd) referenced from fw_bus.o(.constdata)
 <LI><a href="#[2c]">Bus_LCD8_WriteCmdU16</a> from fw_bus.o(i.Bus_LCD8_WriteCmdU16) referenced from fw_bus.o(i.Bus_LCD8_Init)
 <LI><a href="#[29]">Bus_LCD8_WriteCmdU32</a> from fw_bus.o(i.Bus_LCD8_WriteCmdU32) referenced from fw_bus.o(i.Bus_LCD8_Init)
 <LI><a href="#[2f]">Bus_LCD8_WriteCmdU8</a> from fw_bus.o(i.Bus_LCD8_WriteCmdU8) referenced from fw_bus.o(i.Bus_LCD8_Init)
 <LI><a href="#[115]">Bus_LCD8_WriteData</a> from fw_bus.o(i.Bus_LCD8_WriteData) referenced from fw_bus.o(.constdata)
 <LI><a href="#[2d]">Bus_LCD8_WriteDataU16</a> from fw_bus.o(i.Bus_LCD8_WriteDataU16) referenced from fw_bus.o(i.Bus_LCD8_Init)
 <LI><a href="#[2a]">Bus_LCD8_WriteDataU32</a> from fw_bus.o(i.Bus_LCD8_WriteDataU32) referenced from fw_bus.o(i.Bus_LCD8_Init)
 <LI><a href="#[30]">Bus_LCD8_WriteDataU8</a> from fw_bus.o(i.Bus_LCD8_WriteDataU8) referenced from fw_bus.o(i.Bus_LCD8_Init)
 <LI><a href="#[63]">Bus_Read_Data</a> from ili9341.o(i.Bus_Read_Data) referenced from ili9341.o(i.ILI_Init)
 <LI><a href="#[61]">Bus_Write_Cmd</a> from ili9341.o(i.Bus_Write_Cmd) referenced from ili9341.o(i.ILI_Init)
 <LI><a href="#[62]">Bus_Write_Data</a> from ili9341.o(i.Bus_Write_Data) referenced from ili9341.o(i.ILI_Init)
 <LI><a href="#[fe]">DS_Get_Temprature</a> from ds18b20.o(i.DS_Get_Temprature) referenced from ds18b20.o(.constdata)
 <LI><a href="#[fb]">DS_Init</a> from ds18b20.o(i.DS_Init) referenced from ds18b20.o(.constdata)
 <LI><a href="#[fc]">DS_Reset</a> from ds18b20.o(i.DS_Reset) referenced from ds18b20.o(.constdata)
 <LI><a href="#[fd]">DS_Set_Period</a> from ds18b20.o(i.DS_Set_Period) referenced from ds18b20.o(.constdata)
 <LI><a href="#[91]">Delay_Get_Clock</a> from ll_delay.o(i.Delay_Get_Clock) referenced from ll_delay.o(.constdata)
 <LI><a href="#[93]">Delay_Get_Counter</a> from ll_delay.o(i.Delay_Get_Counter) referenced from ll_delay.o(.constdata)
 <LI><a href="#[92]">Delay_Get_Reload</a> from ll_delay.o(i.Delay_Get_Reload) referenced from ll_delay.o(.constdata)
 <LI><a href="#[94]">Delay_Get_TickTime</a> from ll_delay.o(i.Delay_Get_TickTime) referenced from ll_delay.o(.constdata)
 <LI><a href="#[90]">Delay_Init</a> from ll_delay.o(i.Delay_Init) referenced from ll_delay.o(.constdata)
 <LI><a href="#[e9]">ESP8266_AP_AutoLink</a> from esp8266.o(i.ESP8266_AP_AutoLink) referenced from esp8266.o(.constdata)
 <LI><a href="#[e7]">ESP8266_AP_Link</a> from esp8266.o(i.ESP8266_AP_Link) referenced from esp8266.o(.constdata)
 <LI><a href="#[e6]">ESP8266_AP_Probe</a> from esp8266.o(i.ESP8266_AP_Probe) referenced from esp8266.o(.constdata)
 <LI><a href="#[e8]">ESP8266_AP_Unlink</a> from esp8266.o(i.ESP8266_AP_Unlink) referenced from esp8266.o(.constdata)
 <LI><a href="#[e0]">ESP8266_Enter_LPM</a> from esp8266.o(i.ESP8266_Enter_LPM) referenced from esp8266.o(.constdata)
 <LI><a href="#[e1]">ESP8266_Exit_LPM</a> from esp8266.o(i.ESP8266_Exit_LPM) referenced from esp8266.o(.constdata)
 <LI><a href="#[ea]">ESP8266_Get_APInfo</a> from esp8266.o(i.ESP8266_Get_APInfo) referenced from esp8266.o(.constdata)
 <LI><a href="#[ed]">ESP8266_Get_LinkState</a> from esp8266.o(i.ESP8266_Get_LinkState) referenced from esp8266.o(.constdata)
 <LI><a href="#[e5]">ESP8266_Get_LocalInof</a> from esp8266.o(i.ESP8266_Get_LocalInof) referenced from esp8266.o(.constdata)
 <LI><a href="#[e3]">ESP8266_Get_Mode</a> from esp8266.o(i.ESP8266_Get_Mode) referenced from esp8266.o(.constdata)
 <LI><a href="#[ec]">ESP8266_Get_ServerInfo</a> from esp8266.o(i.ESP8266_Get_ServerInfo) referenced from esp8266.o(.constdata)
 <LI><a href="#[dd]">ESP8266_Init</a> from esp8266.o(i.ESP8266_Init) referenced from esp8266.o(.constdata)
 <LI><a href="#[f0]">ESP8266_Read</a> from esp8266.o(i.ESP8266_Read) referenced from esp8266.o(.constdata)
 <LI><a href="#[de]">ESP8266_Reset</a> from esp8266.o(i.ESP8266_Reset) referenced from esp8266.o(.constdata)
 <LI><a href="#[df]">ESP8266_Restore</a> from esp8266.o(i.ESP8266_Restore) referenced from esp8266.o(.constdata)
 <LI><a href="#[eb]">ESP8266_Server_Link</a> from esp8266.o(i.ESP8266_Server_Link) referenced from esp8266.o(.constdata)
 <LI><a href="#[e4]">ESP8266_Set_LocalInfo</a> from esp8266.o(i.ESP8266_Set_LocalInfo) referenced from esp8266.o(.constdata)
 <LI><a href="#[e2]">ESP8266_Set_Mode</a> from esp8266.o(i.ESP8266_Set_Mode) referenced from esp8266.o(.constdata)
 <LI><a href="#[ee]">ESP8266_Set_TRPT</a> from esp8266.o(i.ESP8266_Set_TRPT) referenced from esp8266.o(.constdata)
 <LI><a href="#[ef]">ESP8266_Write</a> from esp8266.o(i.ESP8266_Write) referenced from esp8266.o(.constdata)
 <LI><a href="#[12f]">EXT_GPIO_Config</a> from hc595.o(i.EXT_GPIO_Config) referenced from hc595.o(Device_Table)
 <LI><a href="#[125]">FW_Board_Init</a> from fw_startup.o(i.FW_Board_Init) referenced from fw_startup.o(Board_Init_Table)
 <LI><a href="#[126]">FW_DEV_Init</a> from fw_startup.o(i.FW_DEV_Init) referenced from fw_startup.o(Device_Init_Table)
 <LI><a href="#[33]">FW_Delay_DefMs</a> from fw_delay.o(i.FW_Delay_DefMs) referenced from fw_delay.o(i.FW_Delay_Init)
 <LI><a href="#[130]">FW_GPIO_Driver_Probe</a> from fw_gpio.o(i.FW_GPIO_Driver_Probe) referenced from fw_gpio.o(Device_Table)
 <LI><a href="#[35]">FW_GPIO_ToggleUseGetOutput</a> from fw_gpio.o(i.FW_GPIO_ToggleUseGetOutput) referenced from fw_gpio.o(i.FW_GPIO_Driver_Probe)
 <LI><a href="#[34]">FW_GPIO_ToggleUseLAPI</a> from fw_gpio.o(i.FW_GPIO_ToggleUseLAPI) referenced from fw_gpio.o(i.FW_GPIO_Driver_Probe)
 <LI><a href="#[36]">FW_I2C_IH_RC</a> from fw_i2c.o(i.FW_I2C_IH_RC) referenced from fw_i2c.o(i.FW_I2C_Init)
 <LI><a href="#[37]">FW_I2C_IH_RX</a> from fw_i2c.o(i.FW_I2C_IH_RX) referenced from fw_i2c.o(i.FW_I2C_Init)
 <LI><a href="#[38]">FW_I2C_IH_TC</a> from fw_i2c.o(i.FW_I2C_IH_TC) referenced from fw_i2c.o(i.FW_I2C_Init)
 <LI><a href="#[39]">FW_I2C_IH_TX</a> from fw_i2c.o(i.FW_I2C_IH_TX) referenced from fw_i2c.o(i.FW_I2C_Init)
 <LI><a href="#[3f]">FW_I2C_ReadDMA</a> from fw_i2c.o(i.FW_I2C_ReadDMA) referenced from fw_i2c.o(i.FW_I2C_Init)
 <LI><a href="#[3e]">FW_I2C_ReadINT</a> from fw_i2c.o(i.FW_I2C_ReadINT) referenced from fw_i2c.o(i.FW_I2C_Init)
 <LI><a href="#[3d]">FW_I2C_ReadPOL</a> from fw_i2c.o(i.FW_I2C_ReadPOL) referenced from fw_i2c.o(i.FW_I2C_Init)
 <LI><a href="#[3c]">FW_I2C_WriteDMA</a> from fw_i2c.o(i.FW_I2C_WriteDMA) referenced from fw_i2c.o(i.FW_I2C_Init)
 <LI><a href="#[3b]">FW_I2C_WriteINT</a> from fw_i2c.o(i.FW_I2C_WriteINT) referenced from fw_i2c.o(i.FW_I2C_Init)
 <LI><a href="#[3a]">FW_I2C_WritePOL</a> from fw_i2c.o(i.FW_I2C_WritePOL) referenced from fw_i2c.o(i.FW_I2C_Init)
 <LI><a href="#[32]">FW_OS_Delay</a> from fw_os.o(i.FW_OS_Delay) referenced from fw_delay.o(i.FW_Delay_Init)
 <LI><a href="#[135]">FW_Pre_Init</a> from fw_startup.o(i.FW_Pre_Init) referenced from fw_startup.o(Pre_Init_Table)
 <LI><a href="#[11c]">FW_SI2C_Init</a> from fw_si2c.o(i.FW_SI2C_Init) referenced from fw_si2c.o(.constdata)
 <LI><a href="#[11e]">FW_SI2C_Read</a> from fw_si2c.o(i.FW_SI2C_Read) referenced from fw_si2c.o(.constdata)
 <LI><a href="#[11d]">FW_SI2C_Write</a> from fw_si2c.o(i.FW_SI2C_Write) referenced from fw_si2c.o(.constdata)
 <LI><a href="#[4a]">FW_SPI_CSIOSet</a> from fw_spi.o(i.FW_SPI_CSIOSet) referenced from fw_spi.o(i.FW_SPI_Init)
 <LI><a href="#[40]">FW_SPI_IH_RC</a> from fw_spi.o(i.FW_SPI_IH_RC) referenced from fw_spi.o(i.FW_SPI_Init)
 <LI><a href="#[41]">FW_SPI_IH_RX</a> from fw_spi.o(i.FW_SPI_IH_RX) referenced from fw_spi.o(i.FW_SPI_Init)
 <LI><a href="#[42]">FW_SPI_IH_TC</a> from fw_spi.o(i.FW_SPI_IH_TC) referenced from fw_spi.o(i.FW_SPI_Init)
 <LI><a href="#[43]">FW_SPI_IH_TX</a> from fw_spi.o(i.FW_SPI_IH_TX) referenced from fw_spi.o(i.FW_SPI_Init)
 <LI><a href="#[49]">FW_SPI_ReadDMA</a> from fw_spi.o(i.FW_SPI_ReadDMA) referenced from fw_spi.o(i.FW_SPI_Init)
 <LI><a href="#[48]">FW_SPI_ReadINT</a> from fw_spi.o(i.FW_SPI_ReadINT) referenced from fw_spi.o(i.FW_SPI_Init)
 <LI><a href="#[47]">FW_SPI_ReadPOL</a> from fw_spi.o(i.FW_SPI_ReadPOL) referenced from fw_spi.o(i.FW_SPI_Init)
 <LI><a href="#[46]">FW_SPI_WriteDMA</a> from fw_spi.o(i.FW_SPI_WriteDMA) referenced from fw_spi.o(i.FW_SPI_Init)
 <LI><a href="#[45]">FW_SPI_WriteINT</a> from fw_spi.o(i.FW_SPI_WriteINT) referenced from fw_spi.o(i.FW_SPI_Init)
 <LI><a href="#[44]">FW_SPI_WritePOL</a> from fw_spi.o(i.FW_SPI_WritePOL) referenced from fw_spi.o(i.FW_SPI_Init)
 <LI><a href="#[4d]">FW_UART_IH_RC</a> from fw_uart.o(i.FW_UART_IH_RC) referenced from fw_uart.o(i.FW_UART_Init)
 <LI><a href="#[4e]">FW_UART_IH_RX</a> from fw_uart.o(i.FW_UART_IH_RX) referenced from fw_uart.o(i.FW_UART_Init)
 <LI><a href="#[4f]">FW_UART_IH_TC</a> from fw_uart.o(i.FW_UART_IH_TC) referenced from fw_uart.o(i.FW_UART_Init)
 <LI><a href="#[50]">FW_UART_IH_TX</a> from fw_uart.o(i.FW_UART_IH_TX) referenced from fw_uart.o(i.FW_UART_Init)
 <LI><a href="#[56]">FW_UART_ReadDMA</a> from fw_uart.o(i.FW_UART_ReadDMA) referenced from fw_uart.o(i.FW_UART_Init)
 <LI><a href="#[55]">FW_UART_ReadINT</a> from fw_uart.o(i.FW_UART_ReadINT) referenced from fw_uart.o(i.FW_UART_Init)
 <LI><a href="#[54]">FW_UART_ReadPOL</a> from fw_uart.o(i.FW_UART_ReadPOL) referenced from fw_uart.o(i.FW_UART_Init)
 <LI><a href="#[57]">FW_UART_WaitNull</a> from fw_uart.o(i.FW_UART_WaitNull) referenced from fw_uart.o(i.FW_UART_ReadPOL)
 <LI><a href="#[57]">FW_UART_WaitNull</a> from fw_uart.o(i.FW_UART_WaitNull) referenced from fw_uart.o(i.FW_UART_WritePOL)
 <LI><a href="#[53]">FW_UART_WriteDMA</a> from fw_uart.o(i.FW_UART_WriteDMA) referenced from fw_uart.o(i.FW_UART_Init)
 <LI><a href="#[52]">FW_UART_WriteINT</a> from fw_uart.o(i.FW_UART_WriteINT) referenced from fw_uart.o(i.FW_UART_Init)
 <LI><a href="#[51]">FW_UART_WritePOL</a> from fw_uart.o(i.FW_UART_WritePOL) referenced from fw_uart.o(i.FW_UART_Init)
 <LI><a href="#[12e]">HC595_Config</a> from hc595.o(i.HC595_Config) referenced from hc595.o(Device_Table)
 <LI><a href="#[10d]">HC595_Port_Init</a> from hc595.o(i.HC595_Port_Init) referenced from hc595.o(.constdata)
 <LI><a href="#[10e]">HC595_Port_Write</a> from hc595.o(i.HC595_Port_Write) referenced from hc595.o(.constdata)
 <LI><a href="#[3]">HardFault_Handler</a> from startup_swm181.o(.text) referenced from startup_swm181.o(RESET)
 <LI><a href="#[131]">IFlash_Driver_Probe</a> from fw_flash.o(i.IFlash_Driver_Probe) referenced from fw_flash.o(Device_Table)
 <LI><a href="#[ac]">IFlash_Erase_Sector</a> from ll_flash.o(i.IFlash_Erase_Sector) referenced from ll_flash.o(.constdata)
 <LI><a href="#[aa]">IFlash_Get_CID</a> from ll_flash.o(i.IFlash_Get_CID) referenced from ll_flash.o(.constdata)
 <LI><a href="#[a9]">IFlash_Get_Main</a> from ll_flash.o(i.IFlash_Get_Main) referenced from ll_flash.o(.constdata)
 <LI><a href="#[ab]">IFlash_Get_PE</a> from ll_flash.o(i.IFlash_Get_PE) referenced from ll_flash.o(.constdata)
 <LI><a href="#[a7]">IFlash_Get_SectorBase</a> from ll_flash.o(i.IFlash_Get_SectorBase) referenced from ll_flash.o(.constdata)
 <LI><a href="#[a6]">IFlash_Get_SectorNum</a> from ll_flash.o(i.IFlash_Get_SectorNum) referenced from ll_flash.o(.constdata)
 <LI><a href="#[a8]">IFlash_Get_SectorSize</a> from ll_flash.o(i.IFlash_Get_SectorSize) referenced from ll_flash.o(.constdata)
 <LI><a href="#[ae]">IFlash_Read</a> from ll_flash.o(i.IFlash_Read) referenced from ll_flash.o(.constdata)
 <LI><a href="#[5f]">IFlash_Read_Gran</a> from ll_flash.o(i.IFlash_Read_Gran) referenced from ll_flash.o(i.IFlash_Read)
 <LI><a href="#[5f]">IFlash_Read_Gran</a> from ll_flash.o(i.IFlash_Read_Gran) referenced from ll_flash.o(i.IFlash_Write)
 <LI><a href="#[ad]">IFlash_Write</a> from ll_flash.o(i.IFlash_Write) referenced from ll_flash.o(.constdata)
 <LI><a href="#[5e]">IFlash_Write_Gran</a> from ll_flash.o(i.IFlash_Write_Gran) referenced from ll_flash.o(i.IFlash_Read)
 <LI><a href="#[5e]">IFlash_Write_Gran</a> from ll_flash.o(i.IFlash_Write_Gran) referenced from ll_flash.o(i.IFlash_Write)
 <LI><a href="#[c2]">ILI_BL_Get</a> from ili9341.o(i.ILI_BL_Get) referenced from ili9341.o(.constdata)
 <LI><a href="#[c1]">ILI_BL_Set</a> from ili9341.o(i.ILI_BL_Set) referenced from ili9341.o(.constdata)
 <LI><a href="#[c4]">ILI_Draw_Point</a> from ili9341.o(i.ILI_Draw_Point) referenced from ili9341.o(.constdata)
 <LI><a href="#[c3]">ILI_Fill_Area</a> from ili9341.o(i.ILI_Fill_Area) referenced from ili9341.o(.constdata)
 <LI><a href="#[c0]">ILI_Get_CID</a> from ili9341.o(i.ILI_Get_CID) referenced from ili9341.o(.constdata)
 <LI><a href="#[c5]">ILI_Get_Point</a> from ili9341.o(i.ILI_Get_Point) referenced from ili9341.o(.constdata)
 <LI><a href="#[bf]">ILI_Init</a> from ili9341.o(i.ILI_Init) referenced from ili9341.o(.constdata)
 <LI><a href="#[4b]">ILock</a> from fw_system.o(i.ILock) referenced from fw_system.o(i.FW_System_Init)
 <LI><a href="#[be]">IO_Encoder_GetCounter</a> from io_encoder.o(i.IO_Encoder_GetCounter) referenced from io_encoder.o(.constdata)
 <LI><a href="#[bd]">IO_Encoder_Init</a> from io_encoder.o(i.IO_Encoder_Init) referenced from io_encoder.o(.constdata)
 <LI><a href="#[5c]">IO_HC595_CTL</a> from hc595.o(i.IO_HC595_CTL) referenced from hc595.o(i.HC595_Port_Init)
 <LI><a href="#[5b]">IO_HC595_Init</a> from hc595.o(i.IO_HC595_Init) referenced from hc595.o(i.HC595_Port_Init)
 <LI><a href="#[5d]">IO_HC595_Write</a> from hc595.o(i.IO_HC595_Write) referenced from hc595.o(i.HC595_Port_Init)
 <LI><a href="#[64]">IO_Init</a> from ili9341.o(i.IO_Init) referenced from ili9341.o(i.ILI_Init)
 <LI><a href="#[67]">IO_Read_Data</a> from ili9341.o(i.IO_Read_Data) referenced from ili9341.o(i.ILI_Init)
 <LI><a href="#[65]">IO_Write_Cmd</a> from ili9341.o(i.IO_Write_Cmd) referenced from ili9341.o(i.ILI_Init)
 <LI><a href="#[66]">IO_Write_Data</a> from ili9341.o(i.IO_Write_Data) referenced from ili9341.o(i.ILI_Init)
 <LI><a href="#[7]">IRQ0_Handler</a> from startup_swm181.o(.text) referenced from startup_swm181.o(RESET)
 <LI><a href="#[11]">IRQ10_Handler</a> from startup_swm181.o(.text) referenced from startup_swm181.o(RESET)
 <LI><a href="#[12]">IRQ11_Handler</a> from startup_swm181.o(.text) referenced from startup_swm181.o(RESET)
 <LI><a href="#[13]">IRQ12_Handler</a> from startup_swm181.o(.text) referenced from startup_swm181.o(RESET)
 <LI><a href="#[14]">IRQ13_Handler</a> from startup_swm181.o(.text) referenced from startup_swm181.o(RESET)
 <LI><a href="#[15]">IRQ14_Handler</a> from startup_swm181.o(.text) referenced from startup_swm181.o(RESET)
 <LI><a href="#[16]">IRQ15_Handler</a> from startup_swm181.o(.text) referenced from startup_swm181.o(RESET)
 <LI><a href="#[17]">IRQ16_Handler</a> from startup_swm181.o(.text) referenced from startup_swm181.o(RESET)
 <LI><a href="#[18]">IRQ17_Handler</a> from startup_swm181.o(.text) referenced from startup_swm181.o(RESET)
 <LI><a href="#[19]">IRQ18_Handler</a> from startup_swm181.o(.text) referenced from startup_swm181.o(RESET)
 <LI><a href="#[1a]">IRQ19_Handler</a> from startup_swm181.o(.text) referenced from startup_swm181.o(RESET)
 <LI><a href="#[8]">IRQ1_Handler</a> from startup_swm181.o(.text) referenced from startup_swm181.o(RESET)
 <LI><a href="#[1b]">IRQ20_Handler</a> from startup_swm181.o(.text) referenced from startup_swm181.o(RESET)
 <LI><a href="#[1c]">IRQ21_Handler</a> from startup_swm181.o(.text) referenced from startup_swm181.o(RESET)
 <LI><a href="#[1d]">IRQ22_Handler</a> from startup_swm181.o(.text) referenced from startup_swm181.o(RESET)
 <LI><a href="#[1e]">IRQ23_Handler</a> from startup_swm181.o(.text) referenced from startup_swm181.o(RESET)
 <LI><a href="#[1f]">IRQ24_Handler</a> from startup_swm181.o(.text) referenced from startup_swm181.o(RESET)
 <LI><a href="#[20]">IRQ25_Handler</a> from startup_swm181.o(.text) referenced from startup_swm181.o(RESET)
 <LI><a href="#[21]">IRQ26_Handler</a> from startup_swm181.o(.text) referenced from startup_swm181.o(RESET)
 <LI><a href="#[22]">IRQ27_Handler</a> from startup_swm181.o(.text) referenced from startup_swm181.o(RESET)
 <LI><a href="#[23]">IRQ28_Handler</a> from startup_swm181.o(.text) referenced from startup_swm181.o(RESET)
 <LI><a href="#[24]">IRQ29_Handler</a> from startup_swm181.o(.text) referenced from startup_swm181.o(RESET)
 <LI><a href="#[9]">IRQ2_Handler</a> from startup_swm181.o(.text) referenced from startup_swm181.o(RESET)
 <LI><a href="#[25]">IRQ30_Handler</a> from startup_swm181.o(.text) referenced from startup_swm181.o(RESET)
 <LI><a href="#[26]">IRQ31_Handler</a> from startup_swm181.o(.text) referenced from startup_swm181.o(RESET)
 <LI><a href="#[a]">IRQ3_Handler</a> from startup_swm181.o(.text) referenced from startup_swm181.o(RESET)
 <LI><a href="#[b]">IRQ4_Handler</a> from startup_swm181.o(.text) referenced from startup_swm181.o(RESET)
 <LI><a href="#[c]">IRQ5_Handler</a> from startup_swm181.o(.text) referenced from startup_swm181.o(RESET)
 <LI><a href="#[d]">IRQ6_Handler</a> from startup_swm181.o(.text) referenced from startup_swm181.o(RESET)
 <LI><a href="#[e]">IRQ7_Handler</a> from startup_swm181.o(.text) referenced from startup_swm181.o(RESET)
 <LI><a href="#[f]">IRQ8_Handler</a> from startup_swm181.o(.text) referenced from startup_swm181.o(RESET)
 <LI><a href="#[10]">IRQ9_Handler</a> from startup_swm181.o(.text) referenced from startup_swm181.o(RESET)
 <LI><a href="#[132]">IRTC_Driver_Probe</a> from fw_rtc.o(i.IRTC_Driver_Probe) referenced from fw_rtc.o(Device_Table)
 <LI><a href="#[4c]">IUnlock</a> from fw_system.o(i.IUnlock) referenced from fw_system.o(i.FW_System_Init)
 <LI><a href="#[133]">IWDG_Driver_Probe</a> from fw_wdg.o(i.IWDG_Driver_Probe) referenced from fw_wdg.o(Device_Table)
 <LI><a href="#[b0]">IWDG_FeedDog</a> from ll_wdg.o(i.IWDG_FeedDog) referenced from ll_wdg.o(.constdata)
 <LI><a href="#[b1]">IWDG_Get_MaxTime</a> from ll_wdg.o(i.IWDG_Get_MaxTime) referenced from ll_wdg.o(.constdata)
 <LI><a href="#[b2]">IWDG_Get_MinTime</a> from ll_wdg.o(i.IWDG_Get_MinTime) referenced from ll_wdg.o(.constdata)
 <LI><a href="#[af]">IWDG_Init</a> from ll_wdg.o(i.IWDG_Init) referenced from ll_wdg.o(.constdata)
 <LI><a href="#[b6]">LL_SPI_CTL</a> from ll_spi.o(i.LL_SPI_CTL) referenced from ll_spi.o(.constdata)
 <LI><a href="#[b5]">LL_SPI_Init</a> from ll_spi.o(i.LL_SPI_Init) referenced from ll_spi.o(.constdata)
 <LI><a href="#[ba]">LL_SPI_RX_Byte</a> from ll_spi.o(i.LL_SPI_RX_Byte) referenced from ll_spi.o(.constdata)
 <LI><a href="#[b8]">LL_SPI_RX_CTL</a> from ll_spi.o(i.LL_SPI_RX_CTL) referenced from ll_spi.o(.constdata)
 <LI><a href="#[b9]">LL_SPI_TX_Byte</a> from ll_spi.o(i.LL_SPI_TX_Byte) referenced from ll_spi.o(.constdata)
 <LI><a href="#[b7]">LL_SPI_TX_CTL</a> from ll_spi.o(i.LL_SPI_TX_CTL) referenced from ll_spi.o(.constdata)
 <LI><a href="#[bc]">LL_SPI_Wait_RC</a> from ll_spi.o(i.LL_SPI_Wait_RC) referenced from ll_spi.o(.constdata)
 <LI><a href="#[bb]">LL_SPI_Wait_TC</a> from ll_spi.o(i.LL_SPI_Wait_TC) referenced from ll_spi.o(.constdata)
 <LI><a href="#[9c]">LL_UART_Init</a> from ll_uart.o(i.LL_UART_Init) referenced from ll_uart.o(.constdata)
 <LI><a href="#[f9]">MF_S522_BlockRead</a> from fm17522.o(i.MF_S522_BlockRead) referenced from fm17522.o(.constdata)
 <LI><a href="#[fa]">MF_S522_BlockWrite</a> from fm17522.o(i.MF_S522_BlockWrite) referenced from fm17522.o(.constdata)
 <LI><a href="#[f8]">MF_S522_CardActive</a> from fm17522.o(i.MF_S522_CardActive) referenced from fm17522.o(.constdata)
 <LI><a href="#[f6]">MF_S522_CardHalt</a> from fm17522.o(i.MF_S522_CardHalt) referenced from fm17522.o(.constdata)
 <LI><a href="#[f7]">MF_S522_CardRequest</a> from fm17522.o(i.MF_S522_CardRequest) referenced from fm17522.o(.constdata)
 <LI><a href="#[f1]">MF_S522_Init</a> from fm17522.o(i.MF_S522_Init) referenced from fm17522.o(.constdata)
 <LI><a href="#[f3]">MF_S522_LPMConfig</a> from fm17522.o(i.MF_S522_LPMConfig) referenced from fm17522.o(.constdata)
 <LI><a href="#[f2]">MF_S522_Reset</a> from fm17522.o(i.MF_S522_Reset) referenced from fm17522.o(.constdata)
 <LI><a href="#[f4]">MF_S522_SetCP</a> from fm17522.o(i.MF_S522_SetCP) referenced from fm17522.o(.constdata)
 <LI><a href="#[f5]">MF_S522_SetRFM</a> from fm17522.o(i.MF_S522_SetRFM) referenced from fm17522.o(.constdata)
 <LI><a href="#[138]">NLock</a> from fw_system.o(i.NLock) referenced from fw_system.o(.data)
 <LI><a href="#[2]">NMI_Handler</a> from ll_system.o(i.NMI_Handler) referenced from startup_swm181.o(RESET)
 <LI><a href="#[139]">NUnlock</a> from fw_system.o(i.NUnlock) referenced from fw_system.o(.data)
 <LI><a href="#[124]">PWM_CTL</a> from fw_timer.o(i.PWM_CTL) referenced from fw_timer.o(.constdata)
 <LI><a href="#[123]">PWM_Get_DC</a> from fw_timer.o(i.PWM_Get_DC) referenced from fw_timer.o(.constdata)
 <LI><a href="#[121]">PWM_Get_Frequency</a> from fw_timer.o(i.PWM_Get_Frequency) referenced from fw_timer.o(.constdata)
 <LI><a href="#[11f]">PWM_Init</a> from fw_timer.o(i.PWM_Init) referenced from fw_timer.o(.constdata)
 <LI><a href="#[122]">PWM_Set_DC</a> from fw_timer.o(i.PWM_Set_DC) referenced from fw_timer.o(.constdata)
 <LI><a href="#[120]">PWM_Set_Frequency</a> from fw_timer.o(i.PWM_Set_Frequency) referenced from fw_timer.o(.constdata)
 <LI><a href="#[5]">PendSV_Handler</a> from startup_swm181.o(.text) referenced from startup_swm181.o(RESET)
 <LI><a href="#[97]">Pin_GetOutput</a> from ll_gpio.o(i.Pin_GetOutput) referenced from ll_gpio.o(.constdata)
 <LI><a href="#[95]">Pin_Init</a> from ll_gpio.o(i.Pin_Init) referenced from ll_gpio.o(.constdata)
 <LI><a href="#[98]">Pin_Read</a> from ll_gpio.o(i.Pin_Read) referenced from ll_gpio.o(.constdata)
 <LI><a href="#[96]">Pin_Write</a> from ll_gpio.o(i.Pin_Write) referenced from ll_gpio.o(.constdata)
 <LI><a href="#[9a]">Port_GetOutput</a> from ll_gpio.o(i.Port_GetOutput) referenced from ll_gpio.o(.constdata)
 <LI><a href="#[9b]">Port_Read</a> from ll_gpio.o(i.Port_Read) referenced from ll_gpio.o(.constdata)
 <LI><a href="#[99]">Port_Write</a> from ll_gpio.o(i.Port_Write) referenced from ll_gpio.o(.constdata)
 <LI><a href="#[1]">Reset_Handler</a> from startup_swm181.o(.text) referenced from startup_swm181.o(RESET)
 <LI><a href="#[76]">SCK_CPOL0</a> from fw_sspi.o(i.SCK_CPOL0) referenced from fw_sspi.o(i.SSPI_Init)
 <LI><a href="#[73]">SCK_CPOL1</a> from fw_sspi.o(i.SCK_CPOL1) referenced from fw_sspi.o(i.SSPI_Init)
 <LI><a href="#[74]">SCK_FE</a> from fw_sspi.o(i.SCK_FE) referenced from fw_sspi.o(i.SSPI_Init)
 <LI><a href="#[75]">SCK_RE</a> from fw_sspi.o(i.SCK_RE) referenced from fw_sspi.o(i.SSPI_Init)
 <LI><a href="#[6d]">SGP_Erase_Chip</a> from gd25q64.o(i.SGP_Erase_Chip) referenced from gd25q64.o(i.SNOR_Init)
 <LI><a href="#[6e]">SGP_Erase_Sector</a> from gd25q64.o(i.SGP_Erase_Sector) referenced from gd25q64.o(i.SNOR_Init)
 <LI><a href="#[6c]">SGP_Get_CID</a> from gd25q64.o(i.SGP_Get_CID) referenced from gd25q64.o(i.SNOR_Init)
 <LI><a href="#[69]">SGP_Get_Reg</a> from fm17522.o(i.SGP_Get_Reg) referenced from fm17522.o(i.MF_S522_Init)
 <LI><a href="#[68]">SGP_Init</a> from fm17522.o(i.SGP_Init) referenced from fm17522.o(i.MF_S522_Init)
 <LI><a href="#[6b]">SGP_Init</a> from gd25q64.o(i.SGP_Init) referenced from gd25q64.o(i.SNOR_Init)
 <LI><a href="#[70]">SGP_Read</a> from gd25q64.o(i.SGP_Read) referenced from gd25q64.o(i.SNOR_Init)
 <LI><a href="#[6a]">SGP_Set_Reg</a> from fm17522.o(i.SGP_Set_Reg) referenced from fm17522.o(i.MF_S522_Init)
 <LI><a href="#[6f]">SGP_Write</a> from gd25q64.o(i.SGP_Write) referenced from gd25q64.o(i.SNOR_Init)
 <LI><a href="#[cd]">SNOR_Erase_Chip</a> from gd25q64.o(i.SNOR_Erase_Chip) referenced from gd25q64.o(.constdata)
 <LI><a href="#[ce]">SNOR_Erase_Sector</a> from gd25q64.o(i.SNOR_Erase_Sector) referenced from gd25q64.o(.constdata)
 <LI><a href="#[cb]">SNOR_Get_CID</a> from gd25q64.o(i.SNOR_Get_CID) referenced from gd25q64.o(.constdata)
 <LI><a href="#[ca]">SNOR_Get_Main</a> from gd25q64.o(i.SNOR_Get_Main) referenced from gd25q64.o(.constdata)
 <LI><a href="#[cc]">SNOR_Get_PEState</a> from gd25q64.o(i.SNOR_Get_PEState) referenced from gd25q64.o(.constdata)
 <LI><a href="#[c8]">SNOR_Get_SectorBase</a> from gd25q64.o(i.SNOR_Get_SectorBase) referenced from gd25q64.o(.constdata)
 <LI><a href="#[c7]">SNOR_Get_SectorNum</a> from gd25q64.o(i.SNOR_Get_SectorNum) referenced from gd25q64.o(.constdata)
 <LI><a href="#[c9]">SNOR_Get_SectorSize</a> from gd25q64.o(i.SNOR_Get_SectorSize) referenced from gd25q64.o(.constdata)
 <LI><a href="#[c6]">SNOR_Init</a> from gd25q64.o(i.SNOR_Init) referenced from gd25q64.o(.constdata)
 <LI><a href="#[d0]">SNOR_Read</a> from gd25q64.o(i.SNOR_Read) referenced from gd25q64.o(.constdata)
 <LI><a href="#[cf]">SNOR_Write</a> from gd25q64.o(i.SNOR_Write) referenced from gd25q64.o(.constdata)
 <LI><a href="#[12b]">SPI0_Config</a> from ll_spi.o(i.SPI0_Config) referenced from ll_spi.o(Device_Table)
 <LI><a href="#[12c]">SPI1_Config</a> from ll_spi.o(i.SPI1_Config) referenced from ll_spi.o(Device_Table)
 <LI><a href="#[12d]">SPI2_Config</a> from ll_spi.o(i.SPI2_Config) referenced from ll_spi.o(Device_Table)
 <LI><a href="#[59]">SPI_HC595_CTL</a> from hc595.o(i.SPI_HC595_CTL) referenced from hc595.o(i.HC595_Port_Init)
 <LI><a href="#[58]">SPI_HC595_Init</a> from hc595.o(i.SPI_HC595_Init) referenced from hc595.o(i.HC595_Port_Init)
 <LI><a href="#[5a]">SPI_HC595_Write</a> from hc595.o(i.SPI_HC595_Write) referenced from hc595.o(i.HC595_Port_Init)
 <LI><a href="#[119]">SSPI_CS_Set</a> from fw_sspi.o(i.SSPI_CS_Set) referenced from fw_sspi.o(.constdata)
 <LI><a href="#[117]">SSPI_DeInit</a> from fw_sspi.o(i.SSPI_DeInit) referenced from fw_sspi.o(.constdata)
 <LI><a href="#[118]">SSPI_Init</a> from fw_sspi.o(i.SSPI_Init) referenced from fw_sspi.o(.constdata)
 <LI><a href="#[11b]">SSPI_Read</a> from fw_sspi.o(i.SSPI_Read) referenced from fw_sspi.o(.constdata)
 <LI><a href="#[11a]">SSPI_Write</a> from fw_sspi.o(i.SSPI_Write) referenced from fw_sspi.o(.constdata)
 <LI><a href="#[102]">ST7735_BL_Get</a> from st7735.o(i.ST7735_BL_Get) referenced from st7735.o(.constdata)
 <LI><a href="#[101]">ST7735_BL_Set</a> from st7735.o(i.ST7735_BL_Set) referenced from st7735.o(.constdata)
 <LI><a href="#[104]">ST7735_Draw_Point</a> from st7735.o(i.ST7735_Draw_Point) referenced from st7735.o(.constdata)
 <LI><a href="#[103]">ST7735_Fill_Area</a> from st7735.o(i.ST7735_Fill_Area) referenced from st7735.o(.constdata)
 <LI><a href="#[100]">ST7735_Get_CID</a> from st7735.o(i.ST7735_Get_CID) referenced from st7735.o(.constdata)
 <LI><a href="#[105]">ST7735_Get_Point</a> from st7735.o(i.ST7735_Get_Point) referenced from st7735.o(.constdata)
 <LI><a href="#[106]">ST7735_Get_ScreenSize</a> from st7735.o(i.ST7735_Get_ScreenSize) referenced from st7735.o(.constdata)
 <LI><a href="#[ff]">ST7735_Init</a> from st7735.o(i.ST7735_Init) referenced from st7735.o(.constdata)
 <LI><a href="#[10f]">SUART_Init</a> from fw_suart.o(i.SUART_Init) referenced from fw_suart.o(.constdata)
 <LI><a href="#[111]">SUART_RX_Byte</a> from fw_suart.o(i.SUART_RX_Byte) referenced from fw_suart.o(.constdata)
 <LI><a href="#[110]">SUART_TX_Byte</a> from fw_suart.o(i.SUART_TX_Byte) referenced from fw_suart.o(.constdata)
 <LI><a href="#[112]">SUART_Wait_RC</a> from fw_suart.o(i.SUART_Wait_RC) referenced from fw_suart.o(.constdata)
 <LI><a href="#[4]">SVC_Handler</a> from startup_swm181.o(.text) referenced from startup_swm181.o(RESET)
 <LI><a href="#[6]">SysTick_Handler</a> from ll_delay.o(i.SysTick_Handler) referenced from startup_swm181.o(RESET)
 <LI><a href="#[8f]">System_Clear_RSTSource</a> from ll_system.o(i.System_Clear_RSTSource) referenced from ll_system.o(.constdata)
 <LI><a href="#[87]">System_Disable_IRQ</a> from ll_system.o(i.System_Disable_IRQ) referenced from ll_system.o(.constdata)
 <LI><a href="#[88]">System_Enable_IRQ</a> from ll_system.o(i.System_Enable_IRQ) referenced from ll_system.o(.constdata)
 <LI><a href="#[89]">System_Get_IRQState</a> from ll_system.o(i.System_Get_IRQState) referenced from ll_system.o(.constdata)
 <LI><a href="#[8e]">System_Get_RSTSource</a> from ll_system.o(i.System_Get_RSTSource) referenced from ll_system.o(.constdata)
 <LI><a href="#[8b]">System_Get_Sysclk</a> from ll_system.o(i.System_Get_Sysclk) referenced from ll_system.o(.constdata)
 <LI><a href="#[86]">System_Init</a> from ll_system.o(i.System_Init) referenced from ll_system.o(.constdata)
 <LI><a href="#[8a]">System_Set_Sysclk</a> from ll_system.o(i.System_Set_Sysclk) referenced from ll_system.o(.constdata)
 <LI><a href="#[8c]">System_Set_VectorTable</a> from ll_system.o(i.System_Set_VectorTable) referenced from ll_system.o(.constdata)
 <LI><a href="#[8d]">System_Soft_Reset</a> from ll_system.o(i.System_Soft_Reset) referenced from ll_system.o(.constdata)
 <LI><a href="#[10b]">TM77_Get_Sample</a> from tm7711.o(i.TM77_Get_Sample) referenced from tm7711.o(.constdata)
 <LI><a href="#[10a]">TM77_Get_Temprature</a> from tm7711.o(i.TM77_Get_Temprature) referenced from tm7711.o(.constdata)
 <LI><a href="#[107]">TM77_Init</a> from tm7711.o(i.TM77_Init) referenced from tm7711.o(.constdata)
 <LI><a href="#[108]">TM77_Reset</a> from tm7711.o(i.TM77_Reset) referenced from tm7711.o(.constdata)
 <LI><a href="#[10c]">TM77_Sample_Formula</a> from tm7711.o(i.TM77_Sample_Formula) referenced from tm7711.o(.constdata)
 <LI><a href="#[109]">TM77_Set_Period</a> from tm7711.o(i.TM77_Set_Period) referenced from tm7711.o(.constdata)
 <LI><a href="#[72]">TRByte_LSB</a> from fw_sspi.o(i.TRByte_LSB) referenced from fw_sspi.o(i.SSPI_Init)
 <LI><a href="#[71]">TRByte_MSB</a> from fw_sspi.o(i.TRByte_MSB) referenced from fw_sspi.o(i.SSPI_Init)
 <LI><a href="#[12a]">UART3_Config</a> from ll_uart.o(i.UART3_Config) referenced from ll_uart.o(Device_Table)
 <LI><a href="#[9d]">UART_CTL</a> from ll_uart.o(i.UART_CTL) referenced from ll_uart.o(.constdata)
 <LI><a href="#[a5]">UART_Get_RDL</a> from ll_uart.o(i.UART_Get_RDL) referenced from ll_uart.o(.constdata)
 <LI><a href="#[a1]">UART_RX_Byte</a> from ll_uart.o(i.UART_RX_Byte) referenced from ll_uart.o(.constdata)
 <LI><a href="#[9f]">UART_RX_CTL</a> from ll_uart.o(i.UART_RX_CTL) referenced from ll_uart.o(.constdata)
 <LI><a href="#[a4]">UART_Set_TDL</a> from ll_uart.o(i.UART_Set_TDL) referenced from ll_uart.o(.constdata)
 <LI><a href="#[a0]">UART_TX_Byte</a> from ll_uart.o(i.UART_TX_Byte) referenced from ll_uart.o(.constdata)
 <LI><a href="#[9e]">UART_TX_CTL</a> from ll_uart.o(i.UART_TX_CTL) referenced from ll_uart.o(.constdata)
 <LI><a href="#[a3]">UART_Wait_RC</a> from ll_uart.o(i.UART_Wait_RC) referenced from ll_uart.o(.constdata)
 <LI><a href="#[a2]">UART_Wait_TC</a> from ll_uart.o(i.UART_Wait_TC) referenced from ll_uart.o(.constdata)
 <LI><a href="#[127]">USART0_Config</a> from ll_uart.o(i.USART0_Config) referenced from ll_uart.o(Device_Table)
 <LI><a href="#[128]">USART1_Config</a> from ll_uart.o(i.USART1_Config) referenced from ll_uart.o(Device_Table)
 <LI><a href="#[129]">USART2_Config</a> from ll_uart.o(i.USART2_Config) referenced from ll_uart.o(Device_Table)
 <LI><a href="#[db]">WF183D_Get_Pressure</a> from wf183d.o(i.WF183D_Get_Pressure) referenced from wf183d.o(.constdata)
 <LI><a href="#[da]">WF183D_Get_Temprature</a> from wf183d.o(i.WF183D_Get_Temprature) referenced from wf183d.o(.constdata)
 <LI><a href="#[7b]">WF183D_I2C_GetPressure</a> from wf183d.o(i.WF183D_I2C_GetPressure) referenced from wf183d.o(i.WF183D_Init)
 <LI><a href="#[7c]">WF183D_I2C_GetTemprature</a> from wf183d.o(i.WF183D_I2C_GetTemprature) referenced from wf183d.o(i.WF183D_Init)
 <LI><a href="#[7a]">WF183D_I2C_Init</a> from wf183d.o(i.WF183D_I2C_Init) referenced from wf183d.o(i.WF183D_Init)
 <LI><a href="#[d7]">WF183D_Init</a> from wf183d.o(i.WF183D_Init) referenced from wf183d.o(.constdata)
 <LI><a href="#[7e]">WF183D_OWI_GetPressure</a> from wf183d.o(i.WF183D_OWI_GetPressure) referenced from wf183d.o(i.WF183D_Init)
 <LI><a href="#[7f]">WF183D_OWI_GetTemprature</a> from wf183d.o(i.WF183D_OWI_GetTemprature) referenced from wf183d.o(i.WF183D_Init)
 <LI><a href="#[7d]">WF183D_OWI_Init</a> from wf183d.o(i.WF183D_OWI_Init) referenced from wf183d.o(i.WF183D_Init)
 <LI><a href="#[dc]">WF183D_Press_Formula</a> from wf183d.o(i.WF183D_Press_Formula) referenced from wf183d.o(.constdata)
 <LI><a href="#[d8]">WF183D_Reset</a> from wf183d.o(i.WF183D_Reset) referenced from wf183d.o(.constdata)
 <LI><a href="#[d9]">WF183D_Set_Period</a> from wf183d.o(i.WF183D_Set_Period) referenced from wf183d.o(.constdata)
 <LI><a href="#[78]">WF183D_UART_GetPressure</a> from wf183d.o(i.WF183D_UART_GetPressure) referenced from wf183d.o(i.WF183D_Init)
 <LI><a href="#[79]">WF183D_UART_GetTemprature</a> from wf183d.o(i.WF183D_UART_GetTemprature) referenced from wf183d.o(i.WF183D_Init)
 <LI><a href="#[77]">WF183D_UART_Init</a> from wf183d.o(i.WF183D_UART_Init) referenced from wf183d.o(i.WF183D_Init)
 <LI><a href="#[d5]">WF200D_Get_Pressure</a> from wf200d.o(i.WF200D_Get_Pressure) referenced from wf200d.o(.constdata)
 <LI><a href="#[d4]">WF200D_Get_Temprature</a> from wf200d.o(i.WF200D_Get_Temprature) referenced from wf200d.o(.constdata)
 <LI><a href="#[80]">WF200D_I2C_Init</a> from wf200d.o(i.WF200D_I2C_Init) referenced from wf200d.o(i.WF200D_Init)
 <LI><a href="#[82]">WF200D_I2C_ReadByte</a> from wf200d.o(i.WF200D_I2C_ReadByte) referenced from wf200d.o(i.WF200D_Init)
 <LI><a href="#[81]">WF200D_I2C_WriteByte</a> from wf200d.o(i.WF200D_I2C_WriteByte) referenced from wf200d.o(i.WF200D_Init)
 <LI><a href="#[d1]">WF200D_Init</a> from wf200d.o(i.WF200D_Init) referenced from wf200d.o(.constdata)
 <LI><a href="#[d6]">WF200D_Press_Formula</a> from wf200d.o(i.WF200D_Press_Formula) referenced from wf200d.o(.constdata)
 <LI><a href="#[d2]">WF200D_Reset</a> from wf200d.o(i.WF200D_Reset) referenced from wf200d.o(.constdata)
 <LI><a href="#[83]">WF200D_SPI_Init</a> from wf200d.o(i.WF200D_SPI_Init) referenced from wf200d.o(i.WF200D_Init)
 <LI><a href="#[85]">WF200D_SPI_ReadByte</a> from wf200d.o(i.WF200D_SPI_ReadByte) referenced from wf200d.o(i.WF200D_Init)
 <LI><a href="#[84]">WF200D_SPI_WriteByte</a> from wf200d.o(i.WF200D_SPI_WriteByte) referenced from wf200d.o(i.WF200D_Init)
 <LI><a href="#[d3]">WF200D_Set_Period</a> from wf200d.o(i.WF200D_Set_Period) referenced from wf200d.o(.constdata)
 <LI><a href="#[134]">WWDG_Driver_Probe</a> from fw_wdg.o(i.WWDG_Driver_Probe) referenced from fw_wdg.o(Device_Table)
 <LI><a href="#[b4]">WWDG_FeedDog</a> from ll_wdg.o(i.WWDG_FeedDog) referenced from ll_wdg.o(.constdata)
 <LI><a href="#[b3]">WWDG_Init</a> from ll_wdg.o(i.WWDG_Init) referenced from ll_wdg.o(.constdata)
 <LI><a href="#[28]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_swm181.o(.text)
 <LI><a href="#[137]">free</a> from mallocr.o(i.__free$realloc) referenced from mm.o(.data)
 <LI><a href="#[27]">main</a> from fw_startup.o(i.$Sub$$main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[136]">malloc</a> from mallocr.o(i.__malloc$realloc) referenced 2 times from mm.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[28]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_swm181.o(.text)
</UL>
<P><STRONG><a name="[23b]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[13a]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[146]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[23c]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[23d]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[23e]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[23f]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[240]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[221]"></a>__asm___11_ll_system_c_bb8ca80c__A_System_Get_IRQState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ll_system.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Get_IRQState
</UL>

<P><STRONG><a name="[1]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_swm181.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_swm181.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm181.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm181.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm181.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm181.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm181.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm181.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>IRQ0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm181.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm181.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>IRQ1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm181.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm181.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>IRQ2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm181.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm181.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>IRQ3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm181.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm181.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>IRQ4_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm181.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ4_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ4_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm181.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>IRQ5_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm181.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ5_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ5_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm181.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>IRQ6_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm181.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ6_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ6_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm181.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>IRQ7_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm181.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ7_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ7_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm181.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>IRQ8_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm181.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ8_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ8_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm181.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>IRQ9_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm181.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ9_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ9_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm181.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>IRQ10_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm181.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ10_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ10_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm181.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>IRQ11_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm181.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ11_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ11_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm181.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>IRQ12_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm181.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ12_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ12_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm181.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>IRQ13_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm181.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ13_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ13_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm181.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>IRQ14_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm181.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ14_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ14_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm181.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>IRQ15_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm181.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ15_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ15_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm181.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>IRQ16_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm181.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ16_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ16_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm181.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>IRQ17_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm181.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ17_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ17_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm181.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>IRQ18_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm181.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ18_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ18_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm181.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>IRQ19_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm181.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ19_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ19_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm181.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>IRQ20_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm181.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ20_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ20_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm181.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>IRQ21_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm181.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ21_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ21_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm181.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>IRQ22_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm181.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ22_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ22_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm181.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>IRQ23_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm181.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ23_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ23_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm181.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>IRQ24_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm181.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ24_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ24_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm181.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>IRQ25_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm181.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ25_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ25_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm181.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>IRQ26_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm181.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ26_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ26_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm181.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>IRQ27_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm181.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ27_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ27_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm181.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>IRQ28_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm181.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ28_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ28_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm181.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>IRQ29_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm181.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ29_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ29_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm181.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>IRQ30_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm181.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ30_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ30_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm181.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>IRQ31_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm181.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ31_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ31_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm181.o(RESET)
</UL>
<P><STRONG><a name="[241]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[13d]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Get_MaxTime
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBlock_Write_SelfAlign
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBlock_Read_SelfAlign
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Init
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Itoa
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Read
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Write
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Set_Index
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Offset_Index
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Offset_Head
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Set_Timer
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_OS_Delay
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_GetUsDuration
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_DefMs
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPI_Init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUART_Init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[242]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[13c]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SI2C_Init
</UL>

<P><STRONG><a name="[144]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[243]"></a>____aeabi_memcpy8$ret$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[244]"></a>___aeabi_memmove4$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[245]"></a>___aeabi_memmove8$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[16e]"></a>__aeabi_memcpy</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBlock_Write_SelfAlign
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBlock_Read_SelfAlign
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_ServerInfo
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNOR_Write
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Write
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Find_StringCS
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Anticollision
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>

<P><STRONG><a name="[1bd]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_Init
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_I2C_Init
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_Init
</UL>

<P><STRONG><a name="[173]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Read_Inter
</UL>

<P><STRONG><a name="[246]"></a>memcpy</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[247]"></a>memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[13f]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[248]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[249]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[13e]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGTR_Config
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Anticollision
</UL>

<P><STRONG><a name="[167]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Set_Mode
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_ServerInfo
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_LinkState
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGTR_DeInit
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGTR_Config
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPI_DeInit
</UL>

<P><STRONG><a name="[24a]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[140]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[176]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Set_Mode
</UL>

<P><STRONG><a name="[161]"></a>strstr</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_ServerInfo
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_APInfo
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_AP_Link
</UL>

<P><STRONG><a name="[162]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Write_Cmd
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Read_Inter
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_ServerInfo
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_APInfo
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_AP_Link
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_String_IsExist
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read_Inter
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read_Fisrt
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Find_StringCS_RL1
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Find_StringCS
</UL>

<P><STRONG><a name="[16d]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_ServerInfo
</UL>

<P><STRONG><a name="[166]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_APInfo
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_PreBind
</UL>

<P><STRONG><a name="[197]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_UART_Init
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_Find
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_Init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Driver_Find
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_PreBind
</UL>

<P><STRONG><a name="[165]"></a>strtok</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, strtok.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strtok
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_ServerInfo
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_APInfo
</UL>

<P><STRONG><a name="[141]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Read
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_APInfo
</UL>

<P><STRONG><a name="[143]"></a>strtol</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[13b]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[24b]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[147]"></a>_chval</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[145]"></a>_strtoul</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[27]"></a>main</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fw_startup.o(i.$Sub$$main))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = main &rArr; FW_Delay_Init &rArr; FW_Delay_GetUsDuration &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_System_Init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_PreInit
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_PreBind
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[17d]"></a>CACHE_Invalid</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, swm181_cache.o(i.CACHE_Invalid))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Write
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase
</UL>

<P><STRONG><a name="[17c]"></a>FLASH_Erase</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, swm181_flash.o(i.FLASH_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_Erase
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CACHE_Invalid
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_Erase_Sector
</UL>

<P><STRONG><a name="[1df]"></a>FLASH_Read</STRONG> (Thumb, 132 bytes, Stack size 12 bytes, swm181_flash.o(i.FLASH_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FLASH_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_Read_Gran
</UL>

<P><STRONG><a name="[17e]"></a>FLASH_Write</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, swm181_flash.o(i.FLASH_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FLASH_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CACHE_Invalid
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_Write_Gran
</UL>

<P><STRONG><a name="[125]"></a>FW_Board_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fw_startup.o(i.FW_Board_Init))
<BR>[Address Reference Count : 1]<UL><LI> fw_startup.o(Board_Init_Table)
</UL>
<P><STRONG><a name="[126]"></a>FW_DEV_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fw_startup.o(i.FW_DEV_Init))
<BR>[Address Reference Count : 1]<UL><LI> fw_startup.o(Device_Init_Table)
</UL>
<P><STRONG><a name="[191]"></a>FW_Delay_GetUsDuration</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, fw_delay.o(i.FW_Delay_GetUsDuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = FW_Delay_GetUsDuration &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Init
</UL>

<P><STRONG><a name="[194]"></a>FW_Delay_GetUsStart</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, fw_delay.o(i.FW_Delay_GetUsStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FW_Delay_GetUsStart
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Init
</UL>

<P><STRONG><a name="[149]"></a>FW_Delay_Init</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, fw_delay.o(i.FW_Delay_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = FW_Delay_Init &rArr; FW_Delay_GetUsDuration &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Driver_Find
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Us
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_OS_IsStart
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_OS_GetTickTime
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_GetUsStart
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_GetUsDuration
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[150]"></a>FW_Delay_Ms</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fw_delay.o(i.FW_Delay_Ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FW_Delay_Ms
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Write
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Set_TRPT
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Server_Link
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Reset
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Read
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_AP_Unlink
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_AP_Probe
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_AP_Link
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Send
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF183D_UART_GetTemprature
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF183D_UART_GetPressure
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF200D_Get_Temprature
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF200D_Get_Pressure
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_Reset
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Set_RF
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Config_ISOType
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Comm
</UL>

<P><STRONG><a name="[220]"></a>FW_Delay_TickTock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fw_delay.o(i.FW_Delay_TickTock))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[195]"></a>FW_Delay_Us</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, fw_delay.o(i.FW_Delay_Us))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FW_Delay_Us
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI_Init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_HC595_Write
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM77_Set_Period
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM77_Get_Temprature
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM77_Get_Sample
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_OW_WaitACK
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_OW_Reset
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_OW_Init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCK_RE
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCK_FE
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUART_TX_Byte
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUART_RX_Byte
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_OW_WriteByte
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_OW_ReadByte
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_Write_Byte
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_Stop
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_Start
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_Read_Byte
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_ACK
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SI2C_Read
</UL>

<P><STRONG><a name="[17a]"></a>FW_Device_Find</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, fw_device.o(i.FW_Device_Find))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = FW_Device_Find &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SEI
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SDI
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC595_Port_Init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_GPIO_Config
</UL>

<P><STRONG><a name="[14a]"></a>FW_Device_PreBind</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, fw_device.o(i.FW_Device_PreBind))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = FW_Device_PreBind &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_List_Init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14b]"></a>FW_Device_PreInit</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, fw_device.o(i.FW_Device_PreInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FW_Device_PreInit
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17b]"></a>FW_Driver_Find</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, fw_driver.o(i.FW_Driver_Find))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = FW_Driver_Find &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF183D_Init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF200D_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNOR_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI_Init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_GPIO_Config
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_Init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_System_Init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Driver_Probe
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_Driver_Probe
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Driver_Probe
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRTC_Driver_Probe
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_Driver_Probe
</UL>

<P><STRONG><a name="[1ba]"></a>FW_I2C_Init</STRONG> (Thumb, 108 bytes, Stack size 104 bytes, fw_i2c.o(i.FW_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = FW_I2C_Init &rArr; SGTR_Config &rArr; MM_Malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGTR_DeInit
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGTR_Config
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF183D_I2C_Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF200D_I2C_Init
</UL>

<P><STRONG><a name="[238]"></a>FW_I2C_Read</STRONG> (Thumb, 26 bytes, Stack size 40 bytes, fw_i2c.o(i.FW_I2C_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FW_I2C_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF200D_I2C_ReadByte
</UL>

<P><STRONG><a name="[233]"></a>FW_I2C_SetDelay</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, fw_i2c.o(i.FW_I2C_SetDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FW_I2C_SetDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF183D_I2C_Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF200D_I2C_Init
</UL>

<P><STRONG><a name="[239]"></a>FW_I2C_Write</STRONG> (Thumb, 26 bytes, Stack size 40 bytes, fw_i2c.o(i.FW_I2C_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FW_I2C_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF200D_I2C_WriteByte
</UL>

<P><STRONG><a name="[15e]"></a>FW_Lock</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fw_system.o(i.FW_Lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FW_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_ServerInfo
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_LinkState
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_AP_Probe
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_AP_Link
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Write
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_String_IsExist
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read_Inter
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read_HL
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read_Fisrt
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_PMB_Write
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_PMB_Set
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Get_DataLength
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Clear_Buffer
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Data_IsCC
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_WriteINT
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_WriteDMA
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_IH_TX
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_IH_TC
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_IH_RX
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_IH_RC
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_IH_TX
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_IH_TC
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_IH_RX
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_IH_RC
</UL>

<P><STRONG><a name="[32]"></a>FW_OS_Delay</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, fw_os.o(i.FW_OS_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = FW_OS_Delay &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_delay.o(i.FW_Delay_Init)
</UL>
<P><STRONG><a name="[193]"></a>FW_OS_GetTickTime</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, fw_os.o(i.FW_OS_GetTickTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FW_OS_GetTickTime
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Init
</UL>

<P><STRONG><a name="[192]"></a>FW_OS_IsStart</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fw_os.o(i.FW_OS_IsStart))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Init
</UL>

<P><STRONG><a name="[159]"></a>FW_OW_Init</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, fw_ow.o(i.FW_OW_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FW_OW_Init &rArr; FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Us
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Read
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_Init
</UL>

<P><STRONG><a name="[15a]"></a>FW_OW_Read</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, fw_ow.o(i.FW_OW_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = FW_OW_Read &rArr; FW_OW_ReadByte &rArr; FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_OW_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_Read
</UL>

<P><STRONG><a name="[155]"></a>FW_OW_Reset</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fw_ow.o(i.FW_OW_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FW_OW_Reset &rArr; FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Us
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_Reset
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_Get_Temprature
</UL>

<P><STRONG><a name="[156]"></a>FW_OW_WaitACK</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, fw_ow.o(i.FW_OW_WaitACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FW_OW_WaitACK &rArr; FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Us
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Read
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_Get_Temprature
</UL>

<P><STRONG><a name="[15b]"></a>FW_OW_Write</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, fw_ow.o(i.FW_OW_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = FW_OW_Write &rArr; FW_OW_WriteByte &rArr; FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_OW_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_Write
</UL>

<P><STRONG><a name="[135]"></a>FW_Pre_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fw_startup.o(i.FW_Pre_Init))
<BR>[Address Reference Count : 1]<UL><LI> fw_startup.o(Pre_Init_Table)
</UL>
<P><STRONG><a name="[196]"></a>FW_SDI</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fw_system.o(i.FW_SDI))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FW_SDI
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_Find
</UL>

<P><STRONG><a name="[198]"></a>FW_SEI</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fw_system.o(i.FW_SEI))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FW_SEI
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_Find
</UL>

<P><STRONG><a name="[219]"></a>FW_SPI_CSSet</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, fw_spi.o(i.FW_SPI_CSSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FW_SPI_CSSet
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF200D_SPI_WriteByte
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF200D_SPI_ReadByte
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_EN
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_DI
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_HC595_Write
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_EN
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_DI
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Set_Reg
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Get_Reg
</UL>

<P><STRONG><a name="[1f8]"></a>FW_SPI_GetTRM</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fw_spi.o(i.FW_SPI_GetTRM))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_TX_CTL
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_RX_CTL
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_Init
</UL>

<P><STRONG><a name="[1cd]"></a>FW_SPI_Init</STRONG> (Thumb, 160 bytes, Stack size 104 bytes, fw_spi.o(i.FW_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = FW_SPI_Init &rArr; FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGTR_DeInit
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGTR_Config
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF200D_SPI_Init
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_HC595_Init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Init
</UL>

<P><STRONG><a name="[21b]"></a>FW_SPI_Read</STRONG> (Thumb, 26 bytes, Stack size 40 bytes, fw_spi.o(i.FW_SPI_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FW_SPI_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF200D_SPI_ReadByte
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Read_Byte
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Read
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Get_CID
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Get_Reg
</UL>

<P><STRONG><a name="[1f6]"></a>FW_SPI_SetPort</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fw_spi.o(i.FW_SPI_SetPort))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_Init
</UL>

<P><STRONG><a name="[1ef]"></a>FW_SPI_Write</STRONG> (Thumb, 26 bytes, Stack size 40 bytes, fw_spi.o(i.FW_SPI_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FW_SPI_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF200D_SPI_WriteByte
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF200D_SPI_ReadByte
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Write_Byte
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Write
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_HC595_Write
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD8_Write_Data
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD8_Write_Cmd
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD8_Write
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Set_Reg
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Get_Reg
</UL>

<P><STRONG><a name="[148]"></a>FW_System_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, fw_system.o(i.FW_System_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = FW_System_Init &rArr; FW_Driver_Find &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Driver_Find
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[163]"></a>FW_UART_ClearFIFO</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, fw_uart.o(i.FW_UART_ClearFIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FW_UART_ClearFIFO &rArr; RB_Clear_Buffer &rArr; FW_Unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Clear_Buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Clear_RBuff
</UL>

<P><STRONG><a name="[16c]"></a>FW_UART_GetDataLength</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, fw_uart.o(i.FW_UART_GetDataLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FW_UART_GetDataLength &rArr; RB_Get_DataLength &rArr; FW_Unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Get_DataLength
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_RDL
</UL>

<P><STRONG><a name="[16a]"></a>FW_UART_GetFIFOBBase</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, fw_uart.o(i.FW_UART_GetFIFOBBase))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FW_UART_GetFIFOBBase
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Get_Buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_RBuff
</UL>

<P><STRONG><a name="[201]"></a>FW_UART_GetTRM</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fw_uart.o(i.FW_UART_GetTRM))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Wait_TC
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Wait_RC
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TX_CTL
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RX_CTL
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_UART_Init
</UL>

<P><STRONG><a name="[16f]"></a>FW_UART_Init</STRONG> (Thumb, 172 bytes, Stack size 104 bytes, fw_uart.o(i.FW_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = FW_UART_Init &rArr; SGTR_Config &rArr; MM_Malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGTR_DeInit
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGTR_Config
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF183D_UART_Init
</UL>

<P><STRONG><a name="[174]"></a>FW_UART_Read</STRONG> (Thumb, 26 bytes, Stack size 40 bytes, fw_uart.o(i.FW_UART_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FW_UART_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Read_Msg
</UL>

<P><STRONG><a name="[169]"></a>FW_UART_ReadFirst</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, fw_uart.o(i.FW_UART_ReadFirst))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = FW_UART_ReadFirst &rArr; RB_Read_Fisrt &rArr; RB_Find_StringCS &rArr; RB_Set_Index &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read_Fisrt
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_Mode
</UL>

<P><STRONG><a name="[1d5]"></a>FW_UART_ReadHL</STRONG> (Thumb, 32 bytes, Stack size 48 bytes, fw_uart.o(i.FW_UART_ReadHL))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = FW_UART_ReadHL &rArr; RB_Read_HL &rArr; RB_Read &rArr; RB_Get_DataLength &rArr; FW_Unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read_HL
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF183D_UART_GetTemprature
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF183D_UART_GetPressure
</UL>

<P><STRONG><a name="[172]"></a>FW_UART_ReadInter</STRONG> (Thumb, 30 bytes, Stack size 40 bytes, fw_uart.o(i.FW_UART_ReadInter))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = FW_UART_ReadInter &rArr; RB_Read_Inter &rArr; RB_Find_StringCS &rArr; RB_Set_Index &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read_Inter
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Read_Inter
</UL>

<P><STRONG><a name="[200]"></a>FW_UART_SetPort</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fw_uart.o(i.FW_UART_SetPort))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_UART_Init
</UL>

<P><STRONG><a name="[177]"></a>FW_UART_StringIsExist</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, fw_uart.o(i.FW_UART_StringIsExist))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = FW_UART_StringIsExist &rArr; RB_String_IsExist &rArr; RB_Find_StringCS_RL1 &rArr; RB_Set_Index &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_String_IsExist
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_String_IsExist
</UL>

<P><STRONG><a name="[179]"></a>FW_UART_Write</STRONG> (Thumb, 26 bytes, Stack size 40 bytes, fw_uart.o(i.FW_UART_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FW_UART_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Write_Msg
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Write_Cmd
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF183D_UART_GetTemprature
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF183D_UART_GetPressure
</UL>

<P><STRONG><a name="[15f]"></a>FW_Unlock</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fw_system.o(i.FW_Unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FW_Unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_ServerInfo
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_LinkState
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_AP_Probe
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_AP_Link
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Write
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_String_IsExist
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read_Inter
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read_HL
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read_Fisrt
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_PMB_Write
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_PMB_Set
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Get_DataLength
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Clear_Buffer
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Data_IsCC
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_WriteINT
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_WriteDMA
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_IH_TX
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_IH_TC
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_IH_RX
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_IH_RC
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_IH_TX
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_IH_TC
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_IH_RX
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_IH_RC
</UL>

<P><STRONG><a name="[208]"></a>GPIO_ClrBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, swm181_gpio.o(i.GPIO_ClrBit))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin_Write
</UL>

<P><STRONG><a name="[206]"></a>GPIO_GetBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, swm181_gpio.o(i.GPIO_GetBit))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin_Read
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin_GetOutput
</UL>

<P><STRONG><a name="[1d9]"></a>GPIO_Init</STRONG> (Thumb, 332 bytes, Stack size 40 bytes, swm181_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GPIO_Init &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin_Init
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_IO_Init
</UL>

<P><STRONG><a name="[19b]"></a>GPIO_PinInit</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, fw_gpio.o(i.GPIO_PinInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF183D_OWI_Init
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
</UL>

<P><STRONG><a name="[1a8]"></a>GPIO_PinRead</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, fw_gpio.o(i.GPIO_PinRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_PinRead
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Read
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Read
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Read
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Read
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Read
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_IN
</UL>

<P><STRONG><a name="[1af]"></a>GPIO_PinWrite</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, fw_gpio.o(i.GPIO_PinWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF183D_OWI_Init
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
</UL>

<P><STRONG><a name="[1db]"></a>GPIO_PortInit</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, fw_gpio.o(i.GPIO_PortInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIO_PortInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test
</UL>

<P><STRONG><a name="[1dc]"></a>GPIO_PortWrite</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, fw_gpio.o(i.GPIO_PortWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_PortWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test
</UL>

<P><STRONG><a name="[207]"></a>GPIO_SetBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, swm181_gpio.o(i.GPIO_SetBit))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin_Write
</UL>

<P><STRONG><a name="[1e6]"></a>IRQ_Connect</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, swm181_irqmux.o(i.IRQ_Connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IRQ_Connect &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_UART_Init
</UL>

<P><STRONG><a name="[1de]"></a>MBlock_Read_SelfAlign</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, mblock.o(i.MBlock_Read_SelfAlign))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = MBlock_Read_SelfAlign &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_Read
</UL>

<P><STRONG><a name="[1e0]"></a>MBlock_Write_SelfAlign</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, mblock.o(i.MBlock_Write_SelfAlign))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = MBlock_Write_SelfAlign &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_Write
</UL>

<P><STRONG><a name="[21d]"></a>MM_Free</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mm.o(i.MM_Free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MM_Free
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGTR_Config
</UL>

<P><STRONG><a name="[21c]"></a>MM_Malloc</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mm.o(i.MM_Malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MM_Malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGTR_Config
</UL>

<P><STRONG><a name="[2]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ll_system.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_swm181.o(RESET)
</UL>
<P><STRONG><a name="[1da]"></a>PORT_Init</STRONG> (Thumb, 678 bytes, Stack size 16 bytes, swm181_port.o(i.PORT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_UART_IO_Init
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_IO_Init
</UL>

<P><STRONG><a name="[1d1]"></a>RB_Clear_Buffer</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rbuffer.o(i.RB_Clear_Buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RB_Clear_Buffer &rArr; FW_Unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Unlock
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_String_IsExist
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read_Inter
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read_Fisrt
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_ClearFIFO
</UL>

<P><STRONG><a name="[1d2]"></a>RB_Get_Buffer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rbuffer.o(i.RB_Get_Buffer))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_GetFIFOBBase
</UL>

<P><STRONG><a name="[20b]"></a>RB_Get_BufferSize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rbuffer.o(i.RB_Get_BufferSize))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Write
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_String_IsExist
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read_Inter
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read_Fisrt
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Get_DataLength
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Find_StringCS_RL1
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Find_StringCS
</UL>

<P><STRONG><a name="[1cb]"></a>RB_Get_DataLength</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, rbuffer.o(i.RB_Get_DataLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RB_Get_DataLength &rArr; FW_Unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Unlock
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Lock
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Get_BufferSize
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Write
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_String_IsExist
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read_Inter
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read_HL
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read_Fisrt
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_GetDataLength
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_WriteINT
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_WriteDMA
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_IH_TC
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_WriteINT
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_ReadINT
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_IH_TC
</UL>

<P><STRONG><a name="[1ce]"></a>RB_PMB_Set</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, rbuffer.o(i.RB_PMB_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RB_PMB_Set &rArr; FW_Unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Unlock
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_ReadINT
</UL>

<P><STRONG><a name="[1cf]"></a>RB_PMB_Write</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, rbuffer.o(i.RB_PMB_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RB_PMB_Write &rArr; FW_Unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Unlock
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_WriteINT
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_ReadINT
</UL>

<P><STRONG><a name="[1cc]"></a>RB_Read</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, rbuffer.o(i.RB_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RB_Read &rArr; RB_Get_DataLength &rArr; FW_Unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Unlock
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Lock
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Get_DataLength
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Get_BufferSize
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read_Inter
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read_HL
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read_Fisrt
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_WriteDMA
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_ReadINT
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_ReadDMA
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_IH_TX
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_IH_TC
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_IH_TX
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_IH_TC
</UL>

<P><STRONG><a name="[1d4]"></a>RB_Read_Fisrt</STRONG> (Thumb, 244 bytes, Stack size 64 bytes, rbuffer.o(i.RB_Read_Fisrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = RB_Read_Fisrt &rArr; RB_Find_StringCS &rArr; RB_Set_Index &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Unlock
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Lock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Get_DataLength
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Get_BufferSize
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Clear_Buffer
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strfind
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Offset_Head
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Find_StringCS
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Data_IsCC
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_ReadFirst
</UL>

<P><STRONG><a name="[1d6]"></a>RB_Read_HL</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, rbuffer.o(i.RB_Read_HL))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = RB_Read_HL &rArr; RB_Read &rArr; RB_Get_DataLength &rArr; FW_Unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Unlock
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Lock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Get_DataLength
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Offset_Index
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Offset_Head
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_ReadHL
</UL>

<P><STRONG><a name="[1d7]"></a>RB_Read_Inter</STRONG> (Thumb, 484 bytes, Stack size 64 bytes, rbuffer.o(i.RB_Read_Inter))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = RB_Read_Inter &rArr; RB_Find_StringCS &rArr; RB_Set_Index &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Unlock
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Lock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Get_DataLength
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Get_BufferSize
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Clear_Buffer
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strfind
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Offset_Head
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Find_StringCS
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Data_IsCC
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_ReadInter
</UL>

<P><STRONG><a name="[1d8]"></a>RB_String_IsExist</STRONG> (Thumb, 174 bytes, Stack size 48 bytes, rbuffer.o(i.RB_String_IsExist))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = RB_String_IsExist &rArr; RB_Find_StringCS_RL1 &rArr; RB_Set_Index &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Unlock
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Lock
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Get_DataLength
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Get_BufferSize
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Clear_Buffer
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strfind
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Find_StringCS_RL1
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Data_IsCC
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_StringIsExist
</UL>

<P><STRONG><a name="[1ca]"></a>RB_Write</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, rbuffer.o(i.RB_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RB_Write &rArr; RB_Get_DataLength &rArr; FW_Unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Unlock
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Lock
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Get_DataLength
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Get_BufferSize
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_WriteINT
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_WriteDMA
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_IH_RX
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_IH_RC
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_IH_RX
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_IH_RC
</UL>

<P><STRONG><a name="[1be]"></a>SGTR_Config</STRONG> (Thumb, 1298 bytes, Stack size 16 bytes, serial.o(i.SGTR_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SGTR_Config &rArr; MM_Malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MM_Malloc
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MM_Free
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_Init
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_I2C_Init
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_Init
</UL>

<P><STRONG><a name="[1bc]"></a>SGTR_DeInit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, serial.o(i.SGTR_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SGTR_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_Init
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_I2C_Init
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_Init
</UL>

<P><STRONG><a name="[1f4]"></a>SPI_Close</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, swm181_spi.o(i.SPI_Close))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_CTL
</UL>

<P><STRONG><a name="[1f9]"></a>SPI_Init</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, swm181_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Close
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_Init
</UL>

<P><STRONG><a name="[1fc]"></a>SPI_IsRXEmpty</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, swm181_spi.o(i.SPI_IsRXEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_Wait_RC
</UL>

<P><STRONG><a name="[1fd]"></a>SPI_IsTXFull</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, swm181_spi.o(i.SPI_IsTXFull))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_Wait_TC
</UL>

<P><STRONG><a name="[1f3]"></a>SPI_Open</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, swm181_spi.o(i.SPI_Open))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_Init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_CTL
</UL>

<P><STRONG><a name="[1fa]"></a>SPI_Read</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, swm181_spi.o(i.SPI_Read))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_RX_Byte
</UL>

<P><STRONG><a name="[1fb]"></a>SPI_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, swm181_spi.o(i.SPI_Write))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_TX_Byte
</UL>

<P><STRONG><a name="[6]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ll_delay.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_TickTock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm181.o(RESET)
</UL>
<P><STRONG><a name="[224]"></a>Test</STRONG> (Thumb, 502 bytes, Stack size 0 bytes, hc595.o(i.Test))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Test &rArr; GPIO_PortInit
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_Find
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Ms
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortWrite
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortInit
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[227]"></a>UART_Close</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, swm181_uart.o(i.UART_Close))
<BR><BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CTL
</UL>

<P><STRONG><a name="[22a]"></a>UART_INTRXThresholdDis</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, swm181_uart.o(i.UART_INTRXThresholdDis))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RX_CTL
</UL>

<P><STRONG><a name="[229]"></a>UART_INTRXThresholdEn</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, swm181_uart.o(i.UART_INTRXThresholdEn))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RX_CTL
</UL>

<P><STRONG><a name="[22d]"></a>UART_INTTXThresholdDis</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, swm181_uart.o(i.UART_INTTXThresholdDis))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TX_CTL
</UL>

<P><STRONG><a name="[22c]"></a>UART_INTTXThresholdEn</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, swm181_uart.o(i.UART_INTTXThresholdEn))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TX_CTL
</UL>

<P><STRONG><a name="[202]"></a>UART_Init</STRONG> (Thumb, 254 bytes, Stack size 16 bytes, swm181_uart.o(i.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UART_Init &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Close
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_UART_Init
</UL>

<P><STRONG><a name="[22e]"></a>UART_IsRXFIFOEmpty</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, swm181_uart.o(i.UART_IsRXFIFOEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Wait_RC
</UL>

<P><STRONG><a name="[22f]"></a>UART_IsTXBusy</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, swm181_uart.o(i.UART_IsTXBusy))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Wait_TC
</UL>

<P><STRONG><a name="[226]"></a>UART_Open</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, swm181_uart.o(i.UART_Open))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CTL
</UL>

<P><STRONG><a name="[228]"></a>UART_ReadByte</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, swm181_uart.o(i.UART_ReadByte))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RX_Byte
</UL>

<P><STRONG><a name="[22b]"></a>UART_WriteByte</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, swm181_uart.o(i.UART_WriteByte))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TX_Byte
</UL>

<P><STRONG><a name="[1e8]"></a>WDT_Feed</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, swm181_wdt.o(i.WDT_Feed))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_FeedDog
</UL>

<P><STRONG><a name="[231]"></a>WDT_INTClr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, swm181_wdt.o(i.WDT_INTClr))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Init
</UL>

<P><STRONG><a name="[1e9]"></a>WDT_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, swm181_wdt.o(i.WDT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WDT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Stop
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_INTClr
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
</UL>

<P><STRONG><a name="[1ea]"></a>WDT_Start</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, swm181_wdt.o(i.WDT_Start))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
</UL>

<P><STRONG><a name="[230]"></a>WDT_Stop</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, swm181_wdt.o(i.WDT_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Init
</UL>

<P><STRONG><a name="[d6]"></a>WF200D_Press_Formula</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wf200d.o(i.WF200D_Press_Formula))
<BR>[Address Reference Count : 1]<UL><LI> wf200d.o(.constdata)
</UL>
<P><STRONG><a name="[18f]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ll_gpio.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin_Init
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Encoder_GetCounter
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Set_BitFraming
</UL>

<P><STRONG><a name="[142]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[24c]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[137]"></a>free</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, mallocr.o(i.__free$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mm.o(.data)
</UL>
<P><STRONG><a name="[136]"></a>malloc</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, mallocr.o(i.__malloc$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mm.o(.data)
</UL>
<P><STRONG><a name="[24d]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[24e]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[24f]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[14c]"></a>$Super$$main</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = $Super$$main &rArr; Test &rArr; GPIO_PortInit
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[8f]"></a>System_Clear_RSTSource</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ll_system.o(i.System_Clear_RSTSource))
<BR>[Address Reference Count : 1]<UL><LI> ll_system.o(.constdata)
</UL>
<P><STRONG><a name="[87]"></a>System_Disable_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ll_system.o(i.System_Disable_IRQ))
<BR>[Address Reference Count : 1]<UL><LI> ll_system.o(.constdata)
</UL>
<P><STRONG><a name="[88]"></a>System_Enable_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ll_system.o(i.System_Enable_IRQ))
<BR>[Address Reference Count : 1]<UL><LI> ll_system.o(.constdata)
</UL>
<P><STRONG><a name="[89]"></a>System_Get_IRQState</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ll_system.o(i.System_Get_IRQState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = System_Get_IRQState
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_ll_system_c_bb8ca80c__A_System_Get_IRQState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_system.o(.constdata)
</UL>
<P><STRONG><a name="[8e]"></a>System_Get_RSTSource</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ll_system.o(i.System_Get_RSTSource))
<BR>[Address Reference Count : 1]<UL><LI> ll_system.o(.constdata)
</UL>
<P><STRONG><a name="[8b]"></a>System_Get_Sysclk</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ll_system.o(i.System_Get_Sysclk))
<BR>[Address Reference Count : 1]<UL><LI> ll_system.o(.constdata)
</UL>
<P><STRONG><a name="[86]"></a>System_Init</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, ll_system.o(i.System_Init))
<BR>[Address Reference Count : 1]<UL><LI> ll_system.o(.constdata)
</UL>
<P><STRONG><a name="[8a]"></a>System_Set_Sysclk</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ll_system.o(i.System_Set_Sysclk))
<BR>[Address Reference Count : 1]<UL><LI> ll_system.o(.constdata)
</UL>
<P><STRONG><a name="[8c]"></a>System_Set_VectorTable</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ll_system.o(i.System_Set_VectorTable))
<BR>[Address Reference Count : 1]<UL><LI> ll_system.o(.constdata)
</UL>
<P><STRONG><a name="[8d]"></a>System_Soft_Reset</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ll_system.o(i.System_Soft_Reset))
<BR>[Address Reference Count : 1]<UL><LI> ll_system.o(.constdata)
</UL>
<P><STRONG><a name="[91]"></a>Delay_Get_Clock</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ll_delay.o(i.Delay_Get_Clock))
<BR>[Address Reference Count : 1]<UL><LI> ll_delay.o(.constdata)
</UL>
<P><STRONG><a name="[93]"></a>Delay_Get_Counter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ll_delay.o(i.Delay_Get_Counter))
<BR>[Address Reference Count : 1]<UL><LI> ll_delay.o(.constdata)
</UL>
<P><STRONG><a name="[92]"></a>Delay_Get_Reload</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ll_delay.o(i.Delay_Get_Reload))
<BR>[Address Reference Count : 1]<UL><LI> ll_delay.o(.constdata)
</UL>
<P><STRONG><a name="[94]"></a>Delay_Get_TickTime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ll_delay.o(i.Delay_Get_TickTime))
<BR>[Address Reference Count : 1]<UL><LI> ll_delay.o(.constdata)
</UL>
<P><STRONG><a name="[90]"></a>Delay_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, ll_delay.o(i.Delay_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Delay_Init &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_delay.o(.constdata)
</UL>
<P><STRONG><a name="[15c]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, ll_delay.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Init
</UL>

<P><STRONG><a name="[97]"></a>Pin_GetOutput</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ll_gpio.o(i.Pin_GetOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Pin_GetOutput
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[95]"></a>Pin_Init</STRONG> (Thumb, 280 bytes, Stack size 56 bytes, ll_gpio.o(i.Pin_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Pin_Init &rArr; GPIO_Init &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[98]"></a>Pin_Read</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ll_gpio.o(i.Pin_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Pin_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[96]"></a>Pin_Write</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ll_gpio.o(i.Pin_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Pin_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBit
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClrBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[9a]"></a>Port_GetOutput</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ll_gpio.o(i.Port_GetOutput))
<BR>[Address Reference Count : 1]<UL><LI> ll_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[9b]"></a>Port_Read</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ll_gpio.o(i.Port_Read))
<BR>[Address Reference Count : 1]<UL><LI> ll_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[99]"></a>Port_Write</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ll_gpio.o(i.Port_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Port_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[225]"></a>FW_Device_SetDriver</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ll_uart.o(i.FW_Device_SetDriver))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Config
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Config
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_Config
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_Config
</UL>

<P><STRONG><a name="[1fe]"></a>LL_UART_IO_Init</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, ll_uart.o(i.LL_UART_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LL_UART_IO_Init &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_UART_Init
</UL>

<P><STRONG><a name="[9c]"></a>LL_UART_Init</STRONG> (Thumb, 436 bytes, Stack size 48 bytes, ll_uart.o(i.LL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LL_UART_Init &rArr; LL_UART_IO_Init &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Connect
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_SetPort
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_GetTRM
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_UART_IO_Init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_uart.o(.constdata)
</UL>
<P><STRONG><a name="[1ff]"></a>Loop</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ll_uart.o(i.Loop))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_UART_Init
</UL>

<P><STRONG><a name="[12a]"></a>UART3_Config</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ll_uart.o(i.UART3_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_SetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_uart.o(Device_Table)
</UL>
<P><STRONG><a name="[9d]"></a>UART_CTL</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ll_uart.o(i.UART_CTL))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_CTL
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_uart.o(.constdata)
</UL>
<P><STRONG><a name="[a5]"></a>UART_Get_RDL</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ll_uart.o(i.UART_Get_RDL))
<BR>[Address Reference Count : 1]<UL><LI> ll_uart.o(.constdata)
</UL>
<P><STRONG><a name="[a1]"></a>UART_RX_Byte</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ll_uart.o(i.UART_RX_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_RX_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReadByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_uart.o(.constdata)
</UL>
<P><STRONG><a name="[9f]"></a>UART_RX_CTL</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, ll_uart.o(i.UART_RX_CTL))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_RX_CTL
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_INTRXThresholdEn
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_INTRXThresholdDis
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_GetTRM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_uart.o(.constdata)
</UL>
<P><STRONG><a name="[a4]"></a>UART_Set_TDL</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ll_uart.o(i.UART_Set_TDL))
<BR>[Address Reference Count : 1]<UL><LI> ll_uart.o(.constdata)
</UL>
<P><STRONG><a name="[a0]"></a>UART_TX_Byte</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ll_uart.o(i.UART_TX_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_TX_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WriteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_uart.o(.constdata)
</UL>
<P><STRONG><a name="[9e]"></a>UART_TX_CTL</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, ll_uart.o(i.UART_TX_CTL))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_TX_CTL
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_INTTXThresholdEn
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_INTTXThresholdDis
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_GetTRM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_uart.o(.constdata)
</UL>
<P><STRONG><a name="[a3]"></a>UART_Wait_RC</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ll_uart.o(i.UART_Wait_RC))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_Wait_RC
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IsRXFIFOEmpty
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_GetTRM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_uart.o(.constdata)
</UL>
<P><STRONG><a name="[a2]"></a>UART_Wait_TC</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ll_uart.o(i.UART_Wait_TC))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_Wait_TC
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IsTXBusy
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_GetTRM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_uart.o(.constdata)
</UL>
<P><STRONG><a name="[127]"></a>USART0_Config</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ll_uart.o(i.USART0_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART0_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_SetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_uart.o(Device_Table)
</UL>
<P><STRONG><a name="[128]"></a>USART1_Config</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ll_uart.o(i.USART1_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART1_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_SetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_uart.o(Device_Table)
</UL>
<P><STRONG><a name="[129]"></a>USART2_Config</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ll_uart.o(i.USART2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_SetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_uart.o(Device_Table)
</UL>
<P><STRONG><a name="[ac]"></a>IFlash_Erase_Sector</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ll_flash.o(i.IFlash_Erase_Sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IFlash_Erase_Sector &rArr; FLASH_Erase
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_flash.o(.constdata)
</UL>
<P><STRONG><a name="[aa]"></a>IFlash_Get_CID</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, ll_flash.o(i.IFlash_Get_CID))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IFlash_Get_CID
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_flash.o(.constdata)
</UL>
<P><STRONG><a name="[a9]"></a>IFlash_Get_Main</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, ll_flash.o(i.IFlash_Get_Main))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IFlash_Get_Main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_flash.o(.constdata)
</UL>
<P><STRONG><a name="[ab]"></a>IFlash_Get_PE</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ll_flash.o(i.IFlash_Get_PE))
<BR>[Address Reference Count : 1]<UL><LI> ll_flash.o(.constdata)
</UL>
<P><STRONG><a name="[a7]"></a>IFlash_Get_SectorBase</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ll_flash.o(i.IFlash_Get_SectorBase))
<BR>[Address Reference Count : 1]<UL><LI> ll_flash.o(.constdata)
</UL>
<P><STRONG><a name="[a6]"></a>IFlash_Get_SectorNum</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ll_flash.o(i.IFlash_Get_SectorNum))
<BR>[Address Reference Count : 1]<UL><LI> ll_flash.o(.constdata)
</UL>
<P><STRONG><a name="[a8]"></a>IFlash_Get_SectorSize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ll_flash.o(i.IFlash_Get_SectorSize))
<BR>[Address Reference Count : 1]<UL><LI> ll_flash.o(.constdata)
</UL>
<P><STRONG><a name="[ae]"></a>IFlash_Read</STRONG> (Thumb, 56 bytes, Stack size 304 bytes, ll_flash.o(i.IFlash_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = IFlash_Read &rArr; MBlock_Read_SelfAlign &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBlock_Read_SelfAlign
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_flash.o(.constdata)
</UL>
<P><STRONG><a name="[5f]"></a>IFlash_Read_Gran</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ll_flash.o(i.IFlash_Read_Gran))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = IFlash_Read_Gran &rArr; FLASH_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Read
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ll_flash.o(i.IFlash_Write)
<LI> ll_flash.o(i.IFlash_Read)
</UL>
<P><STRONG><a name="[ad]"></a>IFlash_Write</STRONG> (Thumb, 56 bytes, Stack size 304 bytes, ll_flash.o(i.IFlash_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = IFlash_Write &rArr; MBlock_Write_SelfAlign &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBlock_Write_SelfAlign
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_flash.o(.constdata)
</UL>
<P><STRONG><a name="[5e]"></a>IFlash_Write_Gran</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ll_flash.o(i.IFlash_Write_Gran))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IFlash_Write_Gran &rArr; FLASH_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Write
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ll_flash.o(i.IFlash_Write)
<LI> ll_flash.o(i.IFlash_Read)
</UL>
<P><STRONG><a name="[b0]"></a>IWDG_FeedDog</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ll_wdg.o(i.IWDG_FeedDog))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IWDG_FeedDog
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Feed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_wdg.o(.constdata)
</UL>
<P><STRONG><a name="[b1]"></a>IWDG_Get_MaxTime</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ll_wdg.o(i.IWDG_Get_MaxTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = IWDG_Get_MaxTime &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_wdg.o(.constdata)
</UL>
<P><STRONG><a name="[b2]"></a>IWDG_Get_MinTime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ll_wdg.o(i.IWDG_Get_MinTime))
<BR>[Address Reference Count : 1]<UL><LI> ll_wdg.o(.constdata)
</UL>
<P><STRONG><a name="[af]"></a>IWDG_Init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ll_wdg.o(i.IWDG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = IWDG_Init &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Start
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_wdg.o(.constdata)
</UL>
<P><STRONG><a name="[b4]"></a>WWDG_FeedDog</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ll_wdg.o(i.WWDG_FeedDog))
<BR>[Address Reference Count : 1]<UL><LI> ll_wdg.o(.constdata)
</UL>
<P><STRONG><a name="[b3]"></a>WWDG_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ll_wdg.o(i.WWDG_Init))
<BR>[Address Reference Count : 1]<UL><LI> ll_wdg.o(.constdata)
</UL>
<P><STRONG><a name="[21e]"></a>FW_Device_SetDriver</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ll_spi.o(i.FW_Device_SetDriver))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Config
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Config
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_Config
</UL>

<P><STRONG><a name="[b6]"></a>LL_SPI_CTL</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ll_spi.o(i.LL_SPI_CTL))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_SPI_CTL
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Open
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Close
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_TX_CTL
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_RX_CTL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_spi.o(.constdata)
</UL>
<P><STRONG><a name="[1f7]"></a>LL_SPI_GetDIV</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, ll_spi.o(i.LL_SPI_GetDIV))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_Init
</UL>

<P><STRONG><a name="[1f5]"></a>LL_SPI_IO_Init</STRONG> (Thumb, 362 bytes, Stack size 56 bytes, ll_spi.o(i.LL_SPI_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LL_SPI_IO_Init &rArr; GPIO_Init &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_Init
</UL>

<P><STRONG><a name="[b5]"></a>LL_SPI_Init</STRONG> (Thumb, 196 bytes, Stack size 48 bytes, ll_spi.o(i.LL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LL_SPI_Init &rArr; LL_SPI_IO_Init &rArr; GPIO_Init &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Open
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_SetPort
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_GetTRM
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_IO_Init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_GetDIV
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_spi.o(.constdata)
</UL>
<P><STRONG><a name="[ba]"></a>LL_SPI_RX_Byte</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ll_spi.o(i.LL_SPI_RX_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_SPI_RX_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_spi.o(.constdata)
</UL>
<P><STRONG><a name="[b8]"></a>LL_SPI_RX_CTL</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, ll_spi.o(i.LL_SPI_RX_CTL))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LL_SPI_RX_CTL &rArr; LL_SPI_CTL
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_GetTRM
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_CTL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_spi.o(.constdata)
</UL>
<P><STRONG><a name="[b9]"></a>LL_SPI_TX_Byte</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ll_spi.o(i.LL_SPI_TX_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_SPI_TX_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_spi.o(.constdata)
</UL>
<P><STRONG><a name="[b7]"></a>LL_SPI_TX_CTL</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, ll_spi.o(i.LL_SPI_TX_CTL))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LL_SPI_TX_CTL &rArr; LL_SPI_CTL
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_GetTRM
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_CTL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_spi.o(.constdata)
</UL>
<P><STRONG><a name="[bc]"></a>LL_SPI_Wait_RC</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ll_spi.o(i.LL_SPI_Wait_RC))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_SPI_Wait_RC
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_IsRXEmpty
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_spi.o(.constdata)
</UL>
<P><STRONG><a name="[bb]"></a>LL_SPI_Wait_TC</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ll_spi.o(i.LL_SPI_Wait_TC))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_SPI_Wait_TC
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_IsTXFull
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_spi.o(.constdata)
</UL>
<P><STRONG><a name="[12b]"></a>SPI0_Config</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ll_spi.o(i.SPI0_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI0_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_SetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_spi.o(Device_Table)
</UL>
<P><STRONG><a name="[12c]"></a>SPI1_Config</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ll_spi.o(i.SPI1_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI1_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_SetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_spi.o(Device_Table)
</UL>
<P><STRONG><a name="[12d]"></a>SPI2_Config</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ll_spi.o(i.SPI2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_SetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_spi.o(Device_Table)
</UL>
<P><STRONG><a name="[209]"></a>RB_Data_IsCC</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, rbuffer.o(i.RB_Data_IsCC))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RB_Data_IsCC &rArr; FW_Unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Unlock
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_String_IsExist
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read_Inter
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read_Fisrt
</UL>

<P><STRONG><a name="[20a]"></a>RB_Find_StringCS</STRONG> (Thumb, 290 bytes, Stack size 56 bytes, rbuffer.o(i.RB_Find_StringCS))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = RB_Find_StringCS &rArr; RB_Set_Index &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Get_BufferSize
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strfind
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Set_Index
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Offset_Index
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read_Inter
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read_Fisrt
</UL>

<P><STRONG><a name="[20f]"></a>RB_Find_StringCS_RL1</STRONG> (Thumb, 310 bytes, Stack size 64 bytes, rbuffer.o(i.RB_Find_StringCS_RL1))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = RB_Find_StringCS_RL1 &rArr; RB_Set_Index &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Get_BufferSize
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strfind
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strcmp
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Set_Index
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Offset_Index
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_String_IsExist
</UL>

<P><STRONG><a name="[211]"></a>RB_Offset_Head</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, rbuffer.o(i.RB_Offset_Head))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = RB_Offset_Head &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read_Inter
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read_HL
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read_Fisrt
</UL>

<P><STRONG><a name="[20d]"></a>RB_Offset_Index</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, rbuffer.o(i.RB_Offset_Index))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = RB_Offset_Index &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read_HL
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Find_StringCS_RL1
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Find_StringCS
</UL>

<P><STRONG><a name="[20e]"></a>RB_Set_Index</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, rbuffer.o(i.RB_Set_Index))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = RB_Set_Index &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Find_StringCS_RL1
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Find_StringCS
</UL>

<P><STRONG><a name="[210]"></a>Strcmp</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, rbuffer.o(i.Strcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Find_StringCS_RL1
</UL>

<P><STRONG><a name="[20c]"></a>Strfind</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, rbuffer.o(i.Strfind))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Strfind
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_String_IsExist
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read_Inter
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read_Fisrt
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Find_StringCS_RL1
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Find_StringCS
</UL>

<P><STRONG><a name="[19a]"></a>FW_GPIO_Init</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, io_encoder.o(i.FW_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Encoder_Init
</UL>

<P><STRONG><a name="[1a7]"></a>FW_GPIO_Read</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, io_encoder.o(i.FW_GPIO_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FW_GPIO_Read &rArr; GPIO_PinRead
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRead
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Encoder_GetCounter
</UL>

<P><STRONG><a name="[be]"></a>IO_Encoder_GetCounter</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, io_encoder.o(i.IO_Encoder_GetCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IO_Encoder_GetCounter &rArr; FW_GPIO_Read &rArr; GPIO_PinRead
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> io_encoder.o(.constdata)
</UL>
<P><STRONG><a name="[bd]"></a>IO_Encoder_Init</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, io_encoder.o(i.IO_Encoder_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = IO_Encoder_Init &rArr; FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> io_encoder.o(.constdata)
</UL>
<P><STRONG><a name="[60]"></a>Bus_Init</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ili9341.o(i.Bus_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Bus_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili9341.o(i.ILI_Init)
</UL>
<P><STRONG><a name="[63]"></a>Bus_Read_Data</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ili9341.o(i.Bus_Read_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Bus_Read_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili9341.o(i.ILI_Init)
</UL>
<P><STRONG><a name="[61]"></a>Bus_Write_Cmd</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ili9341.o(i.Bus_Write_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Bus_Write_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili9341.o(i.ILI_Init)
</UL>
<P><STRONG><a name="[62]"></a>Bus_Write_Data</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ili9341.o(i.Bus_Write_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Bus_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili9341.o(i.ILI_Init)
</UL>
<P><STRONG><a name="[152]"></a>FW_Device_GetDriver</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ili9341.o(i.FW_Device_GetDriver))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI_Init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_Write_Data
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_Write_Cmd
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_Read_Data
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_Init
</UL>

<P><STRONG><a name="[1e1]"></a>FW_Device_GetParent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ili9341.o(i.FW_Device_GetParent))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI_Set_Cursor
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI_Get_Point
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI_Get_CID
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI_Fill_Area
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI_Draw_Point
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI_BL_Set
</UL>

<P><STRONG><a name="[19c]"></a>FW_GPIO_Init</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ili9341.o(i.FW_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI_Init
</UL>

<P><STRONG><a name="[1ae]"></a>FW_GPIO_Write</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ili9341.o(i.FW_GPIO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI_BL_Set
</UL>

<P><STRONG><a name="[c2]"></a>ILI_BL_Get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ili9341.o(i.ILI_BL_Get))
<BR>[Address Reference Count : 1]<UL><LI> ili9341.o(.constdata)
</UL>
<P><STRONG><a name="[c1]"></a>ILI_BL_Set</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ili9341.o(i.ILI_BL_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ILI_BL_Set &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili9341.o(.constdata)
</UL>
<P><STRONG><a name="[c4]"></a>ILI_Draw_Point</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, ili9341.o(i.ILI_Draw_Point))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ILI_Draw_Point &rArr; ILI_Set_Cursor &rArr; LCD8_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD8_Write_Data
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD8_Write_Cmd
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI_Set_Cursor
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili9341.o(.constdata)
</UL>
<P><STRONG><a name="[c3]"></a>ILI_Fill_Area</STRONG> (Thumb, 194 bytes, Stack size 56 bytes, ili9341.o(i.ILI_Fill_Area))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ILI_Fill_Area &rArr; LCD8_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD8_Write_Data
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD8_Write_Cmd
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili9341.o(.constdata)
</UL>
<P><STRONG><a name="[c0]"></a>ILI_Get_CID</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ili9341.o(i.ILI_Get_CID))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ILI_Get_CID &rArr; LCD8_Write_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD8_Write_Cmd
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD8_Read_Data
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili9341.o(.constdata)
</UL>
<P><STRONG><a name="[c5]"></a>ILI_Get_Point</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, ili9341.o(i.ILI_Get_Point))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ILI_Get_Point &rArr; ILI_Set_Cursor &rArr; LCD8_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD8_Write_Cmd
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD8_Read_Data
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI_Set_Cursor
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili9341.o(.constdata)
</UL>
<P><STRONG><a name="[bf]"></a>ILI_Init</STRONG> (Thumb, 998 bytes, Stack size 24 bytes, ili9341.o(i.ILI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ILI_Init &rArr; FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Driver_Find
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Us
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD8_Write_Data
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD8_Write_Cmd
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili9341.o(.constdata)
</UL>
<P><STRONG><a name="[1e2]"></a>ILI_Set_Cursor</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, ili9341.o(i.ILI_Set_Cursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ILI_Set_Cursor &rArr; LCD8_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD8_Write_Data
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD8_Write_Cmd
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI_Get_Point
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI_Draw_Point
</UL>

<P><STRONG><a name="[64]"></a>IO_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ili9341.o(i.IO_Init))
<BR>[Address Reference Count : 1]<UL><LI> ili9341.o(i.ILI_Init)
</UL>
<P><STRONG><a name="[67]"></a>IO_Read_Data</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ili9341.o(i.IO_Read_Data))
<BR>[Address Reference Count : 1]<UL><LI> ili9341.o(i.ILI_Init)
</UL>
<P><STRONG><a name="[65]"></a>IO_Write_Cmd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ili9341.o(i.IO_Write_Cmd))
<BR>[Address Reference Count : 1]<UL><LI> ili9341.o(i.ILI_Init)
</UL>
<P><STRONG><a name="[66]"></a>IO_Write_Data</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ili9341.o(i.IO_Write_Data))
<BR>[Address Reference Count : 1]<UL><LI> ili9341.o(i.ILI_Init)
</UL>
<P><STRONG><a name="[1e5]"></a>LCD8_Read_Data</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ili9341.o(i.LCD8_Read_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD8_Read_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI_Get_Point
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI_Get_CID
</UL>

<P><STRONG><a name="[1e3]"></a>LCD8_Write_Cmd</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, ili9341.o(i.LCD8_Write_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD8_Write_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI_Set_Cursor
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI_Get_Point
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI_Get_CID
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI_Fill_Area
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI_Draw_Point
</UL>

<P><STRONG><a name="[1e4]"></a>LCD8_Write_Data</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, ili9341.o(i.LCD8_Write_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD8_Write_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI_Set_Cursor
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI_Init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI_Fill_Area
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI_Draw_Point
</UL>

<P><STRONG><a name="[218]"></a>FW_Device_GetParent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd25q64.o(i.FW_Device_GetParent))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNOR_Write
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNOR_Read
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNOR_Init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNOR_Get_CID
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNOR_Erase_Sector
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNOR_Erase_Chip
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Write_Byte
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Write
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Read_Byte
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Read
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Get_CID
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_EN
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_DI
</UL>

<P><STRONG><a name="[19d]"></a>FW_GPIO_Init</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, gd25q64.o(i.FW_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Init
</UL>

<P><STRONG><a name="[1b0]"></a>FW_GPIO_Write</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, gd25q64.o(i.FW_GPIO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Init
</UL>

<P><STRONG><a name="[213]"></a>SGP_Busy_Wait</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, gd25q64.o(i.SGP_Busy_Wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SGP_Busy_Wait &rArr; SGP_Write_Byte &rArr; FW_SPI_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Write_Byte
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Read_Byte
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_EN
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_DI
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Write
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Read
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Erase_Sector
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Erase_Chip
</UL>

<P><STRONG><a name="[217]"></a>SGP_DI</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, gd25q64.o(i.SGP_DI))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SGP_DI &rArr; FW_SPI_CSSet
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_CSSet
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Write
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_WREN
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Read
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Get_CID
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Erase_Sector
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Erase_Chip
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Busy_Wait
</UL>

<P><STRONG><a name="[214]"></a>SGP_EN</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, gd25q64.o(i.SGP_EN))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SGP_EN &rArr; FW_SPI_CSSet
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_CSSet
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Write
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_WREN
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Read
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Get_CID
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Erase_Sector
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Erase_Chip
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Busy_Wait
</UL>

<P><STRONG><a name="[6d]"></a>SGP_Erase_Chip</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, gd25q64.o(i.SGP_Erase_Chip))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SGP_Erase_Chip &rArr; SGP_Busy_Wait &rArr; SGP_Write_Byte &rArr; FW_SPI_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Write_Byte
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_WREN
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_EN
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_DI
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Busy_Wait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gd25q64.o(i.SNOR_Init)
</UL>
<P><STRONG><a name="[6e]"></a>SGP_Erase_Sector</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, gd25q64.o(i.SGP_Erase_Sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SGP_Erase_Sector &rArr; SGP_Busy_Wait &rArr; SGP_Write_Byte &rArr; FW_SPI_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Write_Byte
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_WREN
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_EN
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_DI
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Busy_Wait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gd25q64.o(i.SNOR_Init)
</UL>
<P><STRONG><a name="[6c]"></a>SGP_Get_CID</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, gd25q64.o(i.SGP_Get_CID))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SGP_Get_CID &rArr; SGP_Write_Byte &rArr; FW_SPI_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_Read
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Write_Byte
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_EN
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_DI
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gd25q64.o(i.SNOR_Init)
</UL>
<P><STRONG><a name="[6b]"></a>SGP_Init</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, gd25q64.o(i.SGP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SGP_Init &rArr; FW_SPI_Init &rArr; FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_Init
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Write_Byte
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Read_Byte
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_EN
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_DI
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gd25q64.o(i.SNOR_Init)
</UL>
<P><STRONG><a name="[70]"></a>SGP_Read</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, gd25q64.o(i.SGP_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SGP_Read &rArr; SGP_Busy_Wait &rArr; SGP_Write_Byte &rArr; FW_SPI_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_Read
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Write_Byte
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_EN
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_DI
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Busy_Wait
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gd25q64.o(i.SNOR_Init)
</UL>
<P><STRONG><a name="[216]"></a>SGP_Read_Byte</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, gd25q64.o(i.SGP_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SGP_Read_Byte &rArr; FW_SPI_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_Read
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Init
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Busy_Wait
</UL>

<P><STRONG><a name="[21a]"></a>SGP_WREN</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gd25q64.o(i.SGP_WREN))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SGP_WREN &rArr; SGP_Write_Byte &rArr; FW_SPI_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Write_Byte
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_EN
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_DI
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Write
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Erase_Sector
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Erase_Chip
</UL>

<P><STRONG><a name="[6f]"></a>SGP_Write</STRONG> (Thumb, 274 bytes, Stack size 40 bytes, gd25q64.o(i.SGP_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SGP_Write &rArr; SGP_Busy_Wait &rArr; SGP_Write_Byte &rArr; FW_SPI_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_Write
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Write_Byte
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_WREN
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_EN
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_DI
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Busy_Wait
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gd25q64.o(i.SNOR_Init)
</UL>
<P><STRONG><a name="[215]"></a>SGP_Write_Byte</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, gd25q64.o(i.SGP_Write_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SGP_Write_Byte &rArr; FW_SPI_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_Write
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Write
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_WREN
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Read
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Get_CID
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Erase_Sector
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Erase_Chip
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Busy_Wait
</UL>

<P><STRONG><a name="[cd]"></a>SNOR_Erase_Chip</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, gd25q64.o(i.SNOR_Erase_Chip))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SNOR_Erase_Chip
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gd25q64.o(.constdata)
</UL>
<P><STRONG><a name="[ce]"></a>SNOR_Erase_Sector</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gd25q64.o(i.SNOR_Erase_Sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SNOR_Erase_Sector
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gd25q64.o(.constdata)
</UL>
<P><STRONG><a name="[cb]"></a>SNOR_Get_CID</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gd25q64.o(i.SNOR_Get_CID))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SNOR_Get_CID
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gd25q64.o(.constdata)
</UL>
<P><STRONG><a name="[ca]"></a>SNOR_Get_Main</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, gd25q64.o(i.SNOR_Get_Main))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SNOR_Get_Main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gd25q64.o(.constdata)
</UL>
<P><STRONG><a name="[cc]"></a>SNOR_Get_PEState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd25q64.o(i.SNOR_Get_PEState))
<BR>[Address Reference Count : 1]<UL><LI> gd25q64.o(.constdata)
</UL>
<P><STRONG><a name="[c8]"></a>SNOR_Get_SectorBase</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd25q64.o(i.SNOR_Get_SectorBase))
<BR>[Address Reference Count : 1]<UL><LI> gd25q64.o(.constdata)
</UL>
<P><STRONG><a name="[c7]"></a>SNOR_Get_SectorNum</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd25q64.o(i.SNOR_Get_SectorNum))
<BR>[Address Reference Count : 1]<UL><LI> gd25q64.o(.constdata)
</UL>
<P><STRONG><a name="[c9]"></a>SNOR_Get_SectorSize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd25q64.o(i.SNOR_Get_SectorSize))
<BR>[Address Reference Count : 1]<UL><LI> gd25q64.o(.constdata)
</UL>
<P><STRONG><a name="[c6]"></a>SNOR_Init</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, gd25q64.o(i.SNOR_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SNOR_Init &rArr; FW_Driver_Find &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Driver_Find
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gd25q64.o(.constdata)
</UL>
<P><STRONG><a name="[d0]"></a>SNOR_Read</STRONG> (Thumb, 32 bytes, Stack size 40 bytes, gd25q64.o(i.SNOR_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SNOR_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gd25q64.o(.constdata)
</UL>
<P><STRONG><a name="[cf]"></a>SNOR_Write</STRONG> (Thumb, 150 bytes, Stack size 304 bytes, gd25q64.o(i.SNOR_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = SNOR_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gd25q64.o(.constdata)
</UL>
<P><STRONG><a name="[235]"></a>FW_Device_GetParent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wf200d.o(i.FW_Device_GetParent))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF200D_SPI_WriteByte
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF200D_SPI_ReadByte
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF200D_SPI_Init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF200D_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF200D_I2C_WriteByte
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF200D_I2C_ReadByte
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF200D_I2C_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF200D_Get_Temprature
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF200D_Get_Pressure
</UL>

<P><STRONG><a name="[d5]"></a>WF200D_Get_Pressure</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, wf200d.o(i.WF200D_Get_Pressure))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = WF200D_Get_Pressure &rArr; WF200D_Write_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Ms
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF200D_Write_Byte
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF200D_Read_Byte
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wf200d.o(.constdata)
</UL>
<P><STRONG><a name="[d4]"></a>WF200D_Get_Temprature</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, wf200d.o(i.WF200D_Get_Temprature))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = WF200D_Get_Temprature &rArr; WF200D_Write_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Ms
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF200D_Write_Byte
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF200D_Read_Byte
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wf200d.o(.constdata)
</UL>
<P><STRONG><a name="[80]"></a>WF200D_I2C_Init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, wf200d.o(i.WF200D_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = WF200D_I2C_Init &rArr; FW_I2C_Init &rArr; SGTR_Config &rArr; MM_Malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_I2C_SetDelay
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_I2C_Init
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wf200d.o(i.WF200D_Init)
</UL>
<P><STRONG><a name="[82]"></a>WF200D_I2C_ReadByte</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, wf200d.o(i.WF200D_I2C_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = WF200D_I2C_ReadByte &rArr; FW_I2C_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_I2C_Read
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wf200d.o(i.WF200D_Init)
</UL>
<P><STRONG><a name="[81]"></a>WF200D_I2C_WriteByte</STRONG> (Thumb, 28 bytes, Stack size 32 bytes, wf200d.o(i.WF200D_I2C_WriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = WF200D_I2C_WriteByte &rArr; FW_I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_I2C_Write
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wf200d.o(i.WF200D_Init)
</UL>
<P><STRONG><a name="[d1]"></a>WF200D_Init</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, wf200d.o(i.WF200D_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = WF200D_Init &rArr; FW_Driver_Find &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Driver_Find
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wf200d.o(.constdata)
</UL>
<P><STRONG><a name="[237]"></a>WF200D_Read_Byte</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, wf200d.o(i.WF200D_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WF200D_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF200D_Get_Temprature
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF200D_Get_Pressure
</UL>

<P><STRONG><a name="[d2]"></a>WF200D_Reset</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wf200d.o(i.WF200D_Reset))
<BR>[Address Reference Count : 1]<UL><LI> wf200d.o(.constdata)
</UL>
<P><STRONG><a name="[83]"></a>WF200D_SPI_Init</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, wf200d.o(i.WF200D_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = WF200D_SPI_Init &rArr; FW_SPI_Init &rArr; FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wf200d.o(i.WF200D_Init)
</UL>
<P><STRONG><a name="[85]"></a>WF200D_SPI_ReadByte</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, wf200d.o(i.WF200D_SPI_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = WF200D_SPI_ReadByte &rArr; FW_SPI_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_Write
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_Read
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_CSSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wf200d.o(i.WF200D_Init)
</UL>
<P><STRONG><a name="[84]"></a>WF200D_SPI_WriteByte</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, wf200d.o(i.WF200D_SPI_WriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = WF200D_SPI_WriteByte &rArr; FW_SPI_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_Write
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_CSSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wf200d.o(i.WF200D_Init)
</UL>
<P><STRONG><a name="[d3]"></a>WF200D_Set_Period</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wf200d.o(i.WF200D_Set_Period))
<BR>[Address Reference Count : 1]<UL><LI> wf200d.o(.constdata)
</UL>
<P><STRONG><a name="[236]"></a>WF200D_Write_Byte</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, wf200d.o(i.WF200D_Write_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WF200D_Write_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF200D_Get_Temprature
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF200D_Get_Pressure
</UL>

<P><STRONG><a name="[234]"></a>CRC_Get</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, wf183d.o(i.CRC_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CRC_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF183D_UART_GetTemprature
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF183D_UART_GetPressure
</UL>

<P><STRONG><a name="[232]"></a>FW_Device_GetParent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wf183d.o(i.FW_Device_GetParent))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF183D_UART_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF183D_UART_GetTemprature
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF183D_UART_GetPressure
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF183D_Init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF183D_I2C_Init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF183D_Get_Temprature
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF183D_Get_Pressure
</UL>

<P><STRONG><a name="[db]"></a>WF183D_Get_Pressure</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, wf183d.o(i.WF183D_Get_Pressure))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WF183D_Get_Pressure
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wf183d.o(.constdata)
</UL>
<P><STRONG><a name="[da]"></a>WF183D_Get_Temprature</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, wf183d.o(i.WF183D_Get_Temprature))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WF183D_Get_Temprature
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wf183d.o(.constdata)
</UL>
<P><STRONG><a name="[7b]"></a>WF183D_I2C_GetPressure</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wf183d.o(i.WF183D_I2C_GetPressure))
<BR>[Address Reference Count : 1]<UL><LI> wf183d.o(i.WF183D_Init)
</UL>
<P><STRONG><a name="[7c]"></a>WF183D_I2C_GetTemprature</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wf183d.o(i.WF183D_I2C_GetTemprature))
<BR>[Address Reference Count : 1]<UL><LI> wf183d.o(i.WF183D_Init)
</UL>
<P><STRONG><a name="[7a]"></a>WF183D_I2C_Init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, wf183d.o(i.WF183D_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = WF183D_I2C_Init &rArr; FW_I2C_Init &rArr; SGTR_Config &rArr; MM_Malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_I2C_SetDelay
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_I2C_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wf183d.o(i.WF183D_Init)
</UL>
<P><STRONG><a name="[d7]"></a>WF183D_Init</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, wf183d.o(i.WF183D_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = WF183D_Init &rArr; FW_Driver_Find &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Driver_Find
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wf183d.o(.constdata)
</UL>
<P><STRONG><a name="[7e]"></a>WF183D_OWI_GetPressure</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wf183d.o(i.WF183D_OWI_GetPressure))
<BR>[Address Reference Count : 1]<UL><LI> wf183d.o(i.WF183D_Init)
</UL>
<P><STRONG><a name="[7f]"></a>WF183D_OWI_GetTemprature</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wf183d.o(i.WF183D_OWI_GetTemprature))
<BR>[Address Reference Count : 1]<UL><LI> wf183d.o(i.WF183D_Init)
</UL>
<P><STRONG><a name="[7d]"></a>WF183D_OWI_Init</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, wf183d.o(i.WF183D_OWI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = WF183D_OWI_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wf183d.o(i.WF183D_Init)
</UL>
<P><STRONG><a name="[dc]"></a>WF183D_Press_Formula</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wf183d.o(i.WF183D_Press_Formula))
<BR>[Address Reference Count : 1]<UL><LI> wf183d.o(.constdata)
</UL>
<P><STRONG><a name="[d8]"></a>WF183D_Reset</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wf183d.o(i.WF183D_Reset))
<BR>[Address Reference Count : 1]<UL><LI> wf183d.o(.constdata)
</UL>
<P><STRONG><a name="[d9]"></a>WF183D_Set_Period</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wf183d.o(i.WF183D_Set_Period))
<BR>[Address Reference Count : 1]<UL><LI> wf183d.o(.constdata)
</UL>
<P><STRONG><a name="[78]"></a>WF183D_UART_GetPressure</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, wf183d.o(i.WF183D_UART_GetPressure))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = WF183D_UART_GetPressure &rArr; WF183D_UART_GetTemprature &rArr; FW_UART_ReadHL &rArr; RB_Read_HL &rArr; RB_Read &rArr; RB_Get_DataLength &rArr; FW_Unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_Write
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_ReadHL
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF183D_UART_GetTemprature
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Get
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wf183d.o(i.WF183D_Init)
</UL>
<P><STRONG><a name="[79]"></a>WF183D_UART_GetTemprature</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, wf183d.o(i.WF183D_UART_GetTemprature))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = WF183D_UART_GetTemprature &rArr; FW_UART_ReadHL &rArr; RB_Read_HL &rArr; RB_Read &rArr; RB_Get_DataLength &rArr; FW_Unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_Write
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_ReadHL
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Get
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Ms
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF183D_UART_GetPressure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wf183d.o(i.WF183D_Init)
</UL>
<P><STRONG><a name="[77]"></a>WF183D_UART_Init</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, wf183d.o(i.WF183D_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = WF183D_UART_Init &rArr; FW_UART_Init &rArr; SGTR_Config &rArr; MM_Malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_Init
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wf183d.o(i.WF183D_Init)
</UL>
<P><STRONG><a name="[14d]"></a>AT_Send</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, esp8266.o(i.AT_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = AT_Send &rArr; ESP8266_String_IsExist &rArr; FW_UART_StringIsExist &rArr; RB_String_IsExist &rArr; RB_Find_StringCS_RL1 &rArr; RB_Set_Index &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Write_Cmd
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_String_IsExist
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Clear_RBuff
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Ms
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Set_TRPT
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Set_Mode
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Restore
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Reset
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_ServerInfo
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_Mode
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_LocalInof
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_LinkState
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_APInfo
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_AP_AutoLink
</UL>

<P><STRONG><a name="[e9]"></a>ESP8266_AP_AutoLink</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, esp8266.o(i.ESP8266_AP_AutoLink))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = ESP8266_AP_AutoLink &rArr; AT_Send &rArr; ESP8266_String_IsExist &rArr; FW_UART_StringIsExist &rArr; RB_String_IsExist &rArr; RB_Find_StringCS_RL1 &rArr; RB_Set_Index &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.constdata)
</UL>
<P><STRONG><a name="[e7]"></a>ESP8266_AP_Link</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, esp8266.o(i.ESP8266_AP_Link))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = ESP8266_AP_Link &rArr; ESP8266_String_IsExist &rArr; FW_UART_StringIsExist &rArr; RB_String_IsExist &rArr; RB_Find_StringCS_RL1 &rArr; RB_Set_Index &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Write_Cmd
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_String_IsExist
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_RBuff
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Clear_RBuff
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Ms
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Unlock
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Lock
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.constdata)
</UL>
<P><STRONG><a name="[e6]"></a>ESP8266_AP_Probe</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, esp8266.o(i.ESP8266_AP_Probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = ESP8266_AP_Probe &rArr; ESP8266_String_IsExist &rArr; FW_UART_StringIsExist &rArr; RB_String_IsExist &rArr; RB_Find_StringCS_RL1 &rArr; RB_Set_Index &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Write_Cmd
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_String_IsExist
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Clear_RBuff
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Ms
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Unlock
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Lock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.constdata)
</UL>
<P><STRONG><a name="[e8]"></a>ESP8266_AP_Unlink</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, esp8266.o(i.ESP8266_AP_Unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ESP8266_AP_Unlink &rArr; ESP8266_Write_Cmd &rArr; FW_UART_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Write_Cmd
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.constdata)
</UL>
<P><STRONG><a name="[14e]"></a>ESP8266_Clear_RBuff</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, esp8266.o(i.ESP8266_Clear_RBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ESP8266_Clear_RBuff &rArr; FW_UART_ClearFIFO &rArr; RB_Clear_Buffer &rArr; FW_Unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_ClearFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Write
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Server_Link
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_AP_Probe
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_AP_Link
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Send
</UL>

<P><STRONG><a name="[e0]"></a>ESP8266_Enter_LPM</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, esp8266.o(i.ESP8266_Enter_LPM))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ESP8266_Enter_LPM &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.constdata)
</UL>
<P><STRONG><a name="[e1]"></a>ESP8266_Exit_LPM</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, esp8266.o(i.ESP8266_Exit_LPM))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ESP8266_Exit_LPM &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.constdata)
</UL>
<P><STRONG><a name="[ea]"></a>ESP8266_Get_APInfo</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, esp8266.o(i.ESP8266_Get_APInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = ESP8266_Get_APInfo &rArr; AT_Send &rArr; ESP8266_String_IsExist &rArr; FW_UART_StringIsExist &rArr; RB_String_IsExist &rArr; RB_Find_StringCS_RL1 &rArr; RB_Set_Index &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_RBuff
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Send
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.constdata)
</UL>
<P><STRONG><a name="[ed]"></a>ESP8266_Get_LinkState</STRONG> (Thumb, 130 bytes, Stack size 88 bytes, esp8266.o(i.ESP8266_Get_LinkState))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = ESP8266_Get_LinkState &rArr; ESP8266_Read_Inter &rArr; FW_UART_ReadInter &rArr; RB_Read_Inter &rArr; RB_Find_StringCS &rArr; RB_Set_Index &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Read_Inter
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Send
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Unlock
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Lock
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.constdata)
</UL>
<P><STRONG><a name="[e5]"></a>ESP8266_Get_LocalInof</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, esp8266.o(i.ESP8266_Get_LocalInof))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = ESP8266_Get_LocalInof &rArr; ESP8266_Read_Inter &rArr; FW_UART_ReadInter &rArr; RB_Read_Inter &rArr; RB_Find_StringCS &rArr; RB_Set_Index &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_String_IsExist
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Read_Inter
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.constdata)
</UL>
<P><STRONG><a name="[e3]"></a>ESP8266_Get_Mode</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, esp8266.o(i.ESP8266_Get_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = ESP8266_Get_Mode &rArr; AT_Send &rArr; ESP8266_String_IsExist &rArr; FW_UART_StringIsExist &rArr; RB_String_IsExist &rArr; RB_Find_StringCS_RL1 &rArr; RB_Set_Index &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Send
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_ReadFirst
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.constdata)
</UL>
<P><STRONG><a name="[160]"></a>ESP8266_Get_RBuff</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, esp8266.o(i.ESP8266_Get_RBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ESP8266_Get_RBuff &rArr; FW_UART_GetFIFOBBase
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_GetFIFOBBase
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_ServerInfo
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_APInfo
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_AP_Link
</UL>

<P><STRONG><a name="[16b]"></a>ESP8266_Get_RDL</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, esp8266.o(i.ESP8266_Get_RDL))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ESP8266_Get_RDL &rArr; FW_UART_GetDataLength &rArr; RB_Get_DataLength &rArr; FW_Unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_GetDataLength
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Read
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_ServerInfo
</UL>

<P><STRONG><a name="[ec]"></a>ESP8266_Get_ServerInfo</STRONG> (Thumb, 352 bytes, Stack size 104 bytes, esp8266.o(i.ESP8266_Get_ServerInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = ESP8266_Get_ServerInfo &rArr; ESP8266_Read_Inter &rArr; FW_UART_ReadInter &rArr; RB_Read_Inter &rArr; RB_Find_StringCS &rArr; RB_Set_Index &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Read_Inter
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_RDL
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_RBuff
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Send
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Unlock
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Lock
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.constdata)
</UL>
<P><STRONG><a name="[dd]"></a>ESP8266_Init</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, esp8266.o(i.ESP8266_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ESP8266_Init &rArr; FW_UART_Init &rArr; SGTR_Config &rArr; MM_Malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.constdata)
</UL>
<P><STRONG><a name="[f0]"></a>ESP8266_Read</STRONG> (Thumb, 156 bytes, Stack size 56 bytes, esp8266.o(i.ESP8266_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = ESP8266_Read &rArr; ESP8266_Read_Inter &rArr; FW_UART_ReadInter &rArr; RB_Read_Inter &rArr; RB_Find_StringCS &rArr; RB_Set_Index &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Read_Msg
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Read_Inter
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_RDL
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Ms
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.constdata)
</UL>
<P><STRONG><a name="[168]"></a>ESP8266_Read_Inter</STRONG> (Thumb, 92 bytes, Stack size 56 bytes, esp8266.o(i.ESP8266_Read_Inter))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = ESP8266_Read_Inter &rArr; FW_UART_ReadInter &rArr; RB_Read_Inter &rArr; RB_Find_StringCS &rArr; RB_Set_Index &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_ReadInter
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Read
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_ServerInfo
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_LocalInof
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_LinkState
</UL>

<P><STRONG><a name="[171]"></a>ESP8266_Read_Msg</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, esp8266.o(i.ESP8266_Read_Msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ESP8266_Read_Msg &rArr; FW_UART_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Read
</UL>

<P><STRONG><a name="[de]"></a>ESP8266_Reset</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, esp8266.o(i.ESP8266_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = ESP8266_Reset &rArr; AT_Send &rArr; ESP8266_String_IsExist &rArr; FW_UART_StringIsExist &rArr; RB_String_IsExist &rArr; RB_Find_StringCS_RL1 &rArr; RB_Set_Index &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Send
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.constdata)
</UL>
<P><STRONG><a name="[df]"></a>ESP8266_Restore</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, esp8266.o(i.ESP8266_Restore))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = ESP8266_Restore &rArr; AT_Send &rArr; ESP8266_String_IsExist &rArr; FW_UART_StringIsExist &rArr; RB_String_IsExist &rArr; RB_Find_StringCS_RL1 &rArr; RB_Set_Index &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.constdata)
</UL>
<P><STRONG><a name="[eb]"></a>ESP8266_Server_Link</STRONG> (Thumb, 314 bytes, Stack size 40 bytes, esp8266.o(i.ESP8266_Server_Link))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = ESP8266_Server_Link &rArr; ESP8266_String_IsExist &rArr; FW_UART_StringIsExist &rArr; RB_String_IsExist &rArr; RB_Find_StringCS_RL1 &rArr; RB_Set_Index &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Itoa
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Write_Cmd
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_String_IsExist
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Clear_RBuff
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.constdata)
</UL>
<P><STRONG><a name="[e4]"></a>ESP8266_Set_LocalInfo</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, esp8266.o(i.ESP8266_Set_LocalInfo))
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.constdata)
</UL>
<P><STRONG><a name="[e2]"></a>ESP8266_Set_Mode</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, esp8266.o(i.ESP8266_Set_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = ESP8266_Set_Mode &rArr; AT_Send &rArr; ESP8266_String_IsExist &rArr; FW_UART_StringIsExist &rArr; RB_String_IsExist &rArr; RB_Find_StringCS_RL1 &rArr; RB_Set_Index &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Send
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.constdata)
</UL>
<P><STRONG><a name="[ee]"></a>ESP8266_Set_TRPT</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, esp8266.o(i.ESP8266_Set_TRPT))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = ESP8266_Set_TRPT &rArr; AT_Send &rArr; ESP8266_String_IsExist &rArr; FW_UART_StringIsExist &rArr; RB_String_IsExist &rArr; RB_Find_StringCS_RL1 &rArr; RB_Set_Index &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Write_Cmd
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Send
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.constdata)
</UL>
<P><STRONG><a name="[151]"></a>ESP8266_String_IsExist</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, esp8266.o(i.ESP8266_String_IsExist))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = ESP8266_String_IsExist &rArr; FW_UART_StringIsExist &rArr; RB_String_IsExist &rArr; RB_Find_StringCS_RL1 &rArr; RB_Set_Index &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_StringIsExist
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Write
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Server_Link
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_LocalInof
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_AP_Probe
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_AP_Link
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Send
</UL>

<P><STRONG><a name="[ef]"></a>ESP8266_Write</STRONG> (Thumb, 226 bytes, Stack size 48 bytes, esp8266.o(i.ESP8266_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = ESP8266_Write &rArr; ESP8266_String_IsExist &rArr; FW_UART_StringIsExist &rArr; RB_String_IsExist &rArr; RB_Find_StringCS_RL1 &rArr; RB_Set_Index &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Itoa
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Write_Msg
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Write_Cmd
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_String_IsExist
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Clear_RBuff
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.constdata)
</UL>
<P><STRONG><a name="[14f]"></a>ESP8266_Write_Cmd</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, esp8266.o(i.ESP8266_Write_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ESP8266_Write_Cmd &rArr; FW_UART_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_Write
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Write
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Set_TRPT
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Server_Link
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_AP_Unlink
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_AP_Probe
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_AP_Link
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Send
</UL>

<P><STRONG><a name="[178]"></a>ESP8266_Write_Msg</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, esp8266.o(i.ESP8266_Write_Msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ESP8266_Write_Msg &rArr; FW_UART_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Write
</UL>

<P><STRONG><a name="[15d]"></a>FW_Device_GetParent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, esp8266.o(i.FW_Device_GetParent))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Write_Msg
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Write_Cmd
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Write
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_String_IsExist
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Set_TRPT
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Set_Mode
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Server_Link
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Restore
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Reset
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Read_Msg
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Read_Inter
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Read
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_ServerInfo
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_RDL
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_RBuff
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_Mode
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_LocalInof
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_LinkState
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_APInfo
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Exit_LPM
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Enter_LPM
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Clear_RBuff
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_AP_Unlink
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_AP_Probe
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_AP_Link
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_AP_AutoLink
</UL>

<P><STRONG><a name="[170]"></a>FW_GPIO_Init</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, esp8266.o(i.FW_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Init
</UL>

<P><STRONG><a name="[164]"></a>FW_GPIO_Write</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, esp8266.o(i.FW_GPIO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Reset
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Exit_LPM
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Enter_LPM
</UL>

<P><STRONG><a name="[175]"></a>Itoa</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, esp8266.o(i.Itoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Itoa &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Write
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Server_Link
</UL>

<P><STRONG><a name="[17f]"></a>FM_Anticollision</STRONG> (Thumb, 256 bytes, Stack size 72 bytes, fm17522.o(i.FM_Anticollision))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = FM_Anticollision &rArr; FM_Comm &rArr; FM_Read_FIFO &rArr; FM_Read_Reg
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Write_Reg
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Set_Timer
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Set_BitFraming
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Comm
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_CollSaveUID
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Clear_FIFO
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Clear_BitMask
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_CardRequest
</UL>

<P><STRONG><a name="[187]"></a>FM_Authent</STRONG> (Thumb, 150 bytes, Stack size 64 bytes, fm17522.o(i.FM_Authent))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = FM_Authent &rArr; FM_Comm &rArr; FM_Read_FIFO &rArr; FM_Read_Reg
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Set_Timer
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Read_Reg
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Comm
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Clear_FIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_CardActive
</UL>

<P><STRONG><a name="[180]"></a>FM_Clear_BitMask</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, fm17522.o(i.FM_Clear_BitMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FM_Clear_BitMask &rArr; FM_Write_Reg
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Write_Reg
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Read_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_LPMConfig
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_CardHalt
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Set_RF
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Select
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Request
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Comm
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Anticollision
</UL>

<P><STRONG><a name="[185]"></a>FM_Clear_FIFO</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fm17522.o(i.FM_Clear_FIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FM_Clear_FIFO &rArr; FM_Set_BitMask &rArr; FM_Write_Reg
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Set_BitMask
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Read_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_CardHalt
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_BlockWrite
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_BlockRead
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Select
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Request
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Comm
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Authent
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Anticollision
</UL>

<P><STRONG><a name="[182]"></a>FM_CollSaveUID</STRONG> (Thumb, 264 bytes, Stack size 56 bytes, fm17522.o(i.FM_CollSaveUID))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FM_CollSaveUID
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeftMoveBit
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Anticollision
</UL>

<P><STRONG><a name="[186]"></a>FM_Comm</STRONG> (Thumb, 558 bytes, Stack size 112 bytes, fm17522.o(i.FM_Comm))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = FM_Comm &rArr; FM_Read_FIFO &rArr; FM_Read_Reg
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Ms
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Write_Reg
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Set_BitMask
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Read_Reg
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Read_FIFO
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Clear_FIFO
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Clear_BitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_CardHalt
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_BlockWrite
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_BlockRead
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Select
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Request
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Authent
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Anticollision
</UL>

<P><STRONG><a name="[18c]"></a>FM_Config_ISOType</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, fm17522.o(i.FM_Config_ISOType))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FM_Config_ISOType &rArr; FM_Set_BitMask &rArr; FM_Write_Reg
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Ms
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Write_Reg
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Set_BitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_SetCP
</UL>

<P><STRONG><a name="[18b]"></a>FM_Read_FIFO</STRONG> (Thumb, 56 bytes, Stack size 48 bytes, fm17522.o(i.FM_Read_FIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FM_Read_FIFO &rArr; FM_Read_Reg
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Read_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Comm
</UL>

<P><STRONG><a name="[188]"></a>FM_Read_Reg</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, fm17522.o(i.FM_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FM_Read_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_LPMConfig
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Set_RF
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Set_BitMask
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Read_FIFO
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Comm
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Clear_FIFO
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Clear_BitMask
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Authent
</UL>

<P><STRONG><a name="[18d]"></a>FM_Request</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, fm17522.o(i.FM_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = FM_Request &rArr; FM_Comm &rArr; FM_Read_FIFO &rArr; FM_Read_Reg
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Write_Reg
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Set_Timer
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Set_BitMask
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Comm
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Clear_FIFO
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Clear_BitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_CardRequest
</UL>

<P><STRONG><a name="[18e]"></a>FM_Select</STRONG> (Thumb, 148 bytes, Stack size 64 bytes, fm17522.o(i.FM_Select))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = FM_Select &rArr; FM_Comm &rArr; FM_Read_FIFO &rArr; FM_Read_Reg
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Write_Reg
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Set_Timer
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Set_BitMask
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Comm
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Clear_FIFO
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Clear_BitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_CardRequest
</UL>

<P><STRONG><a name="[183]"></a>FM_Set_BitFraming</STRONG> (Thumb, 262 bytes, Stack size 32 bytes, fm17522.o(i.FM_Set_BitFraming))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FM_Set_BitFraming &rArr; FM_Write_Reg
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Write_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Anticollision
</UL>

<P><STRONG><a name="[189]"></a>FM_Set_BitMask</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, fm17522.o(i.FM_Set_BitMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FM_Set_BitMask &rArr; FM_Write_Reg
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Write_Reg
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Read_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_Reset
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_LPMConfig
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_CardHalt
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Set_Timer
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Set_RF
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Select
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Request
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Config_ISOType
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Comm
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Clear_FIFO
</UL>

<P><STRONG><a name="[190]"></a>FM_Set_RF</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fm17522.o(i.FM_Set_RF))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FM_Set_RF &rArr; FM_Set_BitMask &rArr; FM_Write_Reg
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Ms
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Set_BitMask
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Read_Reg
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Clear_BitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_SetRFM
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_LPMConfig
</UL>

<P><STRONG><a name="[184]"></a>FM_Set_Timer</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, fm17522.o(i.FM_Set_Timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FM_Set_Timer &rArr; FM_Set_BitMask &rArr; FM_Write_Reg
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Write_Reg
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Set_BitMask
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_CardHalt
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_BlockWrite
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_BlockRead
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Select
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Request
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Authent
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Anticollision
</UL>

<P><STRONG><a name="[181]"></a>FM_Write_Reg</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, fm17522.o(i.FM_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FM_Write_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_Reset
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_CardHalt
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Set_Timer
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Set_BitMask
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Set_BitFraming
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Select
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Request
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Config_ISOType
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Comm
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Clear_BitMask
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Anticollision
</UL>

<P><STRONG><a name="[203]"></a>FW_Device_GetParent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fm17522.o(i.FW_Device_GetParent))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Set_Reg
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Get_Reg
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_SetRFM
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_SetCP
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_Reset
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_LPMConfig
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_CardRequest
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_CardHalt
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_CardActive
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_BlockWrite
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_BlockRead
</UL>

<P><STRONG><a name="[19e]"></a>FW_GPIO_Init</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, fm17522.o(i.FW_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Init
</UL>

<P><STRONG><a name="[1b1]"></a>FW_GPIO_Write</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, fm17522.o(i.FW_GPIO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_Reset
</UL>

<P><STRONG><a name="[18a]"></a>LeftMoveBit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fm17522.o(i.LeftMoveBit))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_CollSaveUID
</UL>

<P><STRONG><a name="[f9]"></a>MF_S522_BlockRead</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, fm17522.o(i.MF_S522_BlockRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = MF_S522_BlockRead &rArr; FM_Comm &rArr; FM_Read_FIFO &rArr; FM_Read_Reg
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Set_Timer
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Comm
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Clear_FIFO
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fm17522.o(.constdata)
</UL>
<P><STRONG><a name="[fa]"></a>MF_S522_BlockWrite</STRONG> (Thumb, 144 bytes, Stack size 56 bytes, fm17522.o(i.MF_S522_BlockWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = MF_S522_BlockWrite &rArr; FM_Comm &rArr; FM_Read_FIFO &rArr; FM_Read_Reg
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Set_Timer
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Comm
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Clear_FIFO
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fm17522.o(.constdata)
</UL>
<P><STRONG><a name="[f8]"></a>MF_S522_CardActive</STRONG> (Thumb, 98 bytes, Stack size 72 bytes, fm17522.o(i.MF_S522_CardActive))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = MF_S522_CardActive &rArr; MF_S522_CardRequest &rArr; FM_Anticollision &rArr; FM_Comm &rArr; FM_Read_FIFO &rArr; FM_Read_Reg
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_CardRequest
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Authent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fm17522.o(.constdata)
</UL>
<P><STRONG><a name="[f6]"></a>MF_S522_CardHalt</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, fm17522.o(i.MF_S522_CardHalt))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = MF_S522_CardHalt &rArr; FM_Comm &rArr; FM_Read_FIFO &rArr; FM_Read_Reg
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Write_Reg
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Set_Timer
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Set_BitMask
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Comm
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Clear_FIFO
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Clear_BitMask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fm17522.o(.constdata)
</UL>
<P><STRONG><a name="[f7]"></a>MF_S522_CardRequest</STRONG> (Thumb, 346 bytes, Stack size 32 bytes, fm17522.o(i.MF_S522_CardRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = MF_S522_CardRequest &rArr; FM_Anticollision &rArr; FM_Comm &rArr; FM_Read_FIFO &rArr; FM_Read_Reg
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Select
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Request
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Anticollision
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_CardActive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fm17522.o(.constdata)
</UL>
<P><STRONG><a name="[f1]"></a>MF_S522_Init</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, fm17522.o(i.MF_S522_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MF_S522_Init &rArr; FW_Driver_Find &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Driver_Find
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fm17522.o(.constdata)
</UL>
<P><STRONG><a name="[f3]"></a>MF_S522_LPMConfig</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, fm17522.o(i.MF_S522_LPMConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MF_S522_LPMConfig &rArr; FM_Set_RF &rArr; FM_Set_BitMask &rArr; FM_Write_Reg
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Set_RF
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Set_BitMask
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Read_Reg
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Clear_BitMask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fm17522.o(.constdata)
</UL>
<P><STRONG><a name="[f2]"></a>MF_S522_Reset</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, fm17522.o(i.MF_S522_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MF_S522_Reset &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Ms
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Write_Reg
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Set_BitMask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fm17522.o(.constdata)
</UL>
<P><STRONG><a name="[f4]"></a>MF_S522_SetCP</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, fm17522.o(i.MF_S522_SetCP))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MF_S522_SetCP &rArr; FM_Config_ISOType &rArr; FM_Set_BitMask &rArr; FM_Write_Reg
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Config_ISOType
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fm17522.o(.constdata)
</UL>
<P><STRONG><a name="[f5]"></a>MF_S522_SetRFM</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, fm17522.o(i.MF_S522_SetRFM))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MF_S522_SetRFM &rArr; FM_Set_RF &rArr; FM_Set_BitMask &rArr; FM_Write_Reg
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Set_RF
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fm17522.o(.constdata)
</UL>
<P><STRONG><a name="[69]"></a>SGP_Get_Reg</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, fm17522.o(i.SGP_Get_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SGP_Get_Reg &rArr; FW_SPI_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_Write
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_Read
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_CSSet
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fm17522.o(i.MF_S522_Init)
</UL>
<P><STRONG><a name="[68]"></a>SGP_Init</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, fm17522.o(i.SGP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SGP_Init &rArr; FW_SPI_Init &rArr; FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_Init
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fm17522.o(i.MF_S522_Init)
</UL>
<P><STRONG><a name="[6a]"></a>SGP_Set_Reg</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, fm17522.o(i.SGP_Set_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SGP_Set_Reg &rArr; FW_SPI_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_Write
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_CSSet
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fm17522.o(i.MF_S522_Init)
</UL>
<P><STRONG><a name="[fe]"></a>DS_Get_Temprature</STRONG> (Thumb, 206 bytes, Stack size 48 bytes, ds18b20.o(i.DS_Get_Temprature))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = DS_Get_Temprature &rArr; DS_Write &rArr; FW_OW_Write &rArr; FW_OW_WriteByte &rArr; FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_OW_WaitACK
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_OW_Reset
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_Write
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ds18b20.o(.constdata)
</UL>
<P><STRONG><a name="[fb]"></a>DS_Init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, ds18b20.o(i.DS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = DS_Init &rArr; FW_OW_Init &rArr; FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_OW_Init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ds18b20.o(.constdata)
</UL>
<P><STRONG><a name="[158]"></a>DS_Read</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ds18b20.o(i.DS_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = DS_Read &rArr; FW_OW_Read &rArr; FW_OW_ReadByte &rArr; FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_OW_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_Get_Temprature
</UL>

<P><STRONG><a name="[fc]"></a>DS_Reset</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ds18b20.o(i.DS_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = DS_Reset &rArr; FW_OW_Reset &rArr; FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_OW_Reset
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ds18b20.o(.constdata)
</UL>
<P><STRONG><a name="[fd]"></a>DS_Set_Period</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ds18b20.o(i.DS_Set_Period))
<BR>[Address Reference Count : 1]<UL><LI> ds18b20.o(.constdata)
</UL>
<P><STRONG><a name="[157]"></a>DS_Write</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ds18b20.o(i.DS_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = DS_Write &rArr; FW_OW_Write &rArr; FW_OW_WriteByte &rArr; FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_OW_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_Get_Temprature
</UL>

<P><STRONG><a name="[154]"></a>FW_Device_GetParent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ds18b20.o(i.FW_Device_GetParent))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_Reset
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_Get_Temprature
</UL>

<P><STRONG><a name="[1ed]"></a>FW_Device_GetParent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, st7735.o(i.FW_Device_GetParent))
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Set_Cursor
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Get_ScreenSize
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Fill_Area
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Draw_Point
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_EN
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_DI
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD8_Write_Data
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD8_Write_Cmd
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD8_Write
</UL>

<P><STRONG><a name="[19f]"></a>FW_GPIO_Init</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, st7735.o(i.FW_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Init
</UL>

<P><STRONG><a name="[1b2]"></a>FW_GPIO_Write</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, st7735.o(i.FW_GPIO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Init
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD8_Write_Cmd
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD8_RS_Data
</UL>

<P><STRONG><a name="[1eb]"></a>LCD8_RS_Data</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, st7735.o(i.LCD8_RS_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LCD8_RS_Data &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD8_Write_Data
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD8_Write
</UL>

<P><STRONG><a name="[1ec]"></a>LCD8_Write</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, st7735.o(i.LCD8_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LCD8_Write &rArr; LCD8_RS_Data &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_Write
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_EN
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_DI
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD8_RS_Data
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Fill_Area
</UL>

<P><STRONG><a name="[1f1]"></a>LCD8_Write_Cmd</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, st7735.o(i.LCD8_Write_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LCD8_Write_Cmd &rArr; FW_SPI_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_Write
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_EN
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_DI
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Set_Cursor
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Fill_Area
</UL>

<P><STRONG><a name="[1f2]"></a>LCD8_Write_Data</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, st7735.o(i.LCD8_Write_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LCD8_Write_Data &rArr; LCD8_RS_Data &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_Write
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_EN
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_DI
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD8_RS_Data
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Set_Cursor
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Draw_Point
</UL>

<P><STRONG><a name="[1f0]"></a>SGP_DI</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, st7735.o(i.SGP_DI))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SGP_DI &rArr; FW_SPI_CSSet
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_CSSet
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD8_Write_Data
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD8_Write_Cmd
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD8_Write
</UL>

<P><STRONG><a name="[1ee]"></a>SGP_EN</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, st7735.o(i.SGP_EN))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SGP_EN &rArr; FW_SPI_CSSet
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_CSSet
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD8_Write_Data
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD8_Write_Cmd
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD8_Write
</UL>

<P><STRONG><a name="[102]"></a>ST7735_BL_Get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, st7735.o(i.ST7735_BL_Get))
<BR>[Address Reference Count : 1]<UL><LI> st7735.o(.constdata)
</UL>
<P><STRONG><a name="[101]"></a>ST7735_BL_Set</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, st7735.o(i.ST7735_BL_Set))
<BR>[Address Reference Count : 1]<UL><LI> st7735.o(.constdata)
</UL>
<P><STRONG><a name="[104]"></a>ST7735_Draw_Point</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, st7735.o(i.ST7735_Draw_Point))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ST7735_Draw_Point &rArr; ST7735_Set_Cursor &rArr; LCD8_Write_Data &rArr; LCD8_RS_Data &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Set_Cursor
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD8_Write_Data
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st7735.o(.constdata)
</UL>
<P><STRONG><a name="[103]"></a>ST7735_Fill_Area</STRONG> (Thumb, 254 bytes, Stack size 64 bytes, st7735.o(i.ST7735_Fill_Area))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ST7735_Fill_Area &rArr; LCD8_Write &rArr; LCD8_RS_Data &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD8_Write_Cmd
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD8_Write
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st7735.o(.constdata)
</UL>
<P><STRONG><a name="[100]"></a>ST7735_Get_CID</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, st7735.o(i.ST7735_Get_CID))
<BR>[Address Reference Count : 1]<UL><LI> st7735.o(.constdata)
</UL>
<P><STRONG><a name="[105]"></a>ST7735_Get_Point</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, st7735.o(i.ST7735_Get_Point))
<BR>[Address Reference Count : 1]<UL><LI> st7735.o(.constdata)
</UL>
<P><STRONG><a name="[106]"></a>ST7735_Get_ScreenSize</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, st7735.o(i.ST7735_Get_ScreenSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ST7735_Get_ScreenSize
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st7735.o(.constdata)
</UL>
<P><STRONG><a name="[ff]"></a>ST7735_Init</STRONG> (Thumb, 1194 bytes, Stack size 24 bytes, st7735.o(i.ST7735_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ST7735_Init &rArr; FW_SPI_Init &rArr; FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_Init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Driver_Find
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Us
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD8_Write_Data
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD8_Write_Cmd
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st7735.o(.constdata)
</UL>
<P><STRONG><a name="[21f]"></a>ST7735_Set_Cursor</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, st7735.o(i.ST7735_Set_Cursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ST7735_Set_Cursor &rArr; LCD8_Write_Data &rArr; LCD8_RS_Data &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD8_Write_Data
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD8_Write_Cmd
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Draw_Point
</UL>

<P><STRONG><a name="[223]"></a>Code_GetSrc</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, tm7711.o(i.Code_GetSrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Code_GetSrc
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM77_Get_Temprature
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM77_Get_Sample
</UL>

<P><STRONG><a name="[222]"></a>FW_Device_GetParent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tm7711.o(i.FW_Device_GetParent))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM77_Set_Period
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM77_Init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM77_Get_Temprature
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM77_Get_Sample
</UL>

<P><STRONG><a name="[1a0]"></a>FW_GPIO_Init</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, tm7711.o(i.FW_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM77_Init
</UL>

<P><STRONG><a name="[1a9]"></a>FW_GPIO_Read</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tm7711.o(i.FW_GPIO_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FW_GPIO_Read &rArr; GPIO_PinRead
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRead
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM77_Get_Temprature
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM77_Get_Sample
</UL>

<P><STRONG><a name="[1b3]"></a>FW_GPIO_Write</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, tm7711.o(i.FW_GPIO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM77_Set_Period
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM77_Get_Temprature
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM77_Get_Sample
</UL>

<P><STRONG><a name="[10b]"></a>TM77_Get_Sample</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, tm7711.o(i.TM77_Get_Sample))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TM77_Get_Sample &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Us
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Read
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Code_GetSrc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tm7711.o(.constdata)
</UL>
<P><STRONG><a name="[10a]"></a>TM77_Get_Temprature</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, tm7711.o(i.TM77_Get_Temprature))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TM77_Get_Temprature &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Us
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Read
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Code_GetSrc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tm7711.o(.constdata)
</UL>
<P><STRONG><a name="[107]"></a>TM77_Init</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, tm7711.o(i.TM77_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TM77_Init &rArr; FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tm7711.o(.constdata)
</UL>
<P><STRONG><a name="[108]"></a>TM77_Reset</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tm7711.o(i.TM77_Reset))
<BR>[Address Reference Count : 1]<UL><LI> tm7711.o(.constdata)
</UL>
<P><STRONG><a name="[10c]"></a>TM77_Sample_Formula</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tm7711.o(i.TM77_Sample_Formula))
<BR>[Address Reference Count : 1]<UL><LI> tm7711.o(.constdata)
</UL>
<P><STRONG><a name="[109]"></a>TM77_Set_Period</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, tm7711.o(i.TM77_Set_Period))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TM77_Set_Period &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Us
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tm7711.o(.constdata)
</UL>
<P><STRONG><a name="[12f]"></a>EXT_GPIO_Config</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, hc595.o(i.EXT_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = EXT_GPIO_Config &rArr; FW_Device_Find &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_Find
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Driver_Find
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hc595.o(Device_Table)
</UL>
<P><STRONG><a name="[1dd]"></a>FW_Device_GetParent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hc595.o(i.FW_Device_GetParent))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_HC595_Write
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_HC595_Init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC595_Port_Write
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC595_Port_Init
</UL>

<P><STRONG><a name="[1a1]"></a>FW_GPIO_Init</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, hc595.o(i.FW_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_HC595_Init
</UL>

<P><STRONG><a name="[1b4]"></a>FW_GPIO_Write</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, hc595.o(i.FW_GPIO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_HC595_CTL
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_HC595_Write
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_HC595_Init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_HC595_CTL
</UL>

<P><STRONG><a name="[12e]"></a>HC595_Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hc595.o(i.HC595_Config))
<BR>[Address Reference Count : 1]<UL><LI> hc595.o(Device_Table)
</UL>
<P><STRONG><a name="[10d]"></a>HC595_Port_Init</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, hc595.o(i.HC595_Port_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HC595_Port_Init &rArr; FW_Device_Find &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_Find
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hc595.o(.constdata)
</UL>
<P><STRONG><a name="[10e]"></a>HC595_Port_Write</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, hc595.o(i.HC595_Port_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HC595_Port_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hc595.o(.constdata)
</UL>
<P><STRONG><a name="[5c]"></a>IO_HC595_CTL</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, hc595.o(i.IO_HC595_CTL))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IO_HC595_CTL &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hc595.o(i.HC595_Port_Init)
</UL>
<P><STRONG><a name="[5b]"></a>IO_HC595_Init</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, hc595.o(i.IO_HC595_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = IO_HC595_Init &rArr; FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hc595.o(i.HC595_Port_Init)
</UL>
<P><STRONG><a name="[5d]"></a>IO_HC595_Write</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, hc595.o(i.IO_HC595_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = IO_HC595_Write &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Us
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hc595.o(i.HC595_Port_Init)
</UL>
<P><STRONG><a name="[59]"></a>SPI_HC595_CTL</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, hc595.o(i.SPI_HC595_CTL))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI_HC595_CTL &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hc595.o(i.HC595_Port_Init)
</UL>
<P><STRONG><a name="[58]"></a>SPI_HC595_Init</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, hc595.o(i.SPI_HC595_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SPI_HC595_Init &rArr; FW_SPI_Init &rArr; FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_Init
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hc595.o(i.HC595_Port_Init)
</UL>
<P><STRONG><a name="[5a]"></a>SPI_HC595_Write</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, hc595.o(i.SPI_HC595_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SPI_HC595_Write &rArr; FW_SPI_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_Write
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_CSSet
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hc595.o(i.HC595_Port_Init)
</UL>
<P><STRONG><a name="[199]"></a>FW_List_Init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fw_device.o(i.FW_List_Init))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_PreBind
</UL>

<P><STRONG><a name="[4b]"></a>ILock</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, fw_system.o(i.ILock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ILock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_system.o(i.FW_System_Init)
</UL>
<P><STRONG><a name="[4c]"></a>IUnlock</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, fw_system.o(i.IUnlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IUnlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_system.o(i.FW_System_Init)
</UL>
<P><STRONG><a name="[138]"></a>NLock</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fw_system.o(i.NLock))
<BR>[Address Reference Count : 1]<UL><LI> fw_system.o(.data)
</UL>
<P><STRONG><a name="[139]"></a>NUnlock</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fw_system.o(i.NUnlock))
<BR>[Address Reference Count : 1]<UL><LI> fw_system.o(.data)
</UL>
<P><STRONG><a name="[33]"></a>FW_Delay_DefMs</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, fw_delay.o(i.FW_Delay_DefMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = FW_Delay_DefMs &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_delay.o(i.FW_Delay_Init)
</UL>
<P><STRONG><a name="[1ad]"></a>FW_Device_GetDriver</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fw_gpio.o(i.FW_Device_GetDriver))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRead
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortWrite
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortInit
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_ToggleUseLAPI
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_ToggleUseGetOutput
</UL>

<P><STRONG><a name="[130]"></a>FW_GPIO_Driver_Probe</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, fw_gpio.o(i.FW_GPIO_Driver_Probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = FW_GPIO_Driver_Probe &rArr; FW_Driver_Find &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Driver_Find
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_gpio.o(Device_Table)
</UL>
<P><STRONG><a name="[35]"></a>FW_GPIO_ToggleUseGetOutput</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, fw_gpio.o(i.FW_GPIO_ToggleUseGetOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FW_GPIO_ToggleUseGetOutput
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_gpio.o(i.FW_GPIO_Driver_Probe)
</UL>
<P><STRONG><a name="[34]"></a>FW_GPIO_ToggleUseLAPI</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, fw_gpio.o(i.FW_GPIO_ToggleUseLAPI))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FW_GPIO_ToggleUseLAPI
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_gpio.o(i.FW_GPIO_Driver_Probe)
</UL>
<P><STRONG><a name="[1d3]"></a>FW_Device_GetDriver</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fw_uart.o(i.FW_Device_GetDriver))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_Init
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_WritePOL
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_WriteINT
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_WriteDMA
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_ReadPOL
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_IH_TX
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_IH_TC
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_IH_RX
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_IH_RC
</UL>

<P><STRONG><a name="[4d]"></a>FW_UART_IH_RC</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, fw_uart.o(i.FW_UART_IH_RC))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = FW_UART_IH_RC &rArr; RB_Write &rArr; RB_Get_DataLength &rArr; FW_Unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Unlock
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Lock
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Write
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_uart.o(i.FW_UART_Init)
</UL>
<P><STRONG><a name="[4e]"></a>FW_UART_IH_RX</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, fw_uart.o(i.FW_UART_IH_RX))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = FW_UART_IH_RX &rArr; RB_Write &rArr; RB_Get_DataLength &rArr; FW_Unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Unlock
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Lock
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Write
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_uart.o(i.FW_UART_Init)
</UL>
<P><STRONG><a name="[4f]"></a>FW_UART_IH_TC</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, fw_uart.o(i.FW_UART_IH_TC))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = FW_UART_IH_TC &rArr; RB_Read &rArr; RB_Get_DataLength &rArr; FW_Unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Unlock
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Lock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Get_DataLength
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_uart.o(i.FW_UART_Init)
</UL>
<P><STRONG><a name="[50]"></a>FW_UART_IH_TX</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, fw_uart.o(i.FW_UART_IH_TX))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FW_UART_IH_TX &rArr; RB_Read &rArr; RB_Get_DataLength &rArr; FW_Unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Unlock
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Lock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_uart.o(i.FW_UART_Init)
</UL>
<P><STRONG><a name="[56]"></a>FW_UART_ReadDMA</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, fw_uart.o(i.FW_UART_ReadDMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FW_UART_ReadDMA &rArr; RB_Read &rArr; RB_Get_DataLength &rArr; FW_Unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_uart.o(i.FW_UART_Init)
</UL>
<P><STRONG><a name="[55]"></a>FW_UART_ReadINT</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, fw_uart.o(i.FW_UART_ReadINT))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FW_UART_ReadINT &rArr; RB_Read &rArr; RB_Get_DataLength &rArr; FW_Unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_uart.o(i.FW_UART_Init)
</UL>
<P><STRONG><a name="[54]"></a>FW_UART_ReadPOL</STRONG> (Thumb, 80 bytes, Stack size 48 bytes, fw_uart.o(i.FW_UART_ReadPOL))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FW_UART_ReadPOL
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_uart.o(i.FW_UART_Init)
</UL>
<P><STRONG><a name="[57]"></a>FW_UART_WaitNull</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fw_uart.o(i.FW_UART_WaitNull))
<BR>[Address Reference Count : 2]<UL><LI> fw_uart.o(i.FW_UART_ReadPOL)
<LI> fw_uart.o(i.FW_UART_WritePOL)
</UL>
<P><STRONG><a name="[53]"></a>FW_UART_WriteDMA</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, fw_uart.o(i.FW_UART_WriteDMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = FW_UART_WriteDMA &rArr; RB_Write &rArr; RB_Get_DataLength &rArr; FW_Unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Unlock
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Lock
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Write
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Get_DataLength
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_uart.o(i.FW_UART_Init)
</UL>
<P><STRONG><a name="[52]"></a>FW_UART_WriteINT</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, fw_uart.o(i.FW_UART_WriteINT))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = FW_UART_WriteINT &rArr; RB_Write &rArr; RB_Get_DataLength &rArr; FW_Unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Unlock
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Lock
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Write
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Get_DataLength
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_uart.o(i.FW_UART_Init)
</UL>
<P><STRONG><a name="[51]"></a>FW_UART_WritePOL</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, fw_uart.o(i.FW_UART_WritePOL))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FW_UART_WritePOL
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_uart.o(i.FW_UART_Init)
</UL>
<P><STRONG><a name="[1a2]"></a>FW_GPIO_Init</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, fw_suart.o(i.FW_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUART_Init
</UL>

<P><STRONG><a name="[1aa]"></a>FW_GPIO_Read</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fw_suart.o(i.FW_GPIO_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FW_GPIO_Read &rArr; GPIO_PinRead
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRead
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUART_Wait_RC
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUART_RX_Byte
</UL>

<P><STRONG><a name="[1b5]"></a>FW_GPIO_Write</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, fw_suart.o(i.FW_GPIO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUART_TX_Byte
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUART_Init
</UL>

<P><STRONG><a name="[10f]"></a>SUART_Init</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, fw_suart.o(i.SUART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SUART_Init &rArr; FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_suart.o(.constdata)
</UL>
<P><STRONG><a name="[111]"></a>SUART_RX_Byte</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, fw_suart.o(i.SUART_RX_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SUART_RX_Byte &rArr; FW_Delay_Us
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Us
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_suart.o(.constdata)
</UL>
<P><STRONG><a name="[110]"></a>SUART_TX_Byte</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, fw_suart.o(i.SUART_TX_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SUART_TX_Byte &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Us
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_suart.o(.constdata)
</UL>
<P><STRONG><a name="[112]"></a>SUART_Wait_RC</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, fw_suart.o(i.SUART_Wait_RC))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SUART_Wait_RC &rArr; FW_GPIO_Read &rArr; GPIO_PinRead
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_suart.o(.constdata)
</UL>
<P><STRONG><a name="[131]"></a>IFlash_Driver_Probe</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, fw_flash.o(i.IFlash_Driver_Probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = IFlash_Driver_Probe &rArr; FW_Driver_Find &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Driver_Find
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_flash.o(Device_Table)
</UL>
<P><STRONG><a name="[132]"></a>IRTC_Driver_Probe</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, fw_rtc.o(i.IRTC_Driver_Probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = IRTC_Driver_Probe &rArr; FW_Driver_Find &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Driver_Find
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_rtc.o(Device_Table)
</UL>
<P><STRONG><a name="[133]"></a>IWDG_Driver_Probe</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, fw_wdg.o(i.IWDG_Driver_Probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = IWDG_Driver_Probe &rArr; FW_Driver_Find &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Driver_Find
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_wdg.o(Device_Table)
</UL>
<P><STRONG><a name="[134]"></a>WWDG_Driver_Probe</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, fw_wdg.o(i.WWDG_Driver_Probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = WWDG_Driver_Probe &rArr; FW_Driver_Find &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Driver_Find
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_wdg.o(Device_Table)
</UL>
<P><STRONG><a name="[113]"></a>Bus_LCD8_Init</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, fw_bus.o(i.Bus_LCD8_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Bus_LCD8_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_bus.o(.constdata)
</UL>
<P><STRONG><a name="[116]"></a>Bus_LCD8_ReadData</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, fw_bus.o(i.Bus_LCD8_ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Bus_LCD8_ReadData
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_bus.o(.constdata)
</UL>
<P><STRONG><a name="[2e]"></a>Bus_LCD8_ReadDataU16</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fw_bus.o(i.Bus_LCD8_ReadDataU16))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bus_LCD8_ReadDataU16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_bus.o(i.Bus_LCD8_Init)
</UL>
<P><STRONG><a name="[2b]"></a>Bus_LCD8_ReadDataU32</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fw_bus.o(i.Bus_LCD8_ReadDataU32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bus_LCD8_ReadDataU32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_bus.o(i.Bus_LCD8_Init)
</UL>
<P><STRONG><a name="[31]"></a>Bus_LCD8_ReadDataU8</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fw_bus.o(i.Bus_LCD8_ReadDataU8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bus_LCD8_ReadDataU8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_bus.o(i.Bus_LCD8_Init)
</UL>
<P><STRONG><a name="[114]"></a>Bus_LCD8_WriteCmd</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, fw_bus.o(i.Bus_LCD8_WriteCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Bus_LCD8_WriteCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_bus.o(.constdata)
</UL>
<P><STRONG><a name="[2c]"></a>Bus_LCD8_WriteCmdU16</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fw_bus.o(i.Bus_LCD8_WriteCmdU16))
<BR>[Address Reference Count : 1]<UL><LI> fw_bus.o(i.Bus_LCD8_Init)
</UL>
<P><STRONG><a name="[29]"></a>Bus_LCD8_WriteCmdU32</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fw_bus.o(i.Bus_LCD8_WriteCmdU32))
<BR>[Address Reference Count : 1]<UL><LI> fw_bus.o(i.Bus_LCD8_Init)
</UL>
<P><STRONG><a name="[2f]"></a>Bus_LCD8_WriteCmdU8</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fw_bus.o(i.Bus_LCD8_WriteCmdU8))
<BR>[Address Reference Count : 1]<UL><LI> fw_bus.o(i.Bus_LCD8_Init)
</UL>
<P><STRONG><a name="[115]"></a>Bus_LCD8_WriteData</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, fw_bus.o(i.Bus_LCD8_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Bus_LCD8_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_bus.o(.constdata)
</UL>
<P><STRONG><a name="[2d]"></a>Bus_LCD8_WriteDataU16</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, fw_bus.o(i.Bus_LCD8_WriteDataU16))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Bus_LCD8_WriteDataU16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_bus.o(i.Bus_LCD8_Init)
</UL>
<P><STRONG><a name="[2a]"></a>Bus_LCD8_WriteDataU32</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, fw_bus.o(i.Bus_LCD8_WriteDataU32))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Bus_LCD8_WriteDataU32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_bus.o(i.Bus_LCD8_Init)
</UL>
<P><STRONG><a name="[30]"></a>Bus_LCD8_WriteDataU8</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, fw_bus.o(i.Bus_LCD8_WriteDataU8))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Bus_LCD8_WriteDataU8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_bus.o(i.Bus_LCD8_Init)
</UL>
<P><STRONG><a name="[153]"></a>FW_Device_GetParent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fw_bus.o(i.FW_Device_GetParent))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_LCD8_WriteData
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_LCD8_WriteCmd
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_LCD8_ReadData
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_LCD8_Init
</UL>

<P><STRONG><a name="[1c9]"></a>FW_Device_GetDriver</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fw_spi.o(i.FW_Device_GetDriver))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_Init
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_WritePOL
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_WriteINT
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_WriteDMA
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_WRByte
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_ReadPOL
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_ReadINT
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_ReadDMA
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_IH_TX
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_IH_TC
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_IH_RX
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_IH_RC
</UL>

<P><STRONG><a name="[1a3]"></a>FW_GPIO_Init</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, fw_spi.o(i.FW_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_Init
</UL>

<P><STRONG><a name="[1b6]"></a>FW_GPIO_Write</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, fw_spi.o(i.FW_GPIO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_CSIOSet
</UL>

<P><STRONG><a name="[4a]"></a>FW_SPI_CSIOSet</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fw_spi.o(i.FW_SPI_CSIOSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FW_SPI_CSIOSet &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_spi.o(i.FW_SPI_Init)
</UL>
<P><STRONG><a name="[40]"></a>FW_SPI_IH_RC</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, fw_spi.o(i.FW_SPI_IH_RC))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = FW_SPI_IH_RC &rArr; RB_Write &rArr; RB_Get_DataLength &rArr; FW_Unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Unlock
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Lock
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Write
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_spi.o(i.FW_SPI_Init)
</UL>
<P><STRONG><a name="[41]"></a>FW_SPI_IH_RX</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, fw_spi.o(i.FW_SPI_IH_RX))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = FW_SPI_IH_RX &rArr; RB_Write &rArr; RB_Get_DataLength &rArr; FW_Unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Unlock
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Lock
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Write
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_spi.o(i.FW_SPI_Init)
</UL>
<P><STRONG><a name="[42]"></a>FW_SPI_IH_TC</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, fw_spi.o(i.FW_SPI_IH_TC))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = FW_SPI_IH_TC &rArr; RB_Read &rArr; RB_Get_DataLength &rArr; FW_Unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Unlock
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Lock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Get_DataLength
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_spi.o(i.FW_SPI_Init)
</UL>
<P><STRONG><a name="[43]"></a>FW_SPI_IH_TX</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, fw_spi.o(i.FW_SPI_IH_TX))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FW_SPI_IH_TX &rArr; RB_Read &rArr; RB_Get_DataLength &rArr; FW_Unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Unlock
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Lock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_spi.o(i.FW_SPI_Init)
</UL>
<P><STRONG><a name="[49]"></a>FW_SPI_ReadDMA</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, fw_spi.o(i.FW_SPI_ReadDMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FW_SPI_ReadDMA
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_spi.o(i.FW_SPI_Init)
</UL>
<P><STRONG><a name="[48]"></a>FW_SPI_ReadINT</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, fw_spi.o(i.FW_SPI_ReadINT))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FW_SPI_ReadINT &rArr; RB_PMB_Write &rArr; FW_Unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_PMB_Write
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_PMB_Set
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Get_DataLength
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_spi.o(i.FW_SPI_Init)
</UL>
<P><STRONG><a name="[47]"></a>FW_SPI_ReadPOL</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, fw_spi.o(i.FW_SPI_ReadPOL))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FW_SPI_ReadPOL &rArr; FW_SPI_WRByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_WRByte
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_spi.o(i.FW_SPI_Init)
</UL>
<P><STRONG><a name="[1d0]"></a>FW_SPI_WRByte</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, fw_spi.o(i.FW_SPI_WRByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FW_SPI_WRByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_WritePOL
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_ReadPOL
</UL>

<P><STRONG><a name="[46]"></a>FW_SPI_WriteDMA</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, fw_spi.o(i.FW_SPI_WriteDMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FW_SPI_WriteDMA
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_spi.o(i.FW_SPI_Init)
</UL>
<P><STRONG><a name="[45]"></a>FW_SPI_WriteINT</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, fw_spi.o(i.FW_SPI_WriteINT))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FW_SPI_WriteINT &rArr; RB_PMB_Write &rArr; FW_Unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_PMB_Write
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Get_DataLength
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_spi.o(i.FW_SPI_Init)
</UL>
<P><STRONG><a name="[44]"></a>FW_SPI_WritePOL</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, fw_spi.o(i.FW_SPI_WritePOL))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FW_SPI_WritePOL &rArr; FW_SPI_WRByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_WRByte
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_spi.o(i.FW_SPI_Init)
</UL>
<P><STRONG><a name="[1a4]"></a>FW_GPIO_Init</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, fw_sspi.o(i.FW_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPI_Init
</UL>

<P><STRONG><a name="[1ab]"></a>FW_GPIO_Read</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fw_sspi.o(i.FW_GPIO_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FW_GPIO_Read &rArr; GPIO_PinRead
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRead
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRByte_MSB
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRByte_LSB
</UL>

<P><STRONG><a name="[1b7]"></a>FW_GPIO_Write</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, fw_sspi.o(i.FW_GPIO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRByte_MSB
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRByte_LSB
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPI_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPI_CS_Set
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCK_RE
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCK_FE
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCK_CPOL1
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCK_CPOL0
</UL>

<P><STRONG><a name="[76]"></a>SCK_CPOL0</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fw_sspi.o(i.SCK_CPOL0))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SCK_CPOL0 &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_sspi.o(i.SSPI_Init)
</UL>
<P><STRONG><a name="[73]"></a>SCK_CPOL1</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fw_sspi.o(i.SCK_CPOL1))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SCK_CPOL1 &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_sspi.o(i.SSPI_Init)
</UL>
<P><STRONG><a name="[74]"></a>SCK_FE</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fw_sspi.o(i.SCK_FE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SCK_FE &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Us
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_sspi.o(i.SSPI_Init)
</UL>
<P><STRONG><a name="[75]"></a>SCK_RE</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fw_sspi.o(i.SCK_RE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SCK_RE &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Us
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_sspi.o(i.SSPI_Init)
</UL>
<P><STRONG><a name="[119]"></a>SSPI_CS_Set</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fw_sspi.o(i.SSPI_CS_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SSPI_CS_Set &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_sspi.o(.constdata)
</UL>
<P><STRONG><a name="[117]"></a>SSPI_DeInit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fw_sspi.o(i.SSPI_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SSPI_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_sspi.o(.constdata)
</UL>
<P><STRONG><a name="[118]"></a>SSPI_Init</STRONG> (Thumb, 280 bytes, Stack size 16 bytes, fw_sspi.o(i.SSPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SSPI_Init &rArr; FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_sspi.o(.constdata)
</UL>
<P><STRONG><a name="[11b]"></a>SSPI_Read</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, fw_sspi.o(i.SSPI_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SSPI_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_sspi.o(.constdata)
</UL>
<P><STRONG><a name="[11a]"></a>SSPI_Write</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, fw_sspi.o(i.SSPI_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SSPI_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_sspi.o(.constdata)
</UL>
<P><STRONG><a name="[72]"></a>TRByte_LSB</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, fw_sspi.o(i.TRByte_LSB))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TRByte_LSB &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_sspi.o(i.SSPI_Init)
</UL>
<P><STRONG><a name="[71]"></a>TRByte_MSB</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, fw_sspi.o(i.TRByte_MSB))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TRByte_MSB &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_sspi.o(i.SSPI_Init)
</UL>
<P><STRONG><a name="[1bb]"></a>FW_Device_GetDriver</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fw_i2c.o(i.FW_Device_GetDriver))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_I2C_Init
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_I2C_WritePOL
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_I2C_ReadPOL
</UL>

<P><STRONG><a name="[36]"></a>FW_I2C_IH_RC</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fw_i2c.o(i.FW_I2C_IH_RC))
<BR>[Address Reference Count : 1]<UL><LI> fw_i2c.o(i.FW_I2C_Init)
</UL>
<P><STRONG><a name="[37]"></a>FW_I2C_IH_RX</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fw_i2c.o(i.FW_I2C_IH_RX))
<BR>[Address Reference Count : 1]<UL><LI> fw_i2c.o(i.FW_I2C_Init)
</UL>
<P><STRONG><a name="[38]"></a>FW_I2C_IH_TC</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fw_i2c.o(i.FW_I2C_IH_TC))
<BR>[Address Reference Count : 1]<UL><LI> fw_i2c.o(i.FW_I2C_Init)
</UL>
<P><STRONG><a name="[39]"></a>FW_I2C_IH_TX</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fw_i2c.o(i.FW_I2C_IH_TX))
<BR>[Address Reference Count : 1]<UL><LI> fw_i2c.o(i.FW_I2C_Init)
</UL>
<P><STRONG><a name="[3f]"></a>FW_I2C_ReadDMA</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, fw_i2c.o(i.FW_I2C_ReadDMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FW_I2C_ReadDMA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_i2c.o(i.FW_I2C_Init)
</UL>
<P><STRONG><a name="[3e]"></a>FW_I2C_ReadINT</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, fw_i2c.o(i.FW_I2C_ReadINT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FW_I2C_ReadINT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_i2c.o(i.FW_I2C_Init)
</UL>
<P><STRONG><a name="[3d]"></a>FW_I2C_ReadPOL</STRONG> (Thumb, 32 bytes, Stack size 40 bytes, fw_i2c.o(i.FW_I2C_ReadPOL))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FW_I2C_ReadPOL
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_i2c.o(i.FW_I2C_Init)
</UL>
<P><STRONG><a name="[3c]"></a>FW_I2C_WriteDMA</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, fw_i2c.o(i.FW_I2C_WriteDMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FW_I2C_WriteDMA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_i2c.o(i.FW_I2C_Init)
</UL>
<P><STRONG><a name="[3b]"></a>FW_I2C_WriteINT</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, fw_i2c.o(i.FW_I2C_WriteINT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FW_I2C_WriteINT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_i2c.o(i.FW_I2C_Init)
</UL>
<P><STRONG><a name="[3a]"></a>FW_I2C_WritePOL</STRONG> (Thumb, 32 bytes, Stack size 40 bytes, fw_i2c.o(i.FW_I2C_WritePOL))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FW_I2C_WritePOL
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_i2c.o(i.FW_I2C_Init)
</UL>
<P><STRONG><a name="[1a5]"></a>FW_GPIO_Init</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, fw_si2c.o(i.FW_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_Read_Byte
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SI2C_Init
</UL>

<P><STRONG><a name="[1b8]"></a>FW_GPIO_Write</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, fw_si2c.o(i.FW_GPIO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_OUT
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SI2C_Init
</UL>

<P><STRONG><a name="[1c2]"></a>FW_I2C_Get10BAddrH</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fw_si2c.o(i.FW_I2C_Get10BAddrH))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SI2C_Write
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SI2C_Read
</UL>

<P><STRONG><a name="[11c]"></a>FW_SI2C_Init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, fw_si2c.o(i.FW_SI2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FW_SI2C_Init &rArr; FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_si2c.o(.constdata)
</UL>
<P><STRONG><a name="[11e]"></a>FW_SI2C_Read</STRONG> (Thumb, 328 bytes, Stack size 56 bytes, fw_si2c.o(i.FW_SI2C_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = FW_SI2C_Read &rArr; SI2C_Write_Byte &rArr; SDA_OUT &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Us
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_Write_Byte
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_Stop
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_Start
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_Read_Byte
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_ACK
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_OUT
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_I2C_Get10BAddrH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_si2c.o(.constdata)
</UL>
<P><STRONG><a name="[11d]"></a>FW_SI2C_Write</STRONG> (Thumb, 170 bytes, Stack size 56 bytes, fw_si2c.o(i.FW_SI2C_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = FW_SI2C_Write &rArr; SI2C_Write_Byte &rArr; SDA_OUT &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_Write_Byte
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_Stop
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_Start
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_ACK
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_I2C_Get10BAddrH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_si2c.o(.constdata)
</UL>
<P><STRONG><a name="[1c6]"></a>SCL_OUT</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, fw_si2c.o(i.SCL_OUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SCL_OUT &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_Write_Byte
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_Stop
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_Start
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_Read_Byte
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_ACK
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SI2C_Read
</UL>

<P><STRONG><a name="[212]"></a>SDA_IN</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, fw_si2c.o(i.SDA_IN))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SDA_IN &rArr; GPIO_PinRead
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRead
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_Read_Byte
</UL>

<P><STRONG><a name="[1c7]"></a>SDA_OUT</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, fw_si2c.o(i.SDA_OUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SDA_OUT &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_Write_Byte
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_Stop
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_Start
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_Read_Byte
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_ACK
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SI2C_Read
</UL>

<P><STRONG><a name="[1c4]"></a>SI2C_ACK</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, fw_si2c.o(i.SI2C_ACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SI2C_ACK &rArr; SDA_OUT &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Us
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SI2C_Write
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SI2C_Read
</UL>

<P><STRONG><a name="[1c5]"></a>SI2C_Read_Byte</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, fw_si2c.o(i.SI2C_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SI2C_Read_Byte &rArr; SDA_OUT &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Us
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_IN
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_OUT
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SI2C_Read
</UL>

<P><STRONG><a name="[1c1]"></a>SI2C_Start</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, fw_si2c.o(i.SI2C_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SI2C_Start &rArr; SDA_OUT &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Us
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SI2C_Write
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SI2C_Read
</UL>

<P><STRONG><a name="[1c8]"></a>SI2C_Stop</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, fw_si2c.o(i.SI2C_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SI2C_Stop &rArr; SDA_OUT &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Us
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SI2C_Write
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SI2C_Read
</UL>

<P><STRONG><a name="[1c3]"></a>SI2C_Write_Byte</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, fw_si2c.o(i.SI2C_Write_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SI2C_Write_Byte &rArr; SDA_OUT &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Us
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SI2C_Write
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SI2C_Read
</UL>

<P><STRONG><a name="[205]"></a>FW_Device_GetDriver</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fw_timer.o(i.FW_Device_GetDriver))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Set_Frequency
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Set_DC
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Get_Frequency
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Get_DC
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_CTL
</UL>

<P><STRONG><a name="[204]"></a>FW_Device_GetParent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fw_timer.o(i.FW_Device_GetParent))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Set_Frequency
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Set_DC
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Get_Frequency
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Get_DC
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_CTL
</UL>

<P><STRONG><a name="[124]"></a>PWM_CTL</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, fw_timer.o(i.PWM_CTL))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PWM_CTL
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_timer.o(.constdata)
</UL>
<P><STRONG><a name="[123]"></a>PWM_Get_DC</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, fw_timer.o(i.PWM_Get_DC))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PWM_Get_DC
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_timer.o(.constdata)
</UL>
<P><STRONG><a name="[121]"></a>PWM_Get_Frequency</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, fw_timer.o(i.PWM_Get_Frequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PWM_Get_Frequency
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_timer.o(.constdata)
</UL>
<P><STRONG><a name="[11f]"></a>PWM_Init</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, fw_timer.o(i.PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PWM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_timer.o(.constdata)
</UL>
<P><STRONG><a name="[122]"></a>PWM_Set_DC</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, fw_timer.o(i.PWM_Set_DC))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PWM_Set_DC
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_timer.o(.constdata)
</UL>
<P><STRONG><a name="[120]"></a>PWM_Set_Frequency</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, fw_timer.o(i.PWM_Set_Frequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PWM_Set_Frequency
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_timer.o(.constdata)
</UL>
<P><STRONG><a name="[1a6]"></a>FW_GPIO_Init</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, fw_ow.o(i.FW_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_OW_WaitACK
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_OW_Reset
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_OW_Init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_OW_WriteByte
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_OW_ReadByte
</UL>

<P><STRONG><a name="[1ac]"></a>FW_GPIO_Read</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fw_ow.o(i.FW_GPIO_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FW_GPIO_Read &rArr; GPIO_PinRead
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRead
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_OW_WaitACK
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_OW_Init
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_OW_ReadByte
</UL>

<P><STRONG><a name="[1b9]"></a>FW_GPIO_Write</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, fw_ow.o(i.FW_GPIO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_OW_Reset
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_OW_Init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_OW_WriteByte
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_OW_ReadByte
</UL>

<P><STRONG><a name="[1bf]"></a>FW_OW_ReadByte</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, fw_ow.o(i.FW_OW_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = FW_OW_ReadByte &rArr; FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Us
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Read
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_OW_Read
</UL>

<P><STRONG><a name="[1c0]"></a>FW_OW_WriteByte</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, fw_ow.o(i.FW_OW_WriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = FW_OW_WriteByte &rArr; FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Us
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_OW_Write
</UL>

<P><STRONG><a name="[1e7]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, swm181_irqmux.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Connect
</UL>

<P><STRONG><a name="[23a]"></a>internal_alloc</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, mallocr.o(i.internal_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
