<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\Project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\Project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Sun Aug 18 21:59:53 2024
<BR><P>
<H3>Maximum Stack Usage =        212 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
IFlash_Write &rArr; MBlock_Write_SelfAlign &rArr; __aeabi_uidivmod
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[6]">FLASH_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">FLASH_IRQHandler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[89]">ADC1_Bus_Config</a> from ll_adc.o(i.ADC1_Bus_Config) referenced from ll_adc.o(Device_Table)
 <LI><a href="#[b]">ADC_COMP_IRQHandler</a> from ll_adc.o(i.ADC_COMP_IRQHandler) referenced from startup_py32f002xx.o(RESET)
 <LI><a href="#[66]">ADC_CTL</a> from ll_adc.o(i.ADC_CTL) referenced from ll_adc.o(.constdata)
 <LI><a href="#[67]">ADC_Calibration</a> from ll_adc.o(i.ADC_Calibration) referenced from ll_adc.o(.constdata)
 <LI><a href="#[6c]">ADC_Get_Clock</a> from ll_adc.o(i.ADC_Get_Clock) referenced from ll_adc.o(.constdata)
 <LI><a href="#[68]">ADC_Get_ConvTime</a> from ll_adc.o(i.ADC_Get_ConvTime) referenced from ll_adc.o(.constdata)
 <LI><a href="#[65]">ADC_Init</a> from ll_adc.o(i.ADC_Init) referenced from ll_adc.o(.constdata)
 <LI><a href="#[69]">ADC_Read</a> from ll_adc.o(i.ADC_Read) referenced from ll_adc.o(.constdata)
 <LI><a href="#[6b]">ADC_TempFormula</a> from ll_adc.o(i.ADC_TempFormula) referenced from ll_adc.o(.constdata)
 <LI><a href="#[6a]">ADC_VrefFormula</a> from ll_adc.o(i.ADC_VrefFormula) referenced from ll_adc.o(.constdata)
 <LI><a href="#[6d]">ADC_WDG_Config</a> from ll_adc.o(i.ADC_WDG_Config) referenced from ll_adc.o(.constdata)
 <LI><a href="#[3f]">Delay_Get_Clock</a> from ll_delay.o(i.Delay_Get_Clock) referenced from ll_delay.o(.constdata)
 <LI><a href="#[41]">Delay_Get_Counter</a> from ll_delay.o(i.Delay_Get_Counter) referenced from ll_delay.o(.constdata)
 <LI><a href="#[40]">Delay_Get_Reload</a> from ll_delay.o(i.Delay_Get_Reload) referenced from ll_delay.o(.constdata)
 <LI><a href="#[42]">Delay_Get_TickTime</a> from ll_delay.o(i.Delay_Get_TickTime) referenced from ll_delay.o(.constdata)
 <LI><a href="#[3e]">Delay_Init</a> from ll_delay.o(i.Delay_Init) referenced from ll_delay.o(.constdata)
 <LI><a href="#[8]">EXTI0_1_IRQHandler</a> from ll_exti.o(i.EXTI0_1_IRQHandler) referenced from startup_py32f002xx.o(RESET)
 <LI><a href="#[9]">EXTI2_3_IRQHandler</a> from ll_exti.o(i.EXTI2_3_IRQHandler) referenced from startup_py32f002xx.o(RESET)
 <LI><a href="#[a]">EXTI4_15_IRQHandler</a> from ll_exti.o(i.EXTI4_15_IRQHandler) referenced from startup_py32f002xx.o(RESET)
 <LI><a href="#[58]">EXTI_Attach_IRQ</a> from ll_exti.o(i.EXTI_Attach_IRQ) referenced from ll_exti.o(.constdata)
 <LI><a href="#[57]">EXTI_CTL</a> from ll_exti.o(i.EXTI_CTL) referenced from ll_exti.o(.constdata)
 <LI><a href="#[56]">EXTI_Init</a> from ll_exti.o(i.EXTI_Init) referenced from ll_exti.o(.constdata)
 <LI><a href="#[8c]">EXT_GPIO_Config</a> from hc595.o(i.EXT_GPIO_Config) referenced from hc595.o(Device_Table)
 <LI><a href="#[6]">FLASH_IRQHandler</a> from startup_py32f002xx.o(.text) referenced from startup_py32f002xx.o(RESET)
 <LI><a href="#[16]">FW_Delay_DefMs</a> from fw_delay.o(i.FW_Delay_DefMs) referenced from fw_delay.o(i.FW_Delay_Init)
 <LI><a href="#[8d]">FW_GPIO_Driver_Probe</a> from fw_gpio.o(i.FW_GPIO_Driver_Probe) referenced from fw_gpio.o(Device_Table)
 <LI><a href="#[18]">FW_GPIO_ToggleUseLAPI</a> from fw_gpio.o(i.FW_GPIO_ToggleUseLAPI) referenced from fw_gpio.o(i.FW_GPIO_Driver_Probe)
 <LI><a href="#[17]">FW_OS_Delay</a> from fw_os.o(i.FW_OS_Delay) referenced from fw_delay.o(i.FW_Delay_Init)
 <LI><a href="#[7f]">FW_SI2C_Init</a> from fw_si2c.o(i.FW_SI2C_Init) referenced from fw_si2c.o(.constdata)
 <LI><a href="#[81]">FW_SI2C_Read</a> from fw_si2c.o(i.FW_SI2C_Read) referenced from fw_si2c.o(.constdata)
 <LI><a href="#[80]">FW_SI2C_Write</a> from fw_si2c.o(i.FW_SI2C_Write) referenced from fw_si2c.o(.constdata)
 <LI><a href="#[23]">FW_SPI_CSIOSet</a> from fw_spi.o(i.FW_SPI_CSIOSet) referenced from fw_spi.o(i.FW_SPI_Init)
 <LI><a href="#[19]">FW_SPI_IH_RC</a> from fw_spi.o(i.FW_SPI_IH_RC) referenced from fw_spi.o(i.FW_SPI_Init)
 <LI><a href="#[1a]">FW_SPI_IH_RX</a> from fw_spi.o(i.FW_SPI_IH_RX) referenced from fw_spi.o(i.FW_SPI_Init)
 <LI><a href="#[1b]">FW_SPI_IH_TC</a> from fw_spi.o(i.FW_SPI_IH_TC) referenced from fw_spi.o(i.FW_SPI_Init)
 <LI><a href="#[1c]">FW_SPI_IH_TX</a> from fw_spi.o(i.FW_SPI_IH_TX) referenced from fw_spi.o(i.FW_SPI_Init)
 <LI><a href="#[22]">FW_SPI_ReadDMA</a> from fw_spi.o(i.FW_SPI_ReadDMA) referenced from fw_spi.o(i.FW_SPI_Init)
 <LI><a href="#[21]">FW_SPI_ReadINT</a> from fw_spi.o(i.FW_SPI_ReadINT) referenced from fw_spi.o(i.FW_SPI_Init)
 <LI><a href="#[20]">FW_SPI_ReadPOL</a> from fw_spi.o(i.FW_SPI_ReadPOL) referenced from fw_spi.o(i.FW_SPI_Init)
 <LI><a href="#[1f]">FW_SPI_WriteDMA</a> from fw_spi.o(i.FW_SPI_WriteDMA) referenced from fw_spi.o(i.FW_SPI_Init)
 <LI><a href="#[1e]">FW_SPI_WriteINT</a> from fw_spi.o(i.FW_SPI_WriteINT) referenced from fw_spi.o(i.FW_SPI_Init)
 <LI><a href="#[1d]">FW_SPI_WritePOL</a> from fw_spi.o(i.FW_SPI_WritePOL) referenced from fw_spi.o(i.FW_SPI_Init)
 <LI><a href="#[8b]">HC595_Config</a> from hc595.o(i.HC595_Config) referenced from hc595.o(Device_Table)
 <LI><a href="#[74]">HC595_Port_Init</a> from hc595.o(i.HC595_Port_Init) referenced from hc595.o(.constdata)
 <LI><a href="#[75]">HC595_Port_Write</a> from hc595.o(i.HC595_Port_Write) referenced from hc595.o(.constdata)
 <LI><a href="#[2]">HardFault_Handler</a> from py32f0xx_it.o(i.HardFault_Handler) referenced from startup_py32f002xx.o(RESET)
 <LI><a href="#[8a]">I2C1_Config</a> from ll_i2c.o(i.I2C1_Config) referenced from ll_i2c.o(Device_Table)
 <LI><a href="#[10]">I2C1_IRQHandler</a> from startup_py32f002xx.o(.text) referenced from startup_py32f002xx.o(RESET)
 <LI><a href="#[71]">I2C_CTL</a> from ll_i2c.o(i.I2C_CTL) referenced from ll_i2c.o(.constdata)
 <LI><a href="#[70]">I2C_Init</a> from ll_i2c.o(i.I2C_Init) referenced from ll_i2c.o(.constdata)
 <LI><a href="#[73]">I2C_Read</a> from ll_i2c.o(i.I2C_Read) referenced from ll_i2c.o(.constdata)
 <LI><a href="#[72]">I2C_Write</a> from ll_i2c.o(i.I2C_Write) referenced from ll_i2c.o(.constdata)
 <LI><a href="#[8e]">IFlash_Driver_Probe</a> from fw_flash.o(i.IFlash_Driver_Probe) referenced from fw_flash.o(Device_Table)
 <LI><a href="#[5e]">IFlash_Erase_Sector</a> from ll_flash.o(i.IFlash_Erase_Sector) referenced from ll_flash.o(.constdata)
 <LI><a href="#[5d]">IFlash_Get_CID</a> from ll_flash.o(i.IFlash_Get_CID) referenced from ll_flash.o(.constdata)
 <LI><a href="#[5c]">IFlash_Get_Main</a> from ll_flash.o(i.IFlash_Get_Main) referenced from ll_flash.o(.constdata)
 <LI><a href="#[5a]">IFlash_Get_SectorBase</a> from ll_flash.o(i.IFlash_Get_SectorBase) referenced from ll_flash.o(.constdata)
 <LI><a href="#[59]">IFlash_Get_SectorNum</a> from ll_flash.o(i.IFlash_Get_SectorNum) referenced from ll_flash.o(.constdata)
 <LI><a href="#[5b]">IFlash_Get_SectorSize</a> from ll_flash.o(i.IFlash_Get_SectorSize) referenced from ll_flash.o(.constdata)
 <LI><a href="#[60]">IFlash_Read</a> from ll_flash.o(i.IFlash_Read) referenced from ll_flash.o(.constdata)
 <LI><a href="#[2d]">IFlash_Read_Gran</a> from ll_flash.o(i.IFlash_Read_Gran) referenced from ll_flash.o(i.IFlash_Write)
 <LI><a href="#[5f]">IFlash_Write</a> from ll_flash.o(i.IFlash_Write) referenced from ll_flash.o(.constdata)
 <LI><a href="#[2c]">IFlash_Write_Gran</a> from ll_flash.o(i.IFlash_Write_Gran) referenced from ll_flash.o(i.IFlash_Write)
 <LI><a href="#[24]">ILock</a> from fw_system.o(i.ILock) referenced from fw_system.o(i.FW_System_Init)
 <LI><a href="#[2a]">IO_HC595_CTL</a> from hc595.o(i.IO_HC595_CTL) referenced from hc595.o(i.HC595_Port_Init)
 <LI><a href="#[29]">IO_HC595_Init</a> from hc595.o(i.IO_HC595_Init) referenced from hc595.o(i.HC595_Port_Init)
 <LI><a href="#[2b]">IO_HC595_Write</a> from hc595.o(i.IO_HC595_Write) referenced from hc595.o(i.HC595_Port_Init)
 <LI><a href="#[25]">IUnlock</a> from fw_system.o(i.IUnlock) referenced from fw_system.o(i.FW_System_Init)
 <LI><a href="#[8f]">IWDG_Driver_Probe</a> from fw_wdg.o(i.IWDG_Driver_Probe) referenced from fw_wdg.o(Device_Table)
 <LI><a href="#[62]">IWDG_FeedDog</a> from ll_wdg.o(i.IWDG_FeedDog) referenced from ll_wdg.o(.constdata)
 <LI><a href="#[63]">IWDG_Get_MaxTime</a> from ll_wdg.o(i.IWDG_Get_MaxTime) referenced from ll_wdg.o(.constdata)
 <LI><a href="#[64]">IWDG_Get_MinTime</a> from ll_wdg.o(i.IWDG_Get_MinTime) referenced from ll_wdg.o(.constdata)
 <LI><a href="#[61]">IWDG_Init</a> from ll_wdg.o(i.IWDG_Init) referenced from ll_wdg.o(.constdata)
 <LI><a href="#[e]">LPTIM1_IRQHandler</a> from startup_py32f002xx.o(.text) referenced from startup_py32f002xx.o(RESET)
 <LI><a href="#[93]">NLock</a> from fw_system.o(i.NLock) referenced from fw_system.o(.data)
 <LI><a href="#[1]">NMI_Handler</a> from ll_system.o(i.NMI_Handler) referenced from startup_py32f002xx.o(RESET)
 <LI><a href="#[94]">NUnlock</a> from fw_system.o(i.NUnlock) referenced from fw_system.o(.data)
 <LI><a href="#[6e]">PMU_Init</a> from ll_pmu.o(i.PMU_Init) referenced from ll_pmu.o(.constdata)
 <LI><a href="#[6f]">PMU_SetLPM</a> from ll_pmu.o(i.PMU_SetLPM) referenced from ll_pmu.o(.constdata)
 <LI><a href="#[87]">PWM_CTL</a> from fw_timer.o(i.PWM_CTL) referenced from fw_timer.o(.constdata)
 <LI><a href="#[86]">PWM_Get_DC</a> from fw_timer.o(i.PWM_Get_DC) referenced from fw_timer.o(.constdata)
 <LI><a href="#[84]">PWM_Get_Frequency</a> from fw_timer.o(i.PWM_Get_Frequency) referenced from fw_timer.o(.constdata)
 <LI><a href="#[82]">PWM_Init</a> from fw_timer.o(i.PWM_Init) referenced from fw_timer.o(.constdata)
 <LI><a href="#[85]">PWM_Set_DC</a> from fw_timer.o(i.PWM_Set_DC) referenced from fw_timer.o(.constdata)
 <LI><a href="#[83]">PWM_Set_Frequency</a> from fw_timer.o(i.PWM_Set_Frequency) referenced from fw_timer.o(.constdata)
 <LI><a href="#[4]">PendSV_Handler</a> from startup_py32f002xx.o(.text) referenced from startup_py32f002xx.o(RESET)
 <LI><a href="#[43]">Pin_DeInit</a> from ll_gpio.o(i.Pin_DeInit) referenced from ll_gpio.o(.constdata)
 <LI><a href="#[46]">Pin_GetOutput</a> from ll_gpio.o(i.Pin_GetOutput) referenced from ll_gpio.o(.constdata)
 <LI><a href="#[44]">Pin_Init</a> from ll_gpio.o(i.Pin_Init) referenced from ll_gpio.o(.constdata)
 <LI><a href="#[47]">Pin_Read</a> from ll_gpio.o(i.Pin_Read) referenced from ll_gpio.o(.constdata)
 <LI><a href="#[48]">Pin_Toggle</a> from ll_gpio.o(i.Pin_Toggle) referenced from ll_gpio.o(.constdata)
 <LI><a href="#[45]">Pin_Write</a> from ll_gpio.o(i.Pin_Write) referenced from ll_gpio.o(.constdata)
 <LI><a href="#[49]">Port_DeInit</a> from ll_gpio.o(i.Port_DeInit) referenced from ll_gpio.o(.constdata)
 <LI><a href="#[4b]">Port_GetOutput</a> from ll_gpio.o(i.Port_GetOutput) referenced from ll_gpio.o(.constdata)
 <LI><a href="#[4c]">Port_Read</a> from ll_gpio.o(i.Port_Read) referenced from ll_gpio.o(.constdata)
 <LI><a href="#[4a]">Port_Write</a> from ll_gpio.o(i.Port_Write) referenced from ll_gpio.o(.constdata)
 <LI><a href="#[7]">RCC_IRQHandler</a> from startup_py32f002xx.o(.text) referenced from startup_py32f002xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_py32f002xx.o(.text) referenced from startup_py32f002xx.o(RESET)
 <LI><a href="#[33]">SCK_CPOL0</a> from fw_sspi.o(i.SCK_CPOL0) referenced from fw_sspi.o(i.SSPI_Init)
 <LI><a href="#[31]">SCK_CPOL1</a> from fw_sspi.o(i.SCK_CPOL1) referenced from fw_sspi.o(i.SSPI_Init)
 <LI><a href="#[30]">SCK_FE</a> from fw_sspi.o(i.SCK_FE) referenced from fw_sspi.o(i.SSPI_Init)
 <LI><a href="#[32]">SCK_RE</a> from fw_sspi.o(i.SCK_RE) referenced from fw_sspi.o(i.SSPI_Init)
 <LI><a href="#[11]">SPI1_IRQHandler</a> from startup_py32f002xx.o(.text) referenced from startup_py32f002xx.o(RESET)
 <LI><a href="#[27]">SPI_HC595_CTL</a> from hc595.o(i.SPI_HC595_CTL) referenced from hc595.o(i.HC595_Port_Init)
 <LI><a href="#[26]">SPI_HC595_Init</a> from hc595.o(i.SPI_HC595_Init) referenced from hc595.o(i.HC595_Port_Init)
 <LI><a href="#[28]">SPI_HC595_Write</a> from hc595.o(i.SPI_HC595_Write) referenced from hc595.o(i.HC595_Port_Init)
 <LI><a href="#[7c]">SSPI_CS_Set</a> from fw_sspi.o(i.SSPI_CS_Set) referenced from fw_sspi.o(.constdata)
 <LI><a href="#[7a]">SSPI_DeInit</a> from fw_sspi.o(i.SSPI_DeInit) referenced from fw_sspi.o(.constdata)
 <LI><a href="#[7b]">SSPI_Init</a> from fw_sspi.o(i.SSPI_Init) referenced from fw_sspi.o(.constdata)
 <LI><a href="#[7e]">SSPI_Read</a> from fw_sspi.o(i.SSPI_Read) referenced from fw_sspi.o(.constdata)
 <LI><a href="#[7d]">SSPI_Write</a> from fw_sspi.o(i.SSPI_Write) referenced from fw_sspi.o(.constdata)
 <LI><a href="#[76]">SUART_Init</a> from fw_suart.o(i.SUART_Init) referenced from fw_suart.o(.constdata)
 <LI><a href="#[78]">SUART_RX_Byte</a> from fw_suart.o(i.SUART_RX_Byte) referenced from fw_suart.o(.constdata)
 <LI><a href="#[77]">SUART_TX_Byte</a> from fw_suart.o(i.SUART_TX_Byte) referenced from fw_suart.o(.constdata)
 <LI><a href="#[79]">SUART_Wait_RC</a> from fw_suart.o(i.SUART_Wait_RC) referenced from fw_suart.o(.constdata)
 <LI><a href="#[3]">SVC_Handler</a> from startup_py32f002xx.o(.text) referenced from startup_py32f002xx.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from ll_delay.o(i.SysTick_Handler) referenced from startup_py32f002xx.o(RESET)
 <LI><a href="#[14]">SystemInit</a> from system_py32f0xx.o(i.SystemInit) referenced from startup_py32f002xx.o(.text)
 <LI><a href="#[3d]">System_Clear_RSTSource</a> from ll_system.o(i.System_Clear_RSTSource) referenced from ll_system.o(.constdata)
 <LI><a href="#[35]">System_Disable_IRQ</a> from ll_system.o(i.System_Disable_IRQ) referenced from ll_system.o(.constdata)
 <LI><a href="#[36]">System_Enable_IRQ</a> from ll_system.o(i.System_Enable_IRQ) referenced from ll_system.o(.constdata)
 <LI><a href="#[37]">System_Get_IRQState</a> from ll_system.o(i.System_Get_IRQState) referenced from ll_system.o(.constdata)
 <LI><a href="#[3c]">System_Get_RSTSource</a> from ll_system.o(i.System_Get_RSTSource) referenced from ll_system.o(.constdata)
 <LI><a href="#[39]">System_Get_Sysclk</a> from ll_system.o(i.System_Get_Sysclk) referenced from ll_system.o(.constdata)
 <LI><a href="#[34]">System_Init</a> from ll_system.o(i.System_Init) referenced from ll_system.o(.constdata)
 <LI><a href="#[38]">System_Set_Sysclk</a> from ll_system.o(i.System_Set_Sysclk) referenced from ll_system.o(.constdata)
 <LI><a href="#[3a]">System_Set_VectorTable</a> from ll_system.o(i.System_Set_VectorTable) referenced from ll_system.o(.constdata)
 <LI><a href="#[3b]">System_Soft_Reset</a> from ll_system.o(i.System_Soft_Reset) referenced from ll_system.o(.constdata)
 <LI><a href="#[f]">TIM16_IRQHandler</a> from startup_py32f002xx.o(.text) referenced from startup_py32f002xx.o(RESET)
 <LI><a href="#[c]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from startup_py32f002xx.o(.text) referenced from startup_py32f002xx.o(RESET)
 <LI><a href="#[d]">TIM1_CC_IRQHandler</a> from startup_py32f002xx.o(.text) referenced from startup_py32f002xx.o(RESET)
 <LI><a href="#[2f]">TRByte_LSB</a> from fw_sspi.o(i.TRByte_LSB) referenced from fw_sspi.o(i.SSPI_Init)
 <LI><a href="#[2e]">TRByte_MSB</a> from fw_sspi.o(i.TRByte_MSB) referenced from fw_sspi.o(i.SSPI_Init)
 <LI><a href="#[4f]">UART_CTL</a> from ll_uart.o(i.UART_CTL) referenced from ll_uart.o(.constdata)
 <LI><a href="#[4d]">UART_DeInit</a> from ll_uart.o(i.UART_DeInit) referenced from ll_uart.o(.constdata)
 <LI><a href="#[4e]">UART_Init</a> from ll_uart.o(i.UART_Init) referenced from ll_uart.o(.constdata)
 <LI><a href="#[53]">UART_RX_Byte</a> from ll_uart.o(i.UART_RX_Byte) referenced from ll_uart.o(.constdata)
 <LI><a href="#[51]">UART_RX_CTL</a> from ll_uart.o(i.UART_RX_CTL) referenced from ll_uart.o(.constdata)
 <LI><a href="#[52]">UART_TX_Byte</a> from ll_uart.o(i.UART_TX_Byte) referenced from ll_uart.o(.constdata)
 <LI><a href="#[50]">UART_TX_CTL</a> from ll_uart.o(i.UART_TX_CTL) referenced from ll_uart.o(.constdata)
 <LI><a href="#[55]">UART_Wait_RC</a> from ll_uart.o(i.UART_Wait_RC) referenced from ll_uart.o(.constdata)
 <LI><a href="#[54]">UART_Wait_TC</a> from ll_uart.o(i.UART_Wait_TC) referenced from ll_uart.o(.constdata)
 <LI><a href="#[88]">USART1_Config</a> from ll_uart.o(i.USART1_Config) referenced from ll_uart.o(Device_Table)
 <LI><a href="#[12]">USART1_IRQHandler</a> from ll_uart.o(i.USART1_IRQHandler) referenced from startup_py32f002xx.o(RESET)
 <LI><a href="#[90]">WWDG_Driver_Probe</a> from fw_wdg.o(i.WWDG_Driver_Probe) referenced from fw_wdg.o(Device_Table)
 <LI><a href="#[15]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_py32f002xx.o(.text)
 <LI><a href="#[92]">free</a> from malloc.o(i.free) referenced from mm.o(.data)
 <LI><a href="#[13]">main</a> from fw_startup.o(i.$Sub$$main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[91]">malloc</a> from malloc.o(i.malloc) referenced 2 times from mm.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[15]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f002xx.o(.text)
</UL>
<P><STRONG><a name="[112]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[95]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[9a]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[113]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[114]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[115]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[116]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[117]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[102]"></a>__asm___11_ll_system_c_bb8ca80c__A_System_Get_IRQState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ll_system.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Get_IRQState
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_py32f002xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f002xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_py32f002xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f002xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_py32f002xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f002xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f002xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f002xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f002xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f002xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f002xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f002xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f002xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f002xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f002xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f002xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f002xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f002xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f002xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f002xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f002xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f002xx.o(RESET)
</UL>
<P><STRONG><a name="[118]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[a8]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin_Init
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_RoughMs
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_VrefFormula
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TempFormula
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Get_ConvTime
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBlock_Write_SelfAlign
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Write
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_OS_Delay
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_GetUsDuration
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_DefMs
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUART_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SI2C_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPI_Init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_ConfigSpeed
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetBaudRate
</UL>

<P><STRONG><a name="[ee]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_Read_Gran
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBlock_Write_SelfAlign
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Write
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read
</UL>

<P><STRONG><a name="[da]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_Init
</UL>

<P><STRONG><a name="[119]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[11a]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[11b]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGTR_Config
</UL>

<P><STRONG><a name="[f8]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin_Init
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin_DeInit
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGTR_DeInit
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGTR_Config
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPI_DeInit
</UL>

<P><STRONG><a name="[11c]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[99]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[bf]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_PreBind
</UL>

<P><STRONG><a name="[a9]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DeInit
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Driver_Find
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_Find
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_PreBind
</UL>

<P><STRONG><a name="[96]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[11d]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[13]"></a>main</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, fw_startup.o(i.$Sub$$main))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = main &rArr; FW_Delay_Init &rArr; FW_Delay_GetUsDuration &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_System_Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_PreInit
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_PreBind
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[b]"></a>ADC_COMP_IRQHandler</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, ll_adc.o(i.ADC_COMP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_COMP_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_ADC_Bus_SC_IH
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_ADC_Bus_IH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f002xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ll_exti.o(i.EXTI0_1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI0_1_IRQHandler &rArr; EXTI_IRQHandler &rArr; FW_EXTI_IH_ISR
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f002xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ll_exti.o(i.EXTI2_3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI2_3_IRQHandler &rArr; EXTI_IRQHandler &rArr; FW_EXTI_IH_ISR
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f002xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, ll_exti.o(i.EXTI4_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI4_15_IRQHandler &rArr; EXTI_IRQHandler &rArr; FW_EXTI_IH_ISR
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f002xx.o(RESET)
</UL>
<P><STRONG><a name="[b5]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, py32f0xx_hal_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_WaitForLastOperation &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Erase
</UL>

<P><STRONG><a name="[ad]"></a>FW_ADC_Bus_GetFS</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fw_adc.o(i.FW_ADC_Bus_GetFS))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_VrefFormula
</UL>

<P><STRONG><a name="[a0]"></a>FW_ADC_Bus_IH</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fw_adc.o(i.FW_ADC_Bus_IH))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_COMP_IRQHandler
</UL>

<P><STRONG><a name="[a1]"></a>FW_ADC_Bus_SC_IH</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fw_adc.o(i.FW_ADC_Bus_SC_IH))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_COMP_IRQHandler
</UL>

<P><STRONG><a name="[aa]"></a>FW_ADC_Bus_SetPort</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fw_adc.o(i.FW_ADC_Bus_SetPort))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[e5]"></a>FW_Delay_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fw_delay.o(i.FW_Delay_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[b7]"></a>FW_Delay_GetUsDuration</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, fw_delay.o(i.FW_Delay_GetUsDuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = FW_Delay_GetUsDuration &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Init
</UL>

<P><STRONG><a name="[b9]"></a>FW_Delay_GetUsStart</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, fw_delay.o(i.FW_Delay_GetUsStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FW_Delay_GetUsStart
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Init
</UL>

<P><STRONG><a name="[9c]"></a>FW_Delay_Init</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, fw_delay.o(i.FW_Delay_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = FW_Delay_Init &rArr; FW_Delay_GetUsDuration &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Driver_Find
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Us
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_OS_IsStart
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_OS_GetTickTime
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_GetUsStart
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_GetUsDuration
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ac]"></a>FW_Delay_Ms</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fw_delay.o(i.FW_Delay_Ms))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[a4]"></a>FW_Delay_RoughMs</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, fw_delay.o(i.FW_Delay_RoughMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FW_Delay_RoughMs &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_System_GetSysclk
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Calibration
</UL>

<P><STRONG><a name="[101]"></a>FW_Delay_TickTock</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fw_delay.o(i.FW_Delay_TickTock))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[ba]"></a>FW_Delay_Us</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, fw_delay.o(i.FW_Delay_Us))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FW_Delay_Us
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_HC595_Write
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUART_TX_Byte
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUART_RX_Byte
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_Write_Byte
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_Stop
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_Start
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_Read_Byte
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_ACK
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SI2C_Read
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCK_RE
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCK_FE
</UL>

<P><STRONG><a name="[b3]"></a>FW_Device_Find</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, fw_device.o(i.FW_Device_Find))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = FW_Device_Find &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SEI
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SDI
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC595_Port_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_GPIO_Config
</UL>

<P><STRONG><a name="[9d]"></a>FW_Device_PreBind</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, fw_device.o(i.FW_Device_PreBind))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = FW_Device_PreBind &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9e]"></a>FW_Device_PreInit</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, fw_device.o(i.FW_Device_PreInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FW_Device_PreInit
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b4]"></a>FW_Driver_Find</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, fw_driver.o(i.FW_Driver_Find))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = FW_Driver_Find &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_GPIO_Config
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Driver_Probe
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_System_Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_Driver_Probe
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Driver_Probe
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_Driver_Probe
</UL>

<P><STRONG><a name="[b0]"></a>FW_EXTI_IH_ISR</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fw_exti.o(i.FW_EXTI_IH_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FW_EXTI_IH_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_IRQHandler
</UL>

<P><STRONG><a name="[e8]"></a>FW_I2C_GetTRM</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fw_i2c.o(i.FW_I2C_GetTRM))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
</UL>

<P><STRONG><a name="[e6]"></a>FW_I2C_SetPort</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fw_i2c.o(i.FW_I2C_SetPort))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
</UL>

<P><STRONG><a name="[a3]"></a>FW_Lock</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fw_system.o(i.FW_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Calibration
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Write
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_PMB_Write
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_PMB_Set
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Get_DataLength
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_IH_TX
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_IH_TC
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_IH_RX
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_IH_RC
</UL>

<P><STRONG><a name="[17]"></a>FW_OS_Delay</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fw_os.o(i.FW_OS_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FW_OS_Delay &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_delay.o(i.FW_Delay_Init)
</UL>
<P><STRONG><a name="[bb]"></a>FW_OS_GetTickTime</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fw_os.o(i.FW_OS_GetTickTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FW_OS_GetTickTime
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Init
</UL>

<P><STRONG><a name="[b8]"></a>FW_OS_IsStart</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fw_os.o(i.FW_OS_IsStart))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Init
</UL>

<P><STRONG><a name="[bd]"></a>FW_SDI</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fw_system.o(i.FW_SDI))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_Find
</UL>

<P><STRONG><a name="[be]"></a>FW_SEI</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fw_system.o(i.FW_SEI))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_Find
</UL>

<P><STRONG><a name="[ff]"></a>FW_SPI_CSSet</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fw_spi.o(i.FW_SPI_CSSet))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_HC595_Write
</UL>

<P><STRONG><a name="[d8]"></a>FW_SPI_Init</STRONG> (Thumb, 146 bytes, Stack size 112 bytes, fw_spi.o(i.FW_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = FW_SPI_Init &rArr; SGTR_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGTR_DeInit
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGTR_Config
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_HC595_Init
</UL>

<P><STRONG><a name="[100]"></a>FW_SPI_Write</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fw_spi.o(i.FW_SPI_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FW_SPI_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_HC595_Write
</UL>

<P><STRONG><a name="[bc]"></a>FW_System_GetSysclk</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fw_system.o(i.FW_System_GetSysclk))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_RoughMs
</UL>

<P><STRONG><a name="[9b]"></a>FW_System_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fw_system.o(i.FW_System_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = FW_System_Init &rArr; FW_Driver_Find &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Driver_Find
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[110]"></a>FW_UART_GetTRM</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fw_uart.o(i.FW_UART_GetTRM))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TX_CTL
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RX_CTL
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[10d]"></a>FW_UART_RC_ISR</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fw_uart.o(i.FW_UART_RC_ISR))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRQHandler
</UL>

<P><STRONG><a name="[10c]"></a>FW_UART_RX_ISR</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fw_uart.o(i.FW_UART_RX_ISR))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRQHandler
</UL>

<P><STRONG><a name="[108]"></a>FW_UART_SetPort</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fw_uart.o(i.FW_UART_SetPort))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DeInit
</UL>

<P><STRONG><a name="[10f]"></a>FW_UART_TC_ISR</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fw_uart.o(i.FW_UART_TC_ISR))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRQHandler
</UL>

<P><STRONG><a name="[10e]"></a>FW_UART_TX_ISR</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fw_uart.o(i.FW_UART_TX_ISR))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRQHandler
</UL>

<P><STRONG><a name="[a5]"></a>FW_Unlock</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fw_system.o(i.FW_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Calibration
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Write
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_PMB_Write
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_PMB_Set
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Get_DataLength
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_IH_TX
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_IH_TC
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_IH_RX
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_IH_RC
</UL>

<P><STRONG><a name="[c1]"></a>GPIO_PinInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fw_gpio.o(i.GPIO_PinInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_PinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
</UL>

<P><STRONG><a name="[fe]"></a>GPIO_PinRead</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fw_gpio.o(i.GPIO_PinRead))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUART_Wait_RC
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUART_RX_Byte
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_Read_Byte
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRByte_MSB
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRByte_LSB
</UL>

<P><STRONG><a name="[c9]"></a>GPIO_PinWrite</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fw_gpio.o(i.GPIO_PinWrite))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_CSIOSet
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
</UL>

<P><STRONG><a name="[106]"></a>GPIO_PortInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fw_gpio.o(i.GPIO_PortInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_PortInit
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test
</UL>

<P><STRONG><a name="[107]"></a>GPIO_PortWrite</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fw_gpio.o(i.GPIO_PortWrite))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test
</UL>

<P><STRONG><a name="[df]"></a>HAL_FLASH_Erase</STRONG> (Thumb, 404 bytes, Stack size 24 bytes, py32f0xx_hal_flash.o(i.HAL_FLASH_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_FLASH_Erase &rArr; FLASH_WaitForLastOperation &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SectorErase
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PageErase
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_MassErase
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_Erase_Sector
</UL>

<P><STRONG><a name="[ed]"></a>HAL_FLASH_Lock</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, py32f0xx_hal_flash.o(i.HAL_FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_Write
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_Erase_Sector
</UL>

<P><STRONG><a name="[e3]"></a>HAL_FLASH_Program</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, py32f0xx_hal_flash.o(i.HAL_FLASH_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_Page
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_Write_Gran
</UL>

<P><STRONG><a name="[ec]"></a>HAL_FLASH_Unlock</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, py32f0xx_hal_flash.o(i.HAL_FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_Write
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_Erase_Sector
</UL>

<P><STRONG><a name="[b6]"></a>HAL_GetTick</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ll_delay.o(i.HAL_GetTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, py32f0xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f002xx.o(RESET)
</UL>
<P><STRONG><a name="[ab]"></a>LL_ADC_DeInit</STRONG> (Thumb, 236 bytes, Stack size 12 bytes, py32f0xx_ll_adc.o(i.LL_ADC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_ADC_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[b1]"></a>LL_EXTI_Init</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, py32f0xx_ll_exti.o(i.LL_EXTI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
</UL>

<P><STRONG><a name="[f9]"></a>LL_GPIO_Init</STRONG> (Thumb, 168 bytes, Stack size 20 bytes, py32f0xx_ll_gpio.o(i.LL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin_Init
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin_DeInit
</UL>

<P><STRONG><a name="[e7]"></a>LL_GPIO_PinAFConfig</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, ll_gpio.o(i.LL_GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LL_GPIO_PinAFConfig &rArr; LL_IOP_GRP1_EnableClock
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IOP_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IO_Init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
</UL>

<P><STRONG><a name="[e9]"></a>LL_I2C_Init</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, py32f0xx_ll_i2c.o(i.LL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = LL_I2C_Init &rArr; LL_I2C_ConfigSpeed &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_ConfigSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
</UL>

<P><STRONG><a name="[103]"></a>LL_RCC_DeInit</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, py32f0xx_ll_rcc.o(i.LL_RCC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_RCC_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[f2]"></a>LL_RCC_GetSystemClocksFreq</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, py32f0xx_ll_rcc.o(i.LL_RCC_GetSystemClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LL_RCC_GetSystemClocksFreq &rArr; RCC_GetSystemClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK1ClockFreq
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetHCLKClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_Init
</UL>

<P><STRONG><a name="[104]"></a>LL_SetSystemCoreClock</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, py32f0xx_ll_utils.o(i.LL_SetSystemCoreClock))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[109]"></a>LL_USART_DeInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, py32f0xx_ll_usart.o(i.LL_USART_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DeInit
</UL>

<P><STRONG><a name="[f6]"></a>LL_USART_Init</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, py32f0xx_ll_usart.o(i.LL_USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LL_USART_Init &rArr; LL_RCC_GetSystemClocksFreq &rArr; RCC_GetSystemClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetBaudRate
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[ef]"></a>MBlock_Write_SelfAlign</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, mblock.o(i.MBlock_Write_SelfAlign))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = MBlock_Write_SelfAlign &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_Write
</UL>

<P><STRONG><a name="[fd]"></a>MM_Free</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mm.o(i.MM_Free))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGTR_Config
</UL>

<P><STRONG><a name="[fc]"></a>MM_Malloc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mm.o(i.MM_Malloc))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGTR_Config
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ll_system.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f002xx.o(RESET)
</UL>
<P><STRONG><a name="[fb]"></a>RB_Get_BufferSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rbuffer.o(i.RB_Get_BufferSize))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Write
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Get_DataLength
</UL>

<P><STRONG><a name="[d6]"></a>RB_Get_DataLength</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, rbuffer.o(i.RB_Get_DataLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RB_Get_DataLength
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Unlock
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Lock
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Get_BufferSize
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Write
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_WriteINT
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_ReadINT
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_IH_TC
</UL>

<P><STRONG><a name="[dc]"></a>RB_PMB_Set</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, rbuffer.o(i.RB_PMB_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RB_PMB_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Unlock
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_ReadINT
</UL>

<P><STRONG><a name="[dd]"></a>RB_PMB_Write</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, rbuffer.o(i.RB_PMB_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RB_PMB_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Unlock
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_WriteINT
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_ReadINT
</UL>

<P><STRONG><a name="[d7]"></a>RB_Read</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, rbuffer.o(i.RB_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RB_Read &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Unlock
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Lock
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Get_DataLength
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Get_BufferSize
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_IH_TX
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_IH_TC
</UL>

<P><STRONG><a name="[d5]"></a>RB_Write</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, rbuffer.o(i.RB_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = RB_Write &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Unlock
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Lock
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Get_DataLength
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Get_BufferSize
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_IH_RX
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_IH_RC
</UL>

<P><STRONG><a name="[f4]"></a>RCC_GetHCLKClockFreq</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, py32f0xx_ll_rcc.o(i.RCC_GetHCLKClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
</UL>

<P><STRONG><a name="[f5]"></a>RCC_GetPCLK1ClockFreq</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, py32f0xx_ll_rcc.o(i.RCC_GetPCLK1ClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
</UL>

<P><STRONG><a name="[f3]"></a>RCC_GetSystemClockFreq</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, py32f0xx_ll_rcc.o(i.RCC_GetSystemClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_GetSystemClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
</UL>

<P><STRONG><a name="[db]"></a>SGTR_Config</STRONG> (Thumb, 1020 bytes, Stack size 24 bytes, serial.o(i.SGTR_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SGTR_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MM_Malloc
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MM_Free
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_Init
</UL>

<P><STRONG><a name="[d9]"></a>SGTR_DeInit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, serial.o(i.SGTR_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SGTR_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_Init
</UL>

<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ll_delay.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_TickTock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f002xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>SystemInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, system_py32f0xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f002xx.o(.text)
</UL>
<P><STRONG><a name="[105]"></a>Test</STRONG> (Thumb, 388 bytes, Stack size 8 bytes, hc595.o(i.Test))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Test &rArr; FW_Device_Find &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Ms
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortWrite
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortInit
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_Find
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[12]"></a>USART1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ll_uart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_IRQHandler &rArr; UART_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f002xx.o(RESET)
</UL>
<P><STRONG><a name="[fa]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ll_gpio.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin_Init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test
</UL>

<P><STRONG><a name="[11e]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[11f]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[120]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[92]"></a>free</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mm.o(.data)
</UL>
<P><STRONG><a name="[9f]"></a>$Super$$main</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = $Super$$main &rArr; Test &rArr; FW_Device_Find &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[91]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mm.o(.data)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[3d]"></a>System_Clear_RSTSource</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ll_system.o(i.System_Clear_RSTSource))
<BR>[Address Reference Count : 1]<UL><LI> ll_system.o(.constdata)
</UL>
<P><STRONG><a name="[35]"></a>System_Disable_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ll_system.o(i.System_Disable_IRQ))
<BR>[Address Reference Count : 1]<UL><LI> ll_system.o(.constdata)
</UL>
<P><STRONG><a name="[36]"></a>System_Enable_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ll_system.o(i.System_Enable_IRQ))
<BR>[Address Reference Count : 1]<UL><LI> ll_system.o(.constdata)
</UL>
<P><STRONG><a name="[37]"></a>System_Get_IRQState</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ll_system.o(i.System_Get_IRQState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = System_Get_IRQState
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_ll_system_c_bb8ca80c__A_System_Get_IRQState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_system.o(.constdata)
</UL>
<P><STRONG><a name="[3c]"></a>System_Get_RSTSource</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, ll_system.o(i.System_Get_RSTSource))
<BR>[Address Reference Count : 1]<UL><LI> ll_system.o(.constdata)
</UL>
<P><STRONG><a name="[39]"></a>System_Get_Sysclk</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ll_system.o(i.System_Get_Sysclk))
<BR>[Address Reference Count : 1]<UL><LI> ll_system.o(.constdata)
</UL>
<P><STRONG><a name="[34]"></a>System_Init</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, ll_system.o(i.System_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = System_Init &rArr; LL_RCC_GetSystemClocksFreq &rArr; RCC_GetSystemClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetSystemCoreClock
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_system.o(.constdata)
</UL>
<P><STRONG><a name="[38]"></a>System_Set_Sysclk</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ll_system.o(i.System_Set_Sysclk))
<BR>[Address Reference Count : 1]<UL><LI> ll_system.o(.constdata)
</UL>
<P><STRONG><a name="[3a]"></a>System_Set_VectorTable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ll_system.o(i.System_Set_VectorTable))
<BR>[Address Reference Count : 1]<UL><LI> ll_system.o(.constdata)
</UL>
<P><STRONG><a name="[3b]"></a>System_Soft_Reset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ll_system.o(i.System_Soft_Reset))
<BR>[Address Reference Count : 1]<UL><LI> ll_system.o(.constdata)
</UL>
<P><STRONG><a name="[3f]"></a>Delay_Get_Clock</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ll_delay.o(i.Delay_Get_Clock))
<BR>[Address Reference Count : 1]<UL><LI> ll_delay.o(.constdata)
</UL>
<P><STRONG><a name="[41]"></a>Delay_Get_Counter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ll_delay.o(i.Delay_Get_Counter))
<BR>[Address Reference Count : 1]<UL><LI> ll_delay.o(.constdata)
</UL>
<P><STRONG><a name="[40]"></a>Delay_Get_Reload</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ll_delay.o(i.Delay_Get_Reload))
<BR>[Address Reference Count : 1]<UL><LI> ll_delay.o(.constdata)
</UL>
<P><STRONG><a name="[42]"></a>Delay_Get_TickTime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ll_delay.o(i.Delay_Get_TickTime))
<BR>[Address Reference Count : 1]<UL><LI> ll_delay.o(.constdata)
</UL>
<P><STRONG><a name="[3e]"></a>Delay_Init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ll_delay.o(i.Delay_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Delay_Init &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_delay.o(.constdata)
</UL>
<P><STRONG><a name="[ae]"></a>NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, ll_delay.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Init
</UL>

<P><STRONG><a name="[f0]"></a>LL_IOP_GRP1_EnableClock</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ll_gpio.o(i.LL_IOP_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_IOP_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_PinAFConfig
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin_Init
</UL>

<P><STRONG><a name="[43]"></a>Pin_DeInit</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, ll_gpio.o(i.Pin_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Pin_DeInit &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[46]"></a>Pin_GetOutput</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ll_gpio.o(i.Pin_GetOutput))
<BR>[Address Reference Count : 1]<UL><LI> ll_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[44]"></a>Pin_Init</STRONG> (Thumb, 342 bytes, Stack size 64 bytes, ll_gpio.o(i.Pin_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Pin_Init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IOP_GRP1_EnableClock
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[47]"></a>Pin_Read</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ll_gpio.o(i.Pin_Read))
<BR>[Address Reference Count : 1]<UL><LI> ll_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[48]"></a>Pin_Toggle</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ll_gpio.o(i.Pin_Toggle))
<BR>[Address Reference Count : 1]<UL><LI> ll_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[45]"></a>Pin_Write</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ll_gpio.o(i.Pin_Write))
<BR>[Address Reference Count : 1]<UL><LI> ll_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[49]"></a>Port_DeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ll_gpio.o(i.Port_DeInit))
<BR>[Address Reference Count : 1]<UL><LI> ll_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[4b]"></a>Port_GetOutput</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ll_gpio.o(i.Port_GetOutput))
<BR>[Address Reference Count : 1]<UL><LI> ll_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[4c]"></a>Port_Read</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ll_gpio.o(i.Port_Read))
<BR>[Address Reference Count : 1]<UL><LI> ll_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[4a]"></a>Port_Write</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ll_gpio.o(i.Port_Write))
<BR>[Address Reference Count : 1]<UL><LI> ll_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[c0]"></a>FW_GPIO_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ll_uart.o(i.FW_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IO_Init
</UL>

<P><STRONG><a name="[111]"></a>NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, ll_uart.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[4f]"></a>UART_CTL</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ll_uart.o(i.UART_CTL))
<BR>[Address Reference Count : 1]<UL><LI> ll_uart.o(.constdata)
</UL>
<P><STRONG><a name="[4d]"></a>UART_DeInit</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ll_uart.o(i.UART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UART_DeInit &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_DeInit
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_SetPort
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_uart.o(.constdata)
</UL>
<P><STRONG><a name="[10a]"></a>UART_IO_Init</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, ll_uart.o(i.UART_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_IO_Init &rArr; LL_GPIO_PinAFConfig &rArr; LL_IOP_GRP1_EnableClock
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[10b]"></a>UART_IRQHandler</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, ll_uart.o(i.UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_TX_ISR
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_TC_ISR
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_RX_ISR
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_RC_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[4e]"></a>UART_Init</STRONG> (Thumb, 234 bytes, Stack size 56 bytes, ll_uart.o(i.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = UART_Init &rArr; LL_USART_Init &rArr; LL_RCC_GetSystemClocksFreq &rArr; RCC_GetSystemClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_SetPort
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_GetTRM
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IO_Init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_uart.o(.constdata)
</UL>
<P><STRONG><a name="[53]"></a>UART_RX_Byte</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ll_uart.o(i.UART_RX_Byte))
<BR>[Address Reference Count : 1]<UL><LI> ll_uart.o(.constdata)
</UL>
<P><STRONG><a name="[51]"></a>UART_RX_CTL</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ll_uart.o(i.UART_RX_CTL))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_RX_CTL
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_GetTRM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_uart.o(.constdata)
</UL>
<P><STRONG><a name="[52]"></a>UART_TX_Byte</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ll_uart.o(i.UART_TX_Byte))
<BR>[Address Reference Count : 1]<UL><LI> ll_uart.o(.constdata)
</UL>
<P><STRONG><a name="[50]"></a>UART_TX_CTL</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ll_uart.o(i.UART_TX_CTL))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_TX_CTL
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_GetTRM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_uart.o(.constdata)
</UL>
<P><STRONG><a name="[55]"></a>UART_Wait_RC</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ll_uart.o(i.UART_Wait_RC))
<BR>[Address Reference Count : 1]<UL><LI> ll_uart.o(.constdata)
</UL>
<P><STRONG><a name="[54]"></a>UART_Wait_TC</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ll_uart.o(i.UART_Wait_TC))
<BR>[Address Reference Count : 1]<UL><LI> ll_uart.o(.constdata)
</UL>
<P><STRONG><a name="[88]"></a>USART1_Config</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ll_uart.o(i.USART1_Config))
<BR>[Address Reference Count : 1]<UL><LI> ll_uart.o(Device_Table)
</UL>
<P><STRONG><a name="[58]"></a>EXTI_Attach_IRQ</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ll_exti.o(i.EXTI_Attach_IRQ))
<BR>[Address Reference Count : 1]<UL><LI> ll_exti.o(.constdata)
</UL>
<P><STRONG><a name="[57]"></a>EXTI_CTL</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ll_exti.o(i.EXTI_CTL))
<BR>[Address Reference Count : 1]<UL><LI> ll_exti.o(.constdata)
</UL>
<P><STRONG><a name="[af]"></a>EXTI_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ll_exti.o(i.EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI_IRQHandler &rArr; FW_EXTI_IH_ISR
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_EXTI_IH_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_3_IRQHandler
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_1_IRQHandler
</UL>

<P><STRONG><a name="[56]"></a>EXTI_Init</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, ll_exti.o(i.EXTI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI_Init &rArr; LL_EXTI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIx_IRQn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_exti.o(.constdata)
</UL>
<P><STRONG><a name="[b2]"></a>EXTIx_IRQn</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ll_exti.o(i.EXTIx_IRQn))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
</UL>

<P><STRONG><a name="[5e]"></a>IFlash_Erase_Sector</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, ll_flash.o(i.IFlash_Erase_Sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = IFlash_Erase_Sector &rArr; HAL_FLASH_Erase &rArr; FLASH_WaitForLastOperation &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Erase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_flash.o(.constdata)
</UL>
<P><STRONG><a name="[5d]"></a>IFlash_Get_CID</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ll_flash.o(i.IFlash_Get_CID))
<BR>[Address Reference Count : 1]<UL><LI> ll_flash.o(.constdata)
</UL>
<P><STRONG><a name="[5c]"></a>IFlash_Get_Main</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ll_flash.o(i.IFlash_Get_Main))
<BR>[Address Reference Count : 1]<UL><LI> ll_flash.o(.constdata)
</UL>
<P><STRONG><a name="[5a]"></a>IFlash_Get_SectorBase</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ll_flash.o(i.IFlash_Get_SectorBase))
<BR>[Address Reference Count : 1]<UL><LI> ll_flash.o(.constdata)
</UL>
<P><STRONG><a name="[59]"></a>IFlash_Get_SectorNum</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ll_flash.o(i.IFlash_Get_SectorNum))
<BR>[Address Reference Count : 1]<UL><LI> ll_flash.o(.constdata)
</UL>
<P><STRONG><a name="[5b]"></a>IFlash_Get_SectorSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ll_flash.o(i.IFlash_Get_SectorSize))
<BR>[Address Reference Count : 1]<UL><LI> ll_flash.o(.constdata)
</UL>
<P><STRONG><a name="[60]"></a>IFlash_Read</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ll_flash.o(i.IFlash_Read))
<BR>[Address Reference Count : 1]<UL><LI> ll_flash.o(.constdata)
</UL>
<P><STRONG><a name="[2d]"></a>IFlash_Read_Gran</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ll_flash.o(i.IFlash_Read_Gran))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IFlash_Read_Gran
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_flash.o(i.IFlash_Write)
</UL>
<P><STRONG><a name="[5f]"></a>IFlash_Write</STRONG> (Thumb, 58 bytes, Stack size 160 bytes, ll_flash.o(i.IFlash_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = IFlash_Write &rArr; MBlock_Write_SelfAlign &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBlock_Write_SelfAlign
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_flash.o(.constdata)
</UL>
<P><STRONG><a name="[2c]"></a>IFlash_Write_Gran</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ll_flash.o(i.IFlash_Write_Gran))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = IFlash_Write_Gran &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_flash.o(i.IFlash_Write)
</UL>
<P><STRONG><a name="[62]"></a>IWDG_FeedDog</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ll_wdg.o(i.IWDG_FeedDog))
<BR>[Address Reference Count : 1]<UL><LI> ll_wdg.o(.constdata)
</UL>
<P><STRONG><a name="[63]"></a>IWDG_Get_MaxTime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ll_wdg.o(i.IWDG_Get_MaxTime))
<BR>[Address Reference Count : 1]<UL><LI> ll_wdg.o(.constdata)
</UL>
<P><STRONG><a name="[64]"></a>IWDG_Get_MinTime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ll_wdg.o(i.IWDG_Get_MinTime))
<BR>[Address Reference Count : 1]<UL><LI> ll_wdg.o(.constdata)
</UL>
<P><STRONG><a name="[61]"></a>IWDG_Init</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, ll_wdg.o(i.IWDG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = IWDG_Init &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_wdg.o(.constdata)
</UL>
<P><STRONG><a name="[89]"></a>ADC1_Bus_Config</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ll_adc.o(i.ADC1_Bus_Config))
<BR>[Address Reference Count : 1]<UL><LI> ll_adc.o(Device_Table)
</UL>
<P><STRONG><a name="[66]"></a>ADC_CTL</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ll_adc.o(i.ADC_CTL))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC_CTL &rArr; LL_ADC_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Calibration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_adc.o(.constdata)
</UL>
<P><STRONG><a name="[67]"></a>ADC_Calibration</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ll_adc.o(i.ADC_Calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ADC_Calibration &rArr; ADC_CTL &rArr; LL_ADC_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Unlock
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Lock
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_RoughMs
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_Disable
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CTL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_adc.o(.constdata)
</UL>
<P><STRONG><a name="[a6]"></a>ADC_Channel_Config</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, ll_adc.o(i.ADC_Channel_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC_Channel_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_ADC_GetDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[6c]"></a>ADC_Get_Clock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ll_adc.o(i.ADC_Get_Clock))
<BR>[Address Reference Count : 1]<UL><LI> ll_adc.o(.constdata)
</UL>
<P><STRONG><a name="[68]"></a>ADC_Get_ConvTime</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, ll_adc.o(i.ADC_Get_ConvTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_Get_ConvTime &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_adc.o(.constdata)
</UL>
<P><STRONG><a name="[65]"></a>ADC_Init</STRONG> (Thumb, 318 bytes, Stack size 24 bytes, ll_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ADC_Init &rArr; ADC_Channel_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Ms
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_DeInit
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_ADC_Bus_SetPort
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_Disable
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Channel_Config
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_adc.o(.constdata)
</UL>
<P><STRONG><a name="[69]"></a>ADC_Read</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ll_adc.o(i.ADC_Read))
<BR>[Address Reference Count : 1]<UL><LI> ll_adc.o(.constdata)
</UL>
<P><STRONG><a name="[6b]"></a>ADC_TempFormula</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ll_adc.o(i.ADC_TempFormula))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ADC_TempFormula &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_adc.o(.constdata)
</UL>
<P><STRONG><a name="[6a]"></a>ADC_VrefFormula</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ll_adc.o(i.ADC_VrefFormula))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_VrefFormula &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_ADC_Bus_GetFS
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_adc.o(.constdata)
</UL>
<P><STRONG><a name="[6d]"></a>ADC_WDG_Config</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ll_adc.o(i.ADC_WDG_Config))
<BR>[Address Reference Count : 1]<UL><LI> ll_adc.o(.constdata)
</UL>
<P><STRONG><a name="[a7]"></a>FW_ADC_GetDevice</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ll_adc.o(i.FW_ADC_GetDevice))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Channel_Config
</UL>

<P><STRONG><a name="[a2]"></a>LL_ADC_Disable</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, ll_adc.o(i.LL_ADC_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_ADC_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Calibration
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CTL
</UL>

<P><STRONG><a name="[6e]"></a>PMU_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ll_pmu.o(i.PMU_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PMU_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_pmu.o(.constdata)
</UL>
<P><STRONG><a name="[6f]"></a>PMU_SetLPM</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ll_pmu.o(i.PMU_SetLPM))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PMU_SetLPM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_pmu.o(.constdata)
</UL>
<P><STRONG><a name="[c2]"></a>FW_GPIO_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ll_i2c.o(i.FW_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
</UL>

<P><STRONG><a name="[8a]"></a>I2C1_Config</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ll_i2c.o(i.I2C1_Config))
<BR>[Address Reference Count : 1]<UL><LI> ll_i2c.o(Device_Table)
</UL>
<P><STRONG><a name="[71]"></a>I2C_CTL</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ll_i2c.o(i.I2C_CTL))
<BR>[Address Reference Count : 1]<UL><LI> ll_i2c.o(.constdata)
</UL>
<P><STRONG><a name="[70]"></a>I2C_Init</STRONG> (Thumb, 260 bytes, Stack size 48 bytes, ll_i2c.o(i.I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = I2C_Init &rArr; LL_I2C_Init &rArr; LL_I2C_ConfigSpeed &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_PinAFConfig
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_I2C_SetPort
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_I2C_GetTRM
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_i2c.o(.constdata)
</UL>
<P><STRONG><a name="[73]"></a>I2C_Read</STRONG> (Thumb, 460 bytes, Stack size 40 bytes, ll_i2c.o(i.I2C_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_Read &rArr; LL_I2C_ClearFlag_ADDR
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_ClearFlag_ADDR
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_AcknowledgeNextData
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Unlock
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Lock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_i2c.o(.constdata)
</UL>
<P><STRONG><a name="[72]"></a>I2C_Write</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, ll_i2c.o(i.I2C_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_Write &rArr; LL_I2C_ClearFlag_ADDR
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_ClearFlag_ADDR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_i2c.o(.constdata)
</UL>
<P><STRONG><a name="[ea]"></a>LL_I2C_AcknowledgeNextData</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ll_i2c.o(i.LL_I2C_AcknowledgeNextData))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read
</UL>

<P><STRONG><a name="[eb]"></a>LL_I2C_ClearFlag_ADDR</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ll_i2c.o(i.LL_I2C_ClearFlag_ADDR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_I2C_ClearFlag_ADDR
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read
</UL>

<P><STRONG><a name="[8c]"></a>EXT_GPIO_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hc595.o(i.EXT_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = EXT_GPIO_Config &rArr; FW_Device_Find &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Driver_Find
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_Find
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hc595.o(Device_Table)
</UL>
<P><STRONG><a name="[c3]"></a>FW_GPIO_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc595.o(i.FW_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_HC595_Init
</UL>

<P><STRONG><a name="[c8]"></a>FW_GPIO_Write</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc595.o(i.FW_GPIO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FW_GPIO_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_HC595_CTL
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_HC595_Write
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_HC595_Init
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_HC595_CTL
</UL>

<P><STRONG><a name="[8b]"></a>HC595_Config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hc595.o(i.HC595_Config))
<BR>[Address Reference Count : 1]<UL><LI> hc595.o(Device_Table)
</UL>
<P><STRONG><a name="[74]"></a>HC595_Port_Init</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, hc595.o(i.HC595_Port_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HC595_Port_Init &rArr; FW_Device_Find &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_Find
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hc595.o(.constdata)
</UL>
<P><STRONG><a name="[75]"></a>HC595_Port_Write</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, hc595.o(i.HC595_Port_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HC595_Port_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hc595.o(.constdata)
</UL>
<P><STRONG><a name="[2a]"></a>IO_HC595_CTL</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hc595.o(i.IO_HC595_CTL))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IO_HC595_CTL &rArr; FW_GPIO_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hc595.o(i.HC595_Port_Init)
</UL>
<P><STRONG><a name="[29]"></a>IO_HC595_Init</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, hc595.o(i.IO_HC595_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IO_HC595_Init &rArr; FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hc595.o(i.HC595_Port_Init)
</UL>
<P><STRONG><a name="[2b]"></a>IO_HC595_Write</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, hc595.o(i.IO_HC595_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IO_HC595_Write &rArr; FW_Delay_Us
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Us
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hc595.o(i.HC595_Port_Init)
</UL>
<P><STRONG><a name="[27]"></a>SPI_HC595_CTL</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hc595.o(i.SPI_HC595_CTL))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_HC595_CTL &rArr; FW_GPIO_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hc595.o(i.HC595_Port_Init)
</UL>
<P><STRONG><a name="[26]"></a>SPI_HC595_Init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc595.o(i.SPI_HC595_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SPI_HC595_Init &rArr; FW_SPI_Init &rArr; SGTR_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hc595.o(i.HC595_Port_Init)
</UL>
<P><STRONG><a name="[28]"></a>SPI_HC595_Write</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, hc595.o(i.SPI_HC595_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_HC595_Write &rArr; FW_SPI_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_Write
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_CSSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hc595.o(i.HC595_Port_Init)
</UL>
<P><STRONG><a name="[24]"></a>ILock</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fw_system.o(i.ILock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ILock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_system.o(i.FW_System_Init)
</UL>
<P><STRONG><a name="[25]"></a>IUnlock</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, fw_system.o(i.IUnlock))
<BR>[Address Reference Count : 1]<UL><LI> fw_system.o(i.FW_System_Init)
</UL>
<P><STRONG><a name="[93]"></a>NLock</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fw_system.o(i.NLock))
<BR>[Address Reference Count : 1]<UL><LI> fw_system.o(.data)
</UL>
<P><STRONG><a name="[94]"></a>NUnlock</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fw_system.o(i.NUnlock))
<BR>[Address Reference Count : 1]<UL><LI> fw_system.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>FW_Delay_DefMs</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, fw_delay.o(i.FW_Delay_DefMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = FW_Delay_DefMs &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_delay.o(i.FW_Delay_Init)
</UL>
<P><STRONG><a name="[8d]"></a>FW_GPIO_Driver_Probe</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fw_gpio.o(i.FW_GPIO_Driver_Probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = FW_GPIO_Driver_Probe &rArr; FW_Driver_Find &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Driver_Find
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_gpio.o(Device_Table)
</UL>
<P><STRONG><a name="[18]"></a>FW_GPIO_ToggleUseLAPI</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fw_gpio.o(i.FW_GPIO_ToggleUseLAPI))
<BR>[Address Reference Count : 1]<UL><LI> fw_gpio.o(i.FW_GPIO_Driver_Probe)
</UL>
<P><STRONG><a name="[c4]"></a>FW_GPIO_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fw_suart.o(i.FW_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUART_Init
</UL>

<P><STRONG><a name="[ca]"></a>FW_GPIO_Write</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fw_suart.o(i.FW_GPIO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FW_GPIO_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUART_TX_Byte
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUART_Init
</UL>

<P><STRONG><a name="[76]"></a>SUART_Init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, fw_suart.o(i.SUART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SUART_Init &rArr; FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_suart.o(.constdata)
</UL>
<P><STRONG><a name="[78]"></a>SUART_RX_Byte</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, fw_suart.o(i.SUART_RX_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SUART_RX_Byte &rArr; FW_Delay_Us
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRead
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Us
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_suart.o(.constdata)
</UL>
<P><STRONG><a name="[77]"></a>SUART_TX_Byte</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, fw_suart.o(i.SUART_TX_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SUART_TX_Byte &rArr; FW_Delay_Us
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Us
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_suart.o(.constdata)
</UL>
<P><STRONG><a name="[79]"></a>SUART_Wait_RC</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fw_suart.o(i.SUART_Wait_RC))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SUART_Wait_RC
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_suart.o(.constdata)
</UL>
<P><STRONG><a name="[8e]"></a>IFlash_Driver_Probe</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fw_flash.o(i.IFlash_Driver_Probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = IFlash_Driver_Probe &rArr; FW_Driver_Find &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Driver_Find
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_flash.o(Device_Table)
</UL>
<P><STRONG><a name="[8f]"></a>IWDG_Driver_Probe</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fw_wdg.o(i.IWDG_Driver_Probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = IWDG_Driver_Probe &rArr; FW_Driver_Find &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Driver_Find
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_wdg.o(Device_Table)
</UL>
<P><STRONG><a name="[90]"></a>WWDG_Driver_Probe</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fw_wdg.o(i.WWDG_Driver_Probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = WWDG_Driver_Probe &rArr; FW_Driver_Find &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Driver_Find
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_wdg.o(Device_Table)
</UL>
<P><STRONG><a name="[c5]"></a>FW_GPIO_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fw_spi.o(i.FW_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_Init
</UL>

<P><STRONG><a name="[23]"></a>FW_SPI_CSIOSet</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, fw_spi.o(i.FW_SPI_CSIOSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FW_SPI_CSIOSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_spi.o(i.FW_SPI_Init)
</UL>
<P><STRONG><a name="[19]"></a>FW_SPI_IH_RC</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, fw_spi.o(i.FW_SPI_IH_RC))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = FW_SPI_IH_RC &rArr; RB_Write &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Unlock
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Lock
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_spi.o(i.FW_SPI_Init)
</UL>
<P><STRONG><a name="[1a]"></a>FW_SPI_IH_RX</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, fw_spi.o(i.FW_SPI_IH_RX))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = FW_SPI_IH_RX &rArr; RB_Write &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Unlock
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Lock
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_spi.o(i.FW_SPI_Init)
</UL>
<P><STRONG><a name="[1b]"></a>FW_SPI_IH_TC</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, fw_spi.o(i.FW_SPI_IH_TC))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = FW_SPI_IH_TC &rArr; RB_Read &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Unlock
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Lock
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Get_DataLength
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_spi.o(i.FW_SPI_Init)
</UL>
<P><STRONG><a name="[1c]"></a>FW_SPI_IH_TX</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, fw_spi.o(i.FW_SPI_IH_TX))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = FW_SPI_IH_TX &rArr; RB_Read &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Unlock
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Lock
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_spi.o(i.FW_SPI_Init)
</UL>
<P><STRONG><a name="[22]"></a>FW_SPI_ReadDMA</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fw_spi.o(i.FW_SPI_ReadDMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FW_SPI_ReadDMA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_spi.o(i.FW_SPI_Init)
</UL>
<P><STRONG><a name="[21]"></a>FW_SPI_ReadINT</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, fw_spi.o(i.FW_SPI_ReadINT))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FW_SPI_ReadINT &rArr; RB_PMB_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_PMB_Write
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_PMB_Set
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Get_DataLength
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_spi.o(i.FW_SPI_Init)
</UL>
<P><STRONG><a name="[20]"></a>FW_SPI_ReadPOL</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, fw_spi.o(i.FW_SPI_ReadPOL))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FW_SPI_ReadPOL &rArr; FW_SPI_WRByte
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_WRByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_spi.o(i.FW_SPI_Init)
</UL>
<P><STRONG><a name="[de]"></a>FW_SPI_WRByte</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, fw_spi.o(i.FW_SPI_WRByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FW_SPI_WRByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_WritePOL
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_ReadPOL
</UL>

<P><STRONG><a name="[1f]"></a>FW_SPI_WriteDMA</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fw_spi.o(i.FW_SPI_WriteDMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FW_SPI_WriteDMA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_spi.o(i.FW_SPI_Init)
</UL>
<P><STRONG><a name="[1e]"></a>FW_SPI_WriteINT</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, fw_spi.o(i.FW_SPI_WriteINT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FW_SPI_WriteINT &rArr; RB_PMB_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_PMB_Write
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Get_DataLength
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_spi.o(i.FW_SPI_Init)
</UL>
<P><STRONG><a name="[1d]"></a>FW_SPI_WritePOL</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, fw_spi.o(i.FW_SPI_WritePOL))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FW_SPI_WritePOL &rArr; FW_SPI_WRByte
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_WRByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_spi.o(i.FW_SPI_Init)
</UL>
<P><STRONG><a name="[c6]"></a>FW_GPIO_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fw_sspi.o(i.FW_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPI_Init
</UL>

<P><STRONG><a name="[cb]"></a>FW_GPIO_Write</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fw_sspi.o(i.FW_GPIO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FW_GPIO_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRByte_MSB
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRByte_LSB
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPI_Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPI_CS_Set
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCK_RE
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCK_FE
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCK_CPOL1
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCK_CPOL0
</UL>

<P><STRONG><a name="[33]"></a>SCK_CPOL0</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fw_sspi.o(i.SCK_CPOL0))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SCK_CPOL0 &rArr; FW_GPIO_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_sspi.o(i.SSPI_Init)
</UL>
<P><STRONG><a name="[31]"></a>SCK_CPOL1</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fw_sspi.o(i.SCK_CPOL1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SCK_CPOL1 &rArr; FW_GPIO_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_sspi.o(i.SSPI_Init)
</UL>
<P><STRONG><a name="[30]"></a>SCK_FE</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, fw_sspi.o(i.SCK_FE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SCK_FE &rArr; FW_Delay_Us
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Us
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_sspi.o(i.SSPI_Init)
</UL>
<P><STRONG><a name="[32]"></a>SCK_RE</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, fw_sspi.o(i.SCK_RE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SCK_RE &rArr; FW_Delay_Us
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Us
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_sspi.o(i.SSPI_Init)
</UL>
<P><STRONG><a name="[7c]"></a>SSPI_CS_Set</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fw_sspi.o(i.SSPI_CS_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SSPI_CS_Set &rArr; FW_GPIO_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_sspi.o(.constdata)
</UL>
<P><STRONG><a name="[7a]"></a>SSPI_DeInit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fw_sspi.o(i.SSPI_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SSPI_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_sspi.o(.constdata)
</UL>
<P><STRONG><a name="[7b]"></a>SSPI_Init</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, fw_sspi.o(i.SSPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SSPI_Init &rArr; FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_sspi.o(.constdata)
</UL>
<P><STRONG><a name="[7e]"></a>SSPI_Read</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, fw_sspi.o(i.SSPI_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SSPI_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_sspi.o(.constdata)
</UL>
<P><STRONG><a name="[7d]"></a>SSPI_Write</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, fw_sspi.o(i.SSPI_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SSPI_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_sspi.o(.constdata)
</UL>
<P><STRONG><a name="[2f]"></a>TRByte_LSB</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, fw_sspi.o(i.TRByte_LSB))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TRByte_LSB &rArr; FW_GPIO_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRead
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_sspi.o(i.SSPI_Init)
</UL>
<P><STRONG><a name="[2e]"></a>TRByte_MSB</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, fw_sspi.o(i.TRByte_MSB))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TRByte_MSB &rArr; FW_GPIO_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRead
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_sspi.o(i.SSPI_Init)
</UL>
<P><STRONG><a name="[c7]"></a>FW_GPIO_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fw_si2c.o(i.FW_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_Read_Byte
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SI2C_Init
</UL>

<P><STRONG><a name="[cc]"></a>FW_GPIO_Write</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fw_si2c.o(i.FW_GPIO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FW_GPIO_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_OUT
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SI2C_Init
</UL>

<P><STRONG><a name="[d0]"></a>FW_I2C_Get10BAddrH</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fw_si2c.o(i.FW_I2C_Get10BAddrH))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SI2C_Write
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SI2C_Read
</UL>

<P><STRONG><a name="[7f]"></a>FW_SI2C_Init</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, fw_si2c.o(i.FW_SI2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FW_SI2C_Init &rArr; FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_si2c.o(.constdata)
</UL>
<P><STRONG><a name="[81]"></a>FW_SI2C_Read</STRONG> (Thumb, 304 bytes, Stack size 40 bytes, fw_si2c.o(i.FW_SI2C_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = FW_SI2C_Read &rArr; SI2C_Read_Byte &rArr; FW_Delay_Us
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Us
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_Write_Byte
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_Stop
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_Start
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_Read_Byte
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_ACK
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_OUT
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_I2C_Get10BAddrH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_si2c.o(.constdata)
</UL>
<P><STRONG><a name="[80]"></a>FW_SI2C_Write</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, fw_si2c.o(i.FW_SI2C_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = FW_SI2C_Write &rArr; SI2C_Write_Byte &rArr; FW_Delay_Us
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_Write_Byte
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_Stop
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_Start
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_ACK
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_I2C_Get10BAddrH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_si2c.o(.constdata)
</UL>
<P><STRONG><a name="[d2]"></a>SCL_OUT</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fw_si2c.o(i.SCL_OUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SCL_OUT &rArr; FW_GPIO_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_Write_Byte
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_Stop
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_Start
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_Read_Byte
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_ACK
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SI2C_Read
</UL>

<P><STRONG><a name="[d3]"></a>SDA_OUT</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fw_si2c.o(i.SDA_OUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDA_OUT &rArr; FW_GPIO_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_Write_Byte
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_Stop
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_Start
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_Read_Byte
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_ACK
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SI2C_Read
</UL>

<P><STRONG><a name="[cf]"></a>SI2C_ACK</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, fw_si2c.o(i.SI2C_ACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SI2C_ACK &rArr; FW_Delay_Us
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Us
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SI2C_Write
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SI2C_Read
</UL>

<P><STRONG><a name="[d1]"></a>SI2C_Read_Byte</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, fw_si2c.o(i.SI2C_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SI2C_Read_Byte &rArr; FW_Delay_Us
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRead
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Us
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_OUT
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SI2C_Read
</UL>

<P><STRONG><a name="[cd]"></a>SI2C_Start</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, fw_si2c.o(i.SI2C_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SI2C_Start &rArr; FW_Delay_Us
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Us
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SI2C_Write
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SI2C_Read
</UL>

<P><STRONG><a name="[d4]"></a>SI2C_Stop</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, fw_si2c.o(i.SI2C_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SI2C_Stop &rArr; FW_Delay_Us
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Us
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SI2C_Write
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SI2C_Read
</UL>

<P><STRONG><a name="[ce]"></a>SI2C_Write_Byte</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, fw_si2c.o(i.SI2C_Write_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SI2C_Write_Byte &rArr; FW_Delay_Us
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Us
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SI2C_Write
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SI2C_Read
</UL>

<P><STRONG><a name="[87]"></a>PWM_CTL</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fw_timer.o(i.PWM_CTL))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWM_CTL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_timer.o(.constdata)
</UL>
<P><STRONG><a name="[86]"></a>PWM_Get_DC</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fw_timer.o(i.PWM_Get_DC))
<BR>[Address Reference Count : 1]<UL><LI> fw_timer.o(.constdata)
</UL>
<P><STRONG><a name="[84]"></a>PWM_Get_Frequency</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fw_timer.o(i.PWM_Get_Frequency))
<BR>[Address Reference Count : 1]<UL><LI> fw_timer.o(.constdata)
</UL>
<P><STRONG><a name="[82]"></a>PWM_Init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fw_timer.o(i.PWM_Init))
<BR>[Address Reference Count : 1]<UL><LI> fw_timer.o(.constdata)
</UL>
<P><STRONG><a name="[85]"></a>PWM_Set_DC</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, fw_timer.o(i.PWM_Set_DC))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWM_Set_DC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_timer.o(.constdata)
</UL>
<P><STRONG><a name="[83]"></a>PWM_Set_Frequency</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fw_timer.o(i.PWM_Set_Frequency))
<BR>[Address Reference Count : 1]<UL><LI> fw_timer.o(.constdata)
</UL>
<P><STRONG><a name="[e0]"></a>FLASH_MassErase</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, py32f0xx_hal_flash.o(i.FLASH_MassErase))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Erase
</UL>

<P><STRONG><a name="[e1]"></a>FLASH_PageErase</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, py32f0xx_hal_flash.o(i.FLASH_PageErase))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Erase
</UL>

<P><STRONG><a name="[e4]"></a>FLASH_Program_Page</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, py32f0xx_hal_flash.o(i.FLASH_Program_Page))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_Program_Page
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[e2]"></a>FLASH_SectorErase</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f0xx_hal_flash.o(i.FLASH_SectorErase))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Erase
</UL>

<P><STRONG><a name="[f1]"></a>LL_I2C_ConfigSpeed</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, py32f0xx_ll_i2c.o(i.LL_I2C_ConfigSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LL_I2C_ConfigSpeed &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_Init
</UL>

<P><STRONG><a name="[f7]"></a>LL_USART_SetBaudRate</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, py32f0xx_ll_usart.o(i.LL_USART_SetBaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LL_USART_SetBaudRate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
