<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\Project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\Project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Mon Aug 19 21:22:53 2024
<BR><P>
<H3>Maximum Stack Usage =        340 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
ESP8266_Get_ServerInfo &rArr; ESP8266_Read_Inter &rArr; FW_UART_ReadInter &rArr; RB_Read_Inter &rArr; RB_Find_StringCS &rArr; Strfind
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1d]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">SVC_Handler</a><BR>
 <LI><a href="#[1f]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">PendSV_Handler</a><BR>
 <LI><a href="#[37]">CAN0_EWMC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[37]">CAN0_EWMC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[33]">ADC0_1_IRQHandler</a> from ll_adc.o(i.ADC0_1_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[19e]">ADC0_Bus_Config</a> from ll_adc.o(i.ADC0_Bus_Config) referenced from ll_adc.o(Device_Table)
 <LI><a href="#[50]">ADC2_IRQHandler</a> from ll_adc.o(i.ADC2_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[102]">ADC_CTL</a> from ll_adc.o(i.ADC_CTL) referenced from ll_adc.o(.constdata)
 <LI><a href="#[103]">ADC_Calibration</a> from ll_adc.o(i.ADC_Calibration) referenced from ll_adc.o(.constdata)
 <LI><a href="#[107]">ADC_Get_Clock</a> from ll_adc.o(i.ADC_Get_Clock) referenced from ll_adc.o(.constdata)
 <LI><a href="#[104]">ADC_Get_ConvTime</a> from ll_adc.o(i.ADC_Get_ConvTime) referenced from ll_adc.o(.constdata)
 <LI><a href="#[101]">ADC_Init</a> from ll_adc.o(i.ADC_Init) referenced from ll_adc.o(.constdata)
 <LI><a href="#[106]">ADC_TempFormula</a> from ll_adc.o(i.ADC_TempFormula) referenced from ll_adc.o(.constdata)
 <LI><a href="#[105]">ADC_VrefFormula</a> from ll_adc.o(i.ADC_VrefFormula) referenced from ll_adc.o(.constdata)
 <LI><a href="#[108]">ADC_WDG_Config</a> from ll_adc.o(i.ADC_WDG_Config) referenced from ll_adc.o(.constdata)
 <LI><a href="#[fb]">BKP_Get_Base</a> from ll_bkp.o(i.BKP_Get_Base) referenced from ll_bkp.o(.constdata)
 <LI><a href="#[fc]">BKP_Get_Size</a> from ll_bkp.o(i.BKP_Get_Size) referenced from ll_bkp.o(.constdata)
 <LI><a href="#[fa]">BKP_Init</a> from ll_bkp.o(i.BKP_Init) referenced from ll_bkp.o(.constdata)
 <LI><a href="#[fe]">BKP_Read</a> from ll_bkp.o(i.BKP_Read) referenced from ll_bkp.o(.constdata)
 <LI><a href="#[61]">BKP_Read_Gran</a> from ll_bkp.o(i.BKP_Read_Gran) referenced from ll_bkp.o(i.BKP_Read)
 <LI><a href="#[61]">BKP_Read_Gran</a> from ll_bkp.o(i.BKP_Read_Gran) referenced from ll_bkp.o(i.BKP_Write)
 <LI><a href="#[fd]">BKP_Write</a> from ll_bkp.o(i.BKP_Write) referenced from ll_bkp.o(.constdata)
 <LI><a href="#[60]">BKP_Write_Gran</a> from ll_bkp.o(i.BKP_Write_Gran) referenced from ll_bkp.o(i.BKP_Read)
 <LI><a href="#[60]">BKP_Write_Gran</a> from ll_bkp.o(i.BKP_Write_Gran) referenced from ll_bkp.o(i.BKP_Write)
 <LI><a href="#[1b]">BusFault_Handler</a> from gd32f30x_it.o(i.BusFault_Handler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[99]">Bus_Init</a> from ili9341.o(i.Bus_Init) referenced from ili9341.o(i.ILI_Init)
 <LI><a href="#[186]">Bus_LCD8_Init</a> from fw_bus.o(i.Bus_LCD8_Init) referenced from fw_bus.o(.constdata)
 <LI><a href="#[189]">Bus_LCD8_ReadData</a> from fw_bus.o(i.Bus_LCD8_ReadData) referenced from fw_bus.o(.constdata)
 <LI><a href="#[67]">Bus_LCD8_ReadDataU16</a> from fw_bus.o(i.Bus_LCD8_ReadDataU16) referenced from fw_bus.o(i.Bus_LCD8_Init)
 <LI><a href="#[64]">Bus_LCD8_ReadDataU32</a> from fw_bus.o(i.Bus_LCD8_ReadDataU32) referenced from fw_bus.o(i.Bus_LCD8_Init)
 <LI><a href="#[6a]">Bus_LCD8_ReadDataU8</a> from fw_bus.o(i.Bus_LCD8_ReadDataU8) referenced from fw_bus.o(i.Bus_LCD8_Init)
 <LI><a href="#[187]">Bus_LCD8_WriteCmd</a> from fw_bus.o(i.Bus_LCD8_WriteCmd) referenced from fw_bus.o(.constdata)
 <LI><a href="#[65]">Bus_LCD8_WriteCmdU16</a> from fw_bus.o(i.Bus_LCD8_WriteCmdU16) referenced from fw_bus.o(i.Bus_LCD8_Init)
 <LI><a href="#[62]">Bus_LCD8_WriteCmdU32</a> from fw_bus.o(i.Bus_LCD8_WriteCmdU32) referenced from fw_bus.o(i.Bus_LCD8_Init)
 <LI><a href="#[68]">Bus_LCD8_WriteCmdU8</a> from fw_bus.o(i.Bus_LCD8_WriteCmdU8) referenced from fw_bus.o(i.Bus_LCD8_Init)
 <LI><a href="#[188]">Bus_LCD8_WriteData</a> from fw_bus.o(i.Bus_LCD8_WriteData) referenced from fw_bus.o(.constdata)
 <LI><a href="#[66]">Bus_LCD8_WriteDataU16</a> from fw_bus.o(i.Bus_LCD8_WriteDataU16) referenced from fw_bus.o(i.Bus_LCD8_Init)
 <LI><a href="#[63]">Bus_LCD8_WriteDataU32</a> from fw_bus.o(i.Bus_LCD8_WriteDataU32) referenced from fw_bus.o(i.Bus_LCD8_Init)
 <LI><a href="#[69]">Bus_LCD8_WriteDataU8</a> from fw_bus.o(i.Bus_LCD8_WriteDataU8) referenced from fw_bus.o(i.Bus_LCD8_Init)
 <LI><a href="#[9c]">Bus_Read_Data</a> from ili9341.o(i.Bus_Read_Data) referenced from ili9341.o(i.ILI_Init)
 <LI><a href="#[9a]">Bus_Write_Cmd</a> from ili9341.o(i.Bus_Write_Cmd) referenced from ili9341.o(i.ILI_Init)
 <LI><a href="#[9b]">Bus_Write_Data</a> from ili9341.o(i.Bus_Write_Data) referenced from ili9341.o(i.ILI_Init)
 <LI><a href="#[37]">CAN0_EWMC_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[36]">CAN0_RX1_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[1a4]">CAN_Config</a> from ll_can.o(i.CAN_Config) referenced 2 times from ll_can.o(Device_Table)
 <LI><a href="#[129]">CAN_DeInit</a> from ll_can.o(i.CAN_DeInit) referenced from ll_can.o(.constdata)
 <LI><a href="#[12b]">CAN_FT_CTL</a> from ll_can.o(i.CAN_FT_CTL) referenced from ll_can.o(.constdata)
 <LI><a href="#[12f]">CAN_Frame_Read</a> from ll_can.o(i.CAN_Frame_Read) referenced from ll_can.o(.constdata)
 <LI><a href="#[12e]">CAN_Frame_Write</a> from ll_can.o(i.CAN_Frame_Write) referenced from ll_can.o(.constdata)
 <LI><a href="#[12a]">CAN_Init</a> from ll_can.o(i.CAN_Init) referenced from ll_can.o(.constdata)
 <LI><a href="#[12d]">CAN_RX_CTL</a> from ll_can.o(i.CAN_RX_CTL) referenced from ll_can.o(.constdata)
 <LI><a href="#[12c]">CAN_TX_CTL</a> from ll_can.o(i.CAN_TX_CTL) referenced from ll_can.o(.constdata)
 <LI><a href="#[1a3]">DAC0_Config</a> from ll_dac.o(i.DAC0_Config) referenced from ll_dac.o(Device_Table)
 <LI><a href="#[122]">DAC_DeInit</a> from ll_dac.o(i.DAC_DeInit) referenced from ll_dac.o(.constdata)
 <LI><a href="#[123]">DAC_Init</a> from ll_dac.o(i.DAC_Init) referenced from ll_dac.o(.constdata)
 <LI><a href="#[126]">DAC_Read</a> from ll_dac.o(i.DAC_Read) referenced from ll_dac.o(.constdata)
 <LI><a href="#[128]">DAC_Trigger_CTL</a> from ll_dac.o(i.DAC_Trigger_CTL) referenced from ll_dac.o(.constdata)
 <LI><a href="#[127]">DAC_Trigger_Config</a> from ll_dac.o(i.DAC_Trigger_Config) referenced from ll_dac.o(.constdata)
 <LI><a href="#[125]">DAC_Write</a> from ll_dac.o(i.DAC_Write) referenced from ll_dac.o(.constdata)
 <LI><a href="#[2c]">DMA0_Channel0_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[2d]">DMA0_Channel1_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[2e]">DMA0_Channel2_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[2f]">DMA0_Channel3_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[30]">DMA0_Channel4_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[31]">DMA0_Channel5_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[32]">DMA0_Channel6_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[59]">DMA1_Channel0_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[5a]">DMA1_Channel1_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[5b]">DMA1_Channel2_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[5c]">DMA1_Channel3_4_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[171]">DS_Get_Temprature</a> from ds18b20.o(i.DS_Get_Temprature) referenced from ds18b20.o(.constdata)
 <LI><a href="#[16e]">DS_Init</a> from ds18b20.o(i.DS_Init) referenced from ds18b20.o(.constdata)
 <LI><a href="#[16f]">DS_Reset</a> from ds18b20.o(i.DS_Reset) referenced from ds18b20.o(.constdata)
 <LI><a href="#[170]">DS_Set_Period</a> from ds18b20.o(i.DS_Set_Period) referenced from ds18b20.o(.constdata)
 <LI><a href="#[1e]">DebugMon_Handler</a> from gd32f30x_it.o(i.DebugMon_Handler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[cb]">Delay_Get_Clock</a> from ll_delay.o(i.Delay_Get_Clock) referenced from ll_delay.o(.constdata)
 <LI><a href="#[cd]">Delay_Get_Counter</a> from ll_delay.o(i.Delay_Get_Counter) referenced from ll_delay.o(.constdata)
 <LI><a href="#[cc]">Delay_Get_Reload</a> from ll_delay.o(i.Delay_Get_Reload) referenced from ll_delay.o(.constdata)
 <LI><a href="#[ce]">Delay_Get_TickTime</a> from ll_delay.o(i.Delay_Get_TickTime) referenced from ll_delay.o(.constdata)
 <LI><a href="#[ca]">Delay_Init</a> from ll_delay.o(i.Delay_Init) referenced from ll_delay.o(.constdata)
 <LI><a href="#[15c]">ESP8266_AP_AutoLink</a> from esp8266.o(i.ESP8266_AP_AutoLink) referenced from esp8266.o(.constdata)
 <LI><a href="#[15a]">ESP8266_AP_Link</a> from esp8266.o(i.ESP8266_AP_Link) referenced from esp8266.o(.constdata)
 <LI><a href="#[159]">ESP8266_AP_Probe</a> from esp8266.o(i.ESP8266_AP_Probe) referenced from esp8266.o(.constdata)
 <LI><a href="#[15b]">ESP8266_AP_Unlink</a> from esp8266.o(i.ESP8266_AP_Unlink) referenced from esp8266.o(.constdata)
 <LI><a href="#[153]">ESP8266_Enter_LPM</a> from esp8266.o(i.ESP8266_Enter_LPM) referenced from esp8266.o(.constdata)
 <LI><a href="#[154]">ESP8266_Exit_LPM</a> from esp8266.o(i.ESP8266_Exit_LPM) referenced from esp8266.o(.constdata)
 <LI><a href="#[15d]">ESP8266_Get_APInfo</a> from esp8266.o(i.ESP8266_Get_APInfo) referenced from esp8266.o(.constdata)
 <LI><a href="#[160]">ESP8266_Get_LinkState</a> from esp8266.o(i.ESP8266_Get_LinkState) referenced from esp8266.o(.constdata)
 <LI><a href="#[158]">ESP8266_Get_LocalInof</a> from esp8266.o(i.ESP8266_Get_LocalInof) referenced from esp8266.o(.constdata)
 <LI><a href="#[156]">ESP8266_Get_Mode</a> from esp8266.o(i.ESP8266_Get_Mode) referenced from esp8266.o(.constdata)
 <LI><a href="#[15f]">ESP8266_Get_ServerInfo</a> from esp8266.o(i.ESP8266_Get_ServerInfo) referenced from esp8266.o(.constdata)
 <LI><a href="#[150]">ESP8266_Init</a> from esp8266.o(i.ESP8266_Init) referenced from esp8266.o(.constdata)
 <LI><a href="#[163]">ESP8266_Read</a> from esp8266.o(i.ESP8266_Read) referenced from esp8266.o(.constdata)
 <LI><a href="#[151]">ESP8266_Reset</a> from esp8266.o(i.ESP8266_Reset) referenced from esp8266.o(.constdata)
 <LI><a href="#[152]">ESP8266_Restore</a> from esp8266.o(i.ESP8266_Restore) referenced from esp8266.o(.constdata)
 <LI><a href="#[15e]">ESP8266_Server_Link</a> from esp8266.o(i.ESP8266_Server_Link) referenced from esp8266.o(.constdata)
 <LI><a href="#[157]">ESP8266_Set_LocalInfo</a> from esp8266.o(i.ESP8266_Set_LocalInfo) referenced from esp8266.o(.constdata)
 <LI><a href="#[155]">ESP8266_Set_Mode</a> from esp8266.o(i.ESP8266_Set_Mode) referenced from esp8266.o(.constdata)
 <LI><a href="#[161]">ESP8266_Set_TRPT</a> from esp8266.o(i.ESP8266_Set_TRPT) referenced from esp8266.o(.constdata)
 <LI><a href="#[162]">ESP8266_Write</a> from esp8266.o(i.ESP8266_Write) referenced from esp8266.o(.constdata)
 <LI><a href="#[51]">EXMC_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[27]">EXTI0_IRQHandler</a> from ll_exti.o(i.EXTI0_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[49]">EXTI10_15_IRQHandler</a> from ll_exti.o(i.EXTI10_15_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[28]">EXTI1_IRQHandler</a> from ll_exti.o(i.EXTI1_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[29]">EXTI2_IRQHandler</a> from ll_exti.o(i.EXTI2_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[2a]">EXTI3_IRQHandler</a> from ll_exti.o(i.EXTI3_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[2b]">EXTI4_IRQHandler</a> from ll_exti.o(i.EXTI4_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[38]">EXTI5_9_IRQHandler</a> from ll_exti.o(i.EXTI5_9_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[db]">EXTI_Attach_IRQ</a> from ll_exti.o(i.EXTI_Attach_IRQ) referenced from ll_exti.o(.constdata)
 <LI><a href="#[da]">EXTI_CTL</a> from ll_exti.o(i.EXTI_CTL) referenced from ll_exti.o(.constdata)
 <LI><a href="#[d9]">EXTI_Init</a> from ll_exti.o(i.EXTI_Init) referenced from ll_exti.o(.constdata)
 <LI><a href="#[1a6]">EXT_GPIO_Config</a> from hc595.o(i.EXT_GPIO_Config) referenced from hc595.o(Device_Table)
 <LI><a href="#[19d]">EX_Bus_Config</a> from ll_bus.o(i.EX_Bus_Config) referenced from ll_bus.o(Device_Table)
 <LI><a href="#[25]">FMC_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[6c]">FW_Delay_DefMs</a> from fw_delay.o(i.FW_Delay_DefMs) referenced from fw_delay.o(i.FW_Delay_Init)
 <LI><a href="#[1a7]">FW_GPIO_Driver_Probe</a> from fw_gpio.o(i.FW_GPIO_Driver_Probe) referenced from fw_gpio.o(Device_Table)
 <LI><a href="#[6e]">FW_GPIO_ToggleUseGetOutput</a> from fw_gpio.o(i.FW_GPIO_ToggleUseGetOutput) referenced from fw_gpio.o(i.FW_GPIO_Driver_Probe)
 <LI><a href="#[6d]">FW_GPIO_ToggleUseLAPI</a> from fw_gpio.o(i.FW_GPIO_ToggleUseLAPI) referenced from fw_gpio.o(i.FW_GPIO_Driver_Probe)
 <LI><a href="#[6f]">FW_I2C_IH_RC</a> from fw_i2c.o(i.FW_I2C_IH_RC) referenced from fw_i2c.o(i.FW_I2C_Init)
 <LI><a href="#[70]">FW_I2C_IH_RX</a> from fw_i2c.o(i.FW_I2C_IH_RX) referenced from fw_i2c.o(i.FW_I2C_Init)
 <LI><a href="#[71]">FW_I2C_IH_TC</a> from fw_i2c.o(i.FW_I2C_IH_TC) referenced from fw_i2c.o(i.FW_I2C_Init)
 <LI><a href="#[72]">FW_I2C_IH_TX</a> from fw_i2c.o(i.FW_I2C_IH_TX) referenced from fw_i2c.o(i.FW_I2C_Init)
 <LI><a href="#[78]">FW_I2C_ReadDMA</a> from fw_i2c.o(i.FW_I2C_ReadDMA) referenced from fw_i2c.o(i.FW_I2C_Init)
 <LI><a href="#[77]">FW_I2C_ReadINT</a> from fw_i2c.o(i.FW_I2C_ReadINT) referenced from fw_i2c.o(i.FW_I2C_Init)
 <LI><a href="#[76]">FW_I2C_ReadPOL</a> from fw_i2c.o(i.FW_I2C_ReadPOL) referenced from fw_i2c.o(i.FW_I2C_Init)
 <LI><a href="#[75]">FW_I2C_WriteDMA</a> from fw_i2c.o(i.FW_I2C_WriteDMA) referenced from fw_i2c.o(i.FW_I2C_Init)
 <LI><a href="#[74]">FW_I2C_WriteINT</a> from fw_i2c.o(i.FW_I2C_WriteINT) referenced from fw_i2c.o(i.FW_I2C_Init)
 <LI><a href="#[73]">FW_I2C_WritePOL</a> from fw_i2c.o(i.FW_I2C_WritePOL) referenced from fw_i2c.o(i.FW_I2C_Init)
 <LI><a href="#[6b]">FW_OS_Delay</a> from fw_os.o(i.FW_OS_Delay) referenced from fw_delay.o(i.FW_Delay_Init)
 <LI><a href="#[18f]">FW_SI2C_Init</a> from fw_si2c.o(i.FW_SI2C_Init) referenced from fw_si2c.o(.constdata)
 <LI><a href="#[191]">FW_SI2C_Read</a> from fw_si2c.o(i.FW_SI2C_Read) referenced from fw_si2c.o(.constdata)
 <LI><a href="#[190]">FW_SI2C_Write</a> from fw_si2c.o(i.FW_SI2C_Write) referenced from fw_si2c.o(.constdata)
 <LI><a href="#[83]">FW_SPI_CSIOSet</a> from fw_spi.o(i.FW_SPI_CSIOSet) referenced from fw_spi.o(i.FW_SPI_Init)
 <LI><a href="#[79]">FW_SPI_IH_RC</a> from fw_spi.o(i.FW_SPI_IH_RC) referenced from fw_spi.o(i.FW_SPI_Init)
 <LI><a href="#[7a]">FW_SPI_IH_RX</a> from fw_spi.o(i.FW_SPI_IH_RX) referenced from fw_spi.o(i.FW_SPI_Init)
 <LI><a href="#[7b]">FW_SPI_IH_TC</a> from fw_spi.o(i.FW_SPI_IH_TC) referenced from fw_spi.o(i.FW_SPI_Init)
 <LI><a href="#[7c]">FW_SPI_IH_TX</a> from fw_spi.o(i.FW_SPI_IH_TX) referenced from fw_spi.o(i.FW_SPI_Init)
 <LI><a href="#[82]">FW_SPI_ReadDMA</a> from fw_spi.o(i.FW_SPI_ReadDMA) referenced from fw_spi.o(i.FW_SPI_Init)
 <LI><a href="#[81]">FW_SPI_ReadINT</a> from fw_spi.o(i.FW_SPI_ReadINT) referenced from fw_spi.o(i.FW_SPI_Init)
 <LI><a href="#[80]">FW_SPI_ReadPOL</a> from fw_spi.o(i.FW_SPI_ReadPOL) referenced from fw_spi.o(i.FW_SPI_Init)
 <LI><a href="#[7f]">FW_SPI_WriteDMA</a> from fw_spi.o(i.FW_SPI_WriteDMA) referenced from fw_spi.o(i.FW_SPI_Init)
 <LI><a href="#[7e]">FW_SPI_WriteINT</a> from fw_spi.o(i.FW_SPI_WriteINT) referenced from fw_spi.o(i.FW_SPI_Init)
 <LI><a href="#[7d]">FW_SPI_WritePOL</a> from fw_spi.o(i.FW_SPI_WritePOL) referenced from fw_spi.o(i.FW_SPI_Init)
 <LI><a href="#[86]">FW_UART_IH_RC</a> from fw_uart.o(i.FW_UART_IH_RC) referenced from fw_uart.o(i.FW_UART_Init)
 <LI><a href="#[87]">FW_UART_IH_RX</a> from fw_uart.o(i.FW_UART_IH_RX) referenced from fw_uart.o(i.FW_UART_Init)
 <LI><a href="#[88]">FW_UART_IH_TC</a> from fw_uart.o(i.FW_UART_IH_TC) referenced from fw_uart.o(i.FW_UART_Init)
 <LI><a href="#[89]">FW_UART_IH_TX</a> from fw_uart.o(i.FW_UART_IH_TX) referenced from fw_uart.o(i.FW_UART_Init)
 <LI><a href="#[8f]">FW_UART_ReadDMA</a> from fw_uart.o(i.FW_UART_ReadDMA) referenced from fw_uart.o(i.FW_UART_Init)
 <LI><a href="#[8e]">FW_UART_ReadINT</a> from fw_uart.o(i.FW_UART_ReadINT) referenced from fw_uart.o(i.FW_UART_Init)
 <LI><a href="#[8d]">FW_UART_ReadPOL</a> from fw_uart.o(i.FW_UART_ReadPOL) referenced from fw_uart.o(i.FW_UART_Init)
 <LI><a href="#[90]">FW_UART_WaitNull</a> from fw_uart.o(i.FW_UART_WaitNull) referenced from fw_uart.o(i.FW_UART_ReadPOL)
 <LI><a href="#[90]">FW_UART_WaitNull</a> from fw_uart.o(i.FW_UART_WaitNull) referenced from fw_uart.o(i.FW_UART_WritePOL)
 <LI><a href="#[8c]">FW_UART_WriteDMA</a> from fw_uart.o(i.FW_UART_WriteDMA) referenced from fw_uart.o(i.FW_UART_Init)
 <LI><a href="#[8b]">FW_UART_WriteINT</a> from fw_uart.o(i.FW_UART_WriteINT) referenced from fw_uart.o(i.FW_UART_Init)
 <LI><a href="#[8a]">FW_UART_WritePOL</a> from fw_uart.o(i.FW_UART_WritePOL) referenced from fw_uart.o(i.FW_UART_Init)
 <LI><a href="#[1a5]">HC595_Config</a> from hc595.o(i.HC595_Config) referenced from hc595.o(Device_Table)
 <LI><a href="#[180]">HC595_Port_Init</a> from hc595.o(i.HC595_Port_Init) referenced from hc595.o(.constdata)
 <LI><a href="#[181]">HC595_Port_Write</a> from hc595.o(i.HC595_Port_Write) referenced from hc595.o(.constdata)
 <LI><a href="#[19]">HardFault_Handler</a> from gd32f30x_it.o(i.HardFault_Handler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[41]">I2C0_ER_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[40]">I2C0_EV_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[43]">I2C1_ER_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[42]">I2C1_EV_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[1a8]">IFlash_Driver_Probe</a> from fw_flash.o(i.IFlash_Driver_Probe) referenced from fw_flash.o(Device_Table)
 <LI><a href="#[ed]">IFlash_Erase_Sector</a> from ll_flash.o(i.IFlash_Erase_Sector) referenced from ll_flash.o(.constdata)
 <LI><a href="#[eb]">IFlash_Get_CID</a> from ll_flash.o(i.IFlash_Get_CID) referenced from ll_flash.o(.constdata)
 <LI><a href="#[ea]">IFlash_Get_Main</a> from ll_flash.o(i.IFlash_Get_Main) referenced from ll_flash.o(.constdata)
 <LI><a href="#[ec]">IFlash_Get_PE</a> from ll_flash.o(i.IFlash_Get_PE) referenced from ll_flash.o(.constdata)
 <LI><a href="#[e8]">IFlash_Get_SectorBase</a> from ll_flash.o(i.IFlash_Get_SectorBase) referenced from ll_flash.o(.constdata)
 <LI><a href="#[e7]">IFlash_Get_SectorNum</a> from ll_flash.o(i.IFlash_Get_SectorNum) referenced from ll_flash.o(.constdata)
 <LI><a href="#[e9]">IFlash_Get_SectorSize</a> from ll_flash.o(i.IFlash_Get_SectorSize) referenced from ll_flash.o(.constdata)
 <LI><a href="#[ef]">IFlash_Read</a> from ll_flash.o(i.IFlash_Read) referenced from ll_flash.o(.constdata)
 <LI><a href="#[98]">IFlash_Read_Gran</a> from ll_flash.o(i.IFlash_Read_Gran) referenced from ll_flash.o(i.IFlash_Write)
 <LI><a href="#[ee]">IFlash_Write</a> from ll_flash.o(i.IFlash_Write) referenced from ll_flash.o(.constdata)
 <LI><a href="#[97]">IFlash_Write_Gran</a> from ll_flash.o(i.IFlash_Write_Gran) referenced from ll_flash.o(i.IFlash_Write)
 <LI><a href="#[135]">ILI_BL_Get</a> from ili9341.o(i.ILI_BL_Get) referenced from ili9341.o(.constdata)
 <LI><a href="#[134]">ILI_BL_Set</a> from ili9341.o(i.ILI_BL_Set) referenced from ili9341.o(.constdata)
 <LI><a href="#[137]">ILI_Draw_Point</a> from ili9341.o(i.ILI_Draw_Point) referenced from ili9341.o(.constdata)
 <LI><a href="#[136]">ILI_Fill_Area</a> from ili9341.o(i.ILI_Fill_Area) referenced from ili9341.o(.constdata)
 <LI><a href="#[133]">ILI_Get_CID</a> from ili9341.o(i.ILI_Get_CID) referenced from ili9341.o(.constdata)
 <LI><a href="#[138]">ILI_Get_Point</a> from ili9341.o(i.ILI_Get_Point) referenced from ili9341.o(.constdata)
 <LI><a href="#[132]">ILI_Init</a> from ili9341.o(i.ILI_Init) referenced from ili9341.o(.constdata)
 <LI><a href="#[84]">ILock</a> from fw_system.o(i.ILock) referenced from fw_system.o(i.FW_System_Init)
 <LI><a href="#[131]">IO_Encoder_GetCounter</a> from io_encoder.o(i.IO_Encoder_GetCounter) referenced from io_encoder.o(.constdata)
 <LI><a href="#[130]">IO_Encoder_Init</a> from io_encoder.o(i.IO_Encoder_Init) referenced from io_encoder.o(.constdata)
 <LI><a href="#[95]">IO_HC595_CTL</a> from hc595.o(i.IO_HC595_CTL) referenced from hc595.o(i.HC595_Port_Init)
 <LI><a href="#[94]">IO_HC595_Init</a> from hc595.o(i.IO_HC595_Init) referenced from hc595.o(i.HC595_Port_Init)
 <LI><a href="#[96]">IO_HC595_Write</a> from hc595.o(i.IO_HC595_Write) referenced from hc595.o(i.HC595_Port_Init)
 <LI><a href="#[9d]">IO_Init</a> from ili9341.o(i.IO_Init) referenced from ili9341.o(i.ILI_Init)
 <LI><a href="#[a0]">IO_Read_Data</a> from ili9341.o(i.IO_Read_Data) referenced from ili9341.o(i.ILI_Init)
 <LI><a href="#[9e]">IO_Write_Cmd</a> from ili9341.o(i.IO_Write_Cmd) referenced from ili9341.o(i.ILI_Init)
 <LI><a href="#[9f]">IO_Write_Data</a> from ili9341.o(i.IO_Write_Data) referenced from ili9341.o(i.ILI_Init)
 <LI><a href="#[1a9]">IRTC_Driver_Probe</a> from fw_rtc.o(i.IRTC_Driver_Probe) referenced from fw_rtc.o(Device_Table)
 <LI><a href="#[f1]">IRTC_Get_Counter</a> from ll_rtc.o(i.IRTC_Get_Counter) referenced from ll_rtc.o(.constdata)
 <LI><a href="#[f0]">IRTC_Init</a> from ll_rtc.o(i.IRTC_Init) referenced from ll_rtc.o(.constdata)
 <LI><a href="#[f3]">IRTC_Set_Alarm</a> from ll_rtc.o(i.IRTC_Set_Alarm) referenced from ll_rtc.o(.constdata)
 <LI><a href="#[f2]">IRTC_Set_Counter</a> from ll_rtc.o(i.IRTC_Set_Counter) referenced from ll_rtc.o(.constdata)
 <LI><a href="#[85]">IUnlock</a> from fw_system.o(i.IUnlock) referenced from fw_system.o(i.FW_System_Init)
 <LI><a href="#[1aa]">IWDG_Driver_Probe</a> from fw_wdg.o(i.IWDG_Driver_Probe) referenced from fw_wdg.o(Device_Table)
 <LI><a href="#[f5]">IWDG_FeedDog</a> from ll_wdg.o(i.IWDG_FeedDog) referenced from ll_wdg.o(.constdata)
 <LI><a href="#[f6]">IWDG_Get_MaxTime</a> from ll_wdg.o(i.IWDG_Get_MaxTime) referenced from ll_wdg.o(.constdata)
 <LI><a href="#[f7]">IWDG_Get_MinTime</a> from ll_wdg.o(i.IWDG_Get_MinTime) referenced from ll_wdg.o(.constdata)
 <LI><a href="#[f4]">IWDG_Init</a> from ll_wdg.o(i.IWDG_Init) referenced from ll_wdg.o(.constdata)
 <LI><a href="#[100]">LCD_Bus_Init</a> from ll_bus.o(i.LCD_Bus_Init) referenced from ll_bus.o(.constdata)
 <LI><a href="#[124]">LL_DAC_CTL</a> from ll_dac.o(i.LL_DAC_CTL) referenced from ll_dac.o(.constdata)
 <LI><a href="#[19f]">LL_Timer_Config</a> from ll_timer.o(i.LL_Timer_Config) referenced 8 times from ll_timer.o(Device_Table)
 <LI><a href="#[22]">LVD_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[16c]">MF_S522_BlockRead</a> from fm17522.o(i.MF_S522_BlockRead) referenced from fm17522.o(.constdata)
 <LI><a href="#[16d]">MF_S522_BlockWrite</a> from fm17522.o(i.MF_S522_BlockWrite) referenced from fm17522.o(.constdata)
 <LI><a href="#[16b]">MF_S522_CardActive</a> from fm17522.o(i.MF_S522_CardActive) referenced from fm17522.o(.constdata)
 <LI><a href="#[169]">MF_S522_CardHalt</a> from fm17522.o(i.MF_S522_CardHalt) referenced from fm17522.o(.constdata)
 <LI><a href="#[16a]">MF_S522_CardRequest</a> from fm17522.o(i.MF_S522_CardRequest) referenced from fm17522.o(.constdata)
 <LI><a href="#[164]">MF_S522_Init</a> from fm17522.o(i.MF_S522_Init) referenced from fm17522.o(.constdata)
 <LI><a href="#[166]">MF_S522_LPMConfig</a> from fm17522.o(i.MF_S522_LPMConfig) referenced from fm17522.o(.constdata)
 <LI><a href="#[165]">MF_S522_Reset</a> from fm17522.o(i.MF_S522_Reset) referenced from fm17522.o(.constdata)
 <LI><a href="#[167]">MF_S522_SetCP</a> from fm17522.o(i.MF_S522_SetCP) referenced from fm17522.o(.constdata)
 <LI><a href="#[168]">MF_S522_SetRFM</a> from fm17522.o(i.MF_S522_SetRFM) referenced from fm17522.o(.constdata)
 <LI><a href="#[1a]">MemManage_Handler</a> from gd32f30x_it.o(i.MemManage_Handler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[6]">NLock</a> from fw_system.o(i.NLock) referenced 2 times from fw_system.o(.data)
 <LI><a href="#[18]">NMI_Handler</a> from ll_system.o(i.NMI_Handler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[7]">NUnlock</a> from fw_system.o(i.NUnlock) referenced 2 times from fw_system.o(.data)
 <LI><a href="#[197]">PWM_CTL</a> from fw_timer.o(i.PWM_CTL) referenced from fw_timer.o(.constdata)
 <LI><a href="#[196]">PWM_Get_DC</a> from fw_timer.o(i.PWM_Get_DC) referenced from fw_timer.o(.constdata)
 <LI><a href="#[194]">PWM_Get_Frequency</a> from fw_timer.o(i.PWM_Get_Frequency) referenced from fw_timer.o(.constdata)
 <LI><a href="#[192]">PWM_Init</a> from fw_timer.o(i.PWM_Init) referenced from fw_timer.o(.constdata)
 <LI><a href="#[195]">PWM_Set_DC</a> from fw_timer.o(i.PWM_Set_DC) referenced from fw_timer.o(.constdata)
 <LI><a href="#[193]">PWM_Set_Frequency</a> from fw_timer.o(i.PWM_Set_Frequency) referenced from fw_timer.o(.constdata)
 <LI><a href="#[1f]">PendSV_Handler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[cf]">Pin_DeInit</a> from ll_gpio.o(i.Pin_DeInit) referenced from ll_gpio.o(.constdata)
 <LI><a href="#[d2]">Pin_GetOutput</a> from ll_gpio.o(i.Pin_GetOutput) referenced from ll_gpio.o(.constdata)
 <LI><a href="#[d0]">Pin_Init</a> from ll_gpio.o(i.Pin_Init) referenced from ll_gpio.o(.constdata)
 <LI><a href="#[d3]">Pin_Read</a> from ll_gpio.o(i.Pin_Read) referenced from ll_gpio.o(.constdata)
 <LI><a href="#[d1]">Pin_Write</a> from ll_gpio.o(i.Pin_Write) referenced from ll_gpio.o(.constdata)
 <LI><a href="#[d5]">Port_DeInit</a> from ll_gpio.o(i.Port_DeInit) referenced from ll_gpio.o(.constdata)
 <LI><a href="#[d4]">Port_GetDefault</a> from ll_gpio.o(i.Port_GetDefault) referenced from ll_gpio.o(.constdata)
 <LI><a href="#[d7]">Port_GetOutput</a> from ll_gpio.o(i.Port_GetOutput) referenced from ll_gpio.o(.constdata)
 <LI><a href="#[d8]">Port_Read</a> from ll_gpio.o(i.Port_Read) referenced from ll_gpio.o(.constdata)
 <LI><a href="#[d6]">Port_Write</a> from ll_gpio.o(i.Port_Write) referenced from ll_gpio.o(.constdata)
 <LI><a href="#[26]">RCU_CTC_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[4a]">RTC_Alarm_IRQHandler</a> from ll_rtc.o(i.RTC_Alarm_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[24]">RTC_IRQHandler</a> from ll_rtc.o(i.RTC_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[17]">Reset_Handler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[af]">SCK_CPOL0</a> from fw_sspi.o(i.SCK_CPOL0) referenced from fw_sspi.o(i.SSPI_Init)
 <LI><a href="#[ac]">SCK_CPOL1</a> from fw_sspi.o(i.SCK_CPOL1) referenced from fw_sspi.o(i.SSPI_Init)
 <LI><a href="#[ad]">SCK_FE</a> from fw_sspi.o(i.SCK_FE) referenced from fw_sspi.o(i.SSPI_Init)
 <LI><a href="#[ae]">SCK_RE</a> from fw_sspi.o(i.SCK_RE) referenced from fw_sspi.o(i.SSPI_Init)
 <LI><a href="#[52]">SDIO_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[a6]">SGP_Erase_Chip</a> from gd25q64.o(i.SGP_Erase_Chip) referenced from gd25q64.o(i.SNOR_Init)
 <LI><a href="#[a7]">SGP_Erase_Sector</a> from gd25q64.o(i.SGP_Erase_Sector) referenced from gd25q64.o(i.SNOR_Init)
 <LI><a href="#[a5]">SGP_Get_CID</a> from gd25q64.o(i.SGP_Get_CID) referenced from gd25q64.o(i.SNOR_Init)
 <LI><a href="#[a2]">SGP_Get_Reg</a> from fm17522.o(i.SGP_Get_Reg) referenced from fm17522.o(i.MF_S522_Init)
 <LI><a href="#[a1]">SGP_Init</a> from fm17522.o(i.SGP_Init) referenced from fm17522.o(i.MF_S522_Init)
 <LI><a href="#[a4]">SGP_Init</a> from gd25q64.o(i.SGP_Init) referenced from gd25q64.o(i.SNOR_Init)
 <LI><a href="#[a9]">SGP_Read</a> from gd25q64.o(i.SGP_Read) referenced from gd25q64.o(i.SNOR_Init)
 <LI><a href="#[a3]">SGP_Set_Reg</a> from fm17522.o(i.SGP_Set_Reg) referenced from fm17522.o(i.MF_S522_Init)
 <LI><a href="#[a8]">SGP_Write</a> from gd25q64.o(i.SGP_Write) referenced from gd25q64.o(i.SNOR_Init)
 <LI><a href="#[140]">SNOR_Erase_Chip</a> from gd25q64.o(i.SNOR_Erase_Chip) referenced from gd25q64.o(.constdata)
 <LI><a href="#[141]">SNOR_Erase_Sector</a> from gd25q64.o(i.SNOR_Erase_Sector) referenced from gd25q64.o(.constdata)
 <LI><a href="#[13e]">SNOR_Get_CID</a> from gd25q64.o(i.SNOR_Get_CID) referenced from gd25q64.o(.constdata)
 <LI><a href="#[13d]">SNOR_Get_Main</a> from gd25q64.o(i.SNOR_Get_Main) referenced from gd25q64.o(.constdata)
 <LI><a href="#[13f]">SNOR_Get_PEState</a> from gd25q64.o(i.SNOR_Get_PEState) referenced from gd25q64.o(.constdata)
 <LI><a href="#[13b]">SNOR_Get_SectorBase</a> from gd25q64.o(i.SNOR_Get_SectorBase) referenced from gd25q64.o(.constdata)
 <LI><a href="#[13a]">SNOR_Get_SectorNum</a> from gd25q64.o(i.SNOR_Get_SectorNum) referenced from gd25q64.o(.constdata)
 <LI><a href="#[13c]">SNOR_Get_SectorSize</a> from gd25q64.o(i.SNOR_Get_SectorSize) referenced from gd25q64.o(.constdata)
 <LI><a href="#[139]">SNOR_Init</a> from gd25q64.o(i.SNOR_Init) referenced from gd25q64.o(.constdata)
 <LI><a href="#[143]">SNOR_Read</a> from gd25q64.o(i.SNOR_Read) referenced from gd25q64.o(.constdata)
 <LI><a href="#[142]">SNOR_Write</a> from gd25q64.o(i.SNOR_Write) referenced from gd25q64.o(.constdata)
 <LI><a href="#[1a0]">SPI0_Config</a> from ll_spi.o(i.SPI0_Config) referenced from ll_spi.o(Device_Table)
 <LI><a href="#[44]">SPI0_IRQHandler</a> from ll_spi.o(i.SPI0_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[1a1]">SPI1_Config</a> from ll_spi.o(i.SPI1_Config) referenced from ll_spi.o(Device_Table)
 <LI><a href="#[45]">SPI1_IRQHandler</a> from ll_spi.o(i.SPI1_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[1a2]">SPI2_Config</a> from ll_spi.o(i.SPI2_Config) referenced from ll_spi.o(Device_Table)
 <LI><a href="#[54]">SPI2_IRQHandler</a> from ll_spi.o(i.SPI2_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[119]">SPI_CTL</a> from ll_spi.o(i.SPI_CTL) referenced from ll_spi.o(.constdata)
 <LI><a href="#[117]">SPI_DeInit</a> from ll_spi.o(i.SPI_DeInit) referenced from ll_spi.o(.constdata)
 <LI><a href="#[92]">SPI_HC595_CTL</a> from hc595.o(i.SPI_HC595_CTL) referenced from hc595.o(i.HC595_Port_Init)
 <LI><a href="#[91]">SPI_HC595_Init</a> from hc595.o(i.SPI_HC595_Init) referenced from hc595.o(i.HC595_Port_Init)
 <LI><a href="#[93]">SPI_HC595_Write</a> from hc595.o(i.SPI_HC595_Write) referenced from hc595.o(i.HC595_Port_Init)
 <LI><a href="#[118]">SPI_Init</a> from ll_spi.o(i.SPI_Init) referenced from ll_spi.o(.constdata)
 <LI><a href="#[11d]">SPI_RX_Byte</a> from ll_spi.o(i.SPI_RX_Byte) referenced from ll_spi.o(.constdata)
 <LI><a href="#[11b]">SPI_RX_CTL</a> from ll_spi.o(i.SPI_RX_CTL) referenced from ll_spi.o(.constdata)
 <LI><a href="#[121]">SPI_Read</a> from ll_spi.o(i.SPI_Read) referenced from ll_spi.o(.constdata)
 <LI><a href="#[11c]">SPI_TX_Byte</a> from ll_spi.o(i.SPI_TX_Byte) referenced from ll_spi.o(.constdata)
 <LI><a href="#[11a]">SPI_TX_CTL</a> from ll_spi.o(i.SPI_TX_CTL) referenced from ll_spi.o(.constdata)
 <LI><a href="#[11f]">SPI_Wait_RC</a> from ll_spi.o(i.SPI_Wait_RC) referenced from ll_spi.o(.constdata)
 <LI><a href="#[11e]">SPI_Wait_TC</a> from ll_spi.o(i.SPI_Wait_TC) referenced from ll_spi.o(.constdata)
 <LI><a href="#[120]">SPI_Write</a> from ll_spi.o(i.SPI_Write) referenced from ll_spi.o(.constdata)
 <LI><a href="#[18c]">SSPI_CS_Set</a> from fw_sspi.o(i.SSPI_CS_Set) referenced from fw_sspi.o(.constdata)
 <LI><a href="#[18a]">SSPI_DeInit</a> from fw_sspi.o(i.SSPI_DeInit) referenced from fw_sspi.o(.constdata)
 <LI><a href="#[18b]">SSPI_Init</a> from fw_sspi.o(i.SSPI_Init) referenced from fw_sspi.o(.constdata)
 <LI><a href="#[18e]">SSPI_Read</a> from fw_sspi.o(i.SSPI_Read) referenced from fw_sspi.o(.constdata)
 <LI><a href="#[18d]">SSPI_Write</a> from fw_sspi.o(i.SSPI_Write) referenced from fw_sspi.o(.constdata)
 <LI><a href="#[175]">ST7735_BL_Get</a> from st7735.o(i.ST7735_BL_Get) referenced from st7735.o(.constdata)
 <LI><a href="#[174]">ST7735_BL_Set</a> from st7735.o(i.ST7735_BL_Set) referenced from st7735.o(.constdata)
 <LI><a href="#[177]">ST7735_Draw_Point</a> from st7735.o(i.ST7735_Draw_Point) referenced from st7735.o(.constdata)
 <LI><a href="#[176]">ST7735_Fill_Area</a> from st7735.o(i.ST7735_Fill_Area) referenced from st7735.o(.constdata)
 <LI><a href="#[173]">ST7735_Get_CID</a> from st7735.o(i.ST7735_Get_CID) referenced from st7735.o(.constdata)
 <LI><a href="#[178]">ST7735_Get_Point</a> from st7735.o(i.ST7735_Get_Point) referenced from st7735.o(.constdata)
 <LI><a href="#[179]">ST7735_Get_ScreenSize</a> from st7735.o(i.ST7735_Get_ScreenSize) referenced from st7735.o(.constdata)
 <LI><a href="#[172]">ST7735_Init</a> from st7735.o(i.ST7735_Init) referenced from st7735.o(.constdata)
 <LI><a href="#[182]">SUART_Init</a> from fw_suart.o(i.SUART_Init) referenced from fw_suart.o(.constdata)
 <LI><a href="#[184]">SUART_RX_Byte</a> from fw_suart.o(i.SUART_RX_Byte) referenced from fw_suart.o(.constdata)
 <LI><a href="#[183]">SUART_TX_Byte</a> from fw_suart.o(i.SUART_TX_Byte) referenced from fw_suart.o(.constdata)
 <LI><a href="#[185]">SUART_Wait_RC</a> from fw_suart.o(i.SUART_Wait_RC) referenced from fw_suart.o(.constdata)
 <LI><a href="#[1d]">SVC_Handler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[20]">SysTick_Handler</a> from ll_delay.o(i.SysTick_Handler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[5e]">SystemInit</a> from system_gd32f30x.o(i.SystemInit) referenced from startup_gd32f30x_hd.o(.text)
 <LI><a href="#[c9]">System_Clear_RSTSource</a> from ll_system.o(i.System_Clear_RSTSource) referenced from ll_system.o(.constdata)
 <LI><a href="#[c1]">System_Disable_IRQ</a> from ll_system.o(i.System_Disable_IRQ) referenced from ll_system.o(.constdata)
 <LI><a href="#[c2]">System_Enable_IRQ</a> from ll_system.o(i.System_Enable_IRQ) referenced from ll_system.o(.constdata)
 <LI><a href="#[c8]">System_Get_RSTSource</a> from ll_system.o(i.System_Get_RSTSource) referenced from ll_system.o(.constdata)
 <LI><a href="#[c5]">System_Get_Sysclk</a> from ll_system.o(i.System_Get_Sysclk) referenced from ll_system.o(.constdata)
 <LI><a href="#[c0]">System_Init</a> from ll_system.o(i.System_Init) referenced from ll_system.o(.constdata)
 <LI><a href="#[c4]">System_Set_Sysclk</a> from ll_system.o(i.System_Set_Sysclk) referenced from ll_system.o(.constdata)
 <LI><a href="#[c6]">System_Set_VectorTable</a> from ll_system.o(i.System_Set_VectorTable) referenced from ll_system.o(.constdata)
 <LI><a href="#[c7]">System_Soft_Reset</a> from ll_system.o(i.System_Soft_Reset) referenced from ll_system.o(.constdata)
 <LI><a href="#[23]">TAMPER_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[39]">TIMER0_BRK_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[3c]">TIMER0_Channel_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[3b]">TIMER0_TRG_CMT_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[3a]">TIMER0_UP_IRQHandler</a> from ll_timer.o(i.TIMER0_UP_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[3d]">TIMER1_IRQHandler</a> from ll_timer.o(i.TIMER1_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[3e]">TIMER2_IRQHandler</a> from ll_timer.o(i.TIMER2_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[3f]">TIMER3_IRQHandler</a> from ll_timer.o(i.TIMER3_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[53]">TIMER4_IRQHandler</a> from ll_timer.o(i.TIMER4_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[57]">TIMER5_IRQHandler</a> from ll_timer.o(i.TIMER5_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[58]">TIMER6_IRQHandler</a> from ll_timer.o(i.TIMER6_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[4c]">TIMER7_BRK_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[4f]">TIMER7_Channel_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[4e]">TIMER7_TRG_CMT_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[4d]">TIMER7_UP_IRQHandler</a> from ll_timer.o(i.TIMER7_UP_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[114]">TIM_CTL</a> from ll_timer.o(i.TIM_CTL) referenced from ll_timer.o(.constdata)
 <LI><a href="#[109]">TIM_DeInit</a> from ll_timer.o(i.TIM_DeInit) referenced from ll_timer.o(.constdata)
 <LI><a href="#[10f]">TIM_Encoder_Init</a> from ll_timer.o(i.TIM_Encoder_Init) referenced from ll_timer.o(.constdata)
 <LI><a href="#[10a]">TIM_Get_Clock</a> from ll_timer.o(i.TIM_Get_Clock) referenced from ll_timer.o(.constdata)
 <LI><a href="#[111]">TIM_Get_Counter</a> from ll_timer.o(i.TIM_Get_Counter) referenced from ll_timer.o(.constdata)
 <LI><a href="#[113]">TIM_Get_DC</a> from ll_timer.o(i.TIM_Get_DC) referenced from ll_timer.o(.constdata)
 <LI><a href="#[10c]">TIM_Get_Frequency</a> from ll_timer.o(i.TIM_Get_Frequency) referenced from ll_timer.o(.constdata)
 <LI><a href="#[116]">TIM_IT_CTL</a> from ll_timer.o(i.TIM_IT_CTL) referenced from ll_timer.o(.constdata)
 <LI><a href="#[115]">TIM_PWM_CTL</a> from ll_timer.o(i.TIM_PWM_CTL) referenced from ll_timer.o(.constdata)
 <LI><a href="#[10e]">TIM_PWM_Init</a> from ll_timer.o(i.TIM_PWM_Init) referenced from ll_timer.o(.constdata)
 <LI><a href="#[110]">TIM_Set_Counter</a> from ll_timer.o(i.TIM_Set_Counter) referenced from ll_timer.o(.constdata)
 <LI><a href="#[112]">TIM_Set_DC</a> from ll_timer.o(i.TIM_Set_DC) referenced from ll_timer.o(.constdata)
 <LI><a href="#[10b]">TIM_Set_Frequency</a> from ll_timer.o(i.TIM_Set_Frequency) referenced from ll_timer.o(.constdata)
 <LI><a href="#[10d]">TIM_Timing_Init</a> from ll_timer.o(i.TIM_Timing_Init) referenced from ll_timer.o(.constdata)
 <LI><a href="#[17e]">TM77_Get_Sample</a> from tm7711.o(i.TM77_Get_Sample) referenced from tm7711.o(.constdata)
 <LI><a href="#[17d]">TM77_Get_Temprature</a> from tm7711.o(i.TM77_Get_Temprature) referenced from tm7711.o(.constdata)
 <LI><a href="#[17a]">TM77_Init</a> from tm7711.o(i.TM77_Init) referenced from tm7711.o(.constdata)
 <LI><a href="#[17b]">TM77_Reset</a> from tm7711.o(i.TM77_Reset) referenced from tm7711.o(.constdata)
 <LI><a href="#[17f]">TM77_Sample_Formula</a> from tm7711.o(i.TM77_Sample_Formula) referenced from tm7711.o(.constdata)
 <LI><a href="#[17c]">TM77_Set_Period</a> from tm7711.o(i.TM77_Set_Period) referenced from tm7711.o(.constdata)
 <LI><a href="#[ab]">TRByte_LSB</a> from fw_sspi.o(i.TRByte_LSB) referenced from fw_sspi.o(i.SSPI_Init)
 <LI><a href="#[aa]">TRByte_MSB</a> from fw_sspi.o(i.TRByte_MSB) referenced from fw_sspi.o(i.SSPI_Init)
 <LI><a href="#[19b]">UART3_Config</a> from ll_uart.o(i.UART3_Config) referenced from ll_uart.o(Device_Table)
 <LI><a href="#[55]">UART3_IRQHandler</a> from ll_uart.o(i.UART3_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[19c]">UART4_Config</a> from ll_uart.o(i.UART4_Config) referenced from ll_uart.o(Device_Table)
 <LI><a href="#[56]">UART4_IRQHandler</a> from ll_uart.o(i.UART4_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[de]">UART_CTL</a> from ll_uart.o(i.UART_CTL) referenced from ll_uart.o(.constdata)
 <LI><a href="#[dc]">UART_DeInit</a> from ll_uart.o(i.UART_DeInit) referenced from ll_uart.o(.constdata)
 <LI><a href="#[e6]">UART_Get_RDL</a> from ll_uart.o(i.UART_Get_RDL) referenced from ll_uart.o(.constdata)
 <LI><a href="#[dd]">UART_Init</a> from ll_uart.o(i.UART_Init) referenced from ll_uart.o(.constdata)
 <LI><a href="#[e2]">UART_RX_Byte</a> from ll_uart.o(i.UART_RX_Byte) referenced from ll_uart.o(.constdata)
 <LI><a href="#[e0]">UART_RX_CTL</a> from ll_uart.o(i.UART_RX_CTL) referenced from ll_uart.o(.constdata)
 <LI><a href="#[e5]">UART_Set_TDL</a> from ll_uart.o(i.UART_Set_TDL) referenced from ll_uart.o(.constdata)
 <LI><a href="#[e1]">UART_TX_Byte</a> from ll_uart.o(i.UART_TX_Byte) referenced from ll_uart.o(.constdata)
 <LI><a href="#[df]">UART_TX_CTL</a> from ll_uart.o(i.UART_TX_CTL) referenced from ll_uart.o(.constdata)
 <LI><a href="#[e4]">UART_Wait_RC</a> from ll_uart.o(i.UART_Wait_RC) referenced from ll_uart.o(.constdata)
 <LI><a href="#[e3]">UART_Wait_TC</a> from ll_uart.o(i.UART_Wait_TC) referenced from ll_uart.o(.constdata)
 <LI><a href="#[198]">USART0_Config</a> from ll_uart.o(i.USART0_Config) referenced from ll_uart.o(Device_Table)
 <LI><a href="#[46]">USART0_IRQHandler</a> from ll_uart.o(i.USART0_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[199]">USART1_Config</a> from ll_uart.o(i.USART1_Config) referenced from ll_uart.o(Device_Table)
 <LI><a href="#[47]">USART1_IRQHandler</a> from ll_uart.o(i.USART1_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[19a]">USART2_Config</a> from ll_uart.o(i.USART2_Config) referenced from ll_uart.o(Device_Table)
 <LI><a href="#[48]">USART2_IRQHandler</a> from ll_uart.o(i.USART2_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[34]">USBD_HP_CAN0_TX_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[35]">USBD_LP_CAN0_RX0_IRQHandler</a> from ll_usb.o(i.USBD_LP_CAN0_RX0_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[4b]">USBD_WKUP_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[ff]">USB_Init</a> from ll_usb.o(i.USB_Init) referenced from ll_usb.o(.constdata)
 <LI><a href="#[1c]">UsageFault_Handler</a> from gd32f30x_it.o(i.UsageFault_Handler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[14e]">WF183D_Get_Pressure</a> from wf183d.o(i.WF183D_Get_Pressure) referenced from wf183d.o(.constdata)
 <LI><a href="#[14d]">WF183D_Get_Temprature</a> from wf183d.o(i.WF183D_Get_Temprature) referenced from wf183d.o(.constdata)
 <LI><a href="#[b4]">WF183D_I2C_GetPressure</a> from wf183d.o(i.WF183D_I2C_GetPressure) referenced from wf183d.o(i.WF183D_Init)
 <LI><a href="#[b5]">WF183D_I2C_GetTemprature</a> from wf183d.o(i.WF183D_I2C_GetTemprature) referenced from wf183d.o(i.WF183D_Init)
 <LI><a href="#[b3]">WF183D_I2C_Init</a> from wf183d.o(i.WF183D_I2C_Init) referenced from wf183d.o(i.WF183D_Init)
 <LI><a href="#[14a]">WF183D_Init</a> from wf183d.o(i.WF183D_Init) referenced from wf183d.o(.constdata)
 <LI><a href="#[b7]">WF183D_OWI_GetPressure</a> from wf183d.o(i.WF183D_OWI_GetPressure) referenced from wf183d.o(i.WF183D_Init)
 <LI><a href="#[b8]">WF183D_OWI_GetTemprature</a> from wf183d.o(i.WF183D_OWI_GetTemprature) referenced from wf183d.o(i.WF183D_Init)
 <LI><a href="#[b6]">WF183D_OWI_Init</a> from wf183d.o(i.WF183D_OWI_Init) referenced from wf183d.o(i.WF183D_Init)
 <LI><a href="#[14f]">WF183D_Press_Formula</a> from wf183d.o(i.WF183D_Press_Formula) referenced from wf183d.o(.constdata)
 <LI><a href="#[14b]">WF183D_Reset</a> from wf183d.o(i.WF183D_Reset) referenced from wf183d.o(.constdata)
 <LI><a href="#[14c]">WF183D_Set_Period</a> from wf183d.o(i.WF183D_Set_Period) referenced from wf183d.o(.constdata)
 <LI><a href="#[b1]">WF183D_UART_GetPressure</a> from wf183d.o(i.WF183D_UART_GetPressure) referenced from wf183d.o(i.WF183D_Init)
 <LI><a href="#[b2]">WF183D_UART_GetTemprature</a> from wf183d.o(i.WF183D_UART_GetTemprature) referenced from wf183d.o(i.WF183D_Init)
 <LI><a href="#[b0]">WF183D_UART_Init</a> from wf183d.o(i.WF183D_UART_Init) referenced from wf183d.o(i.WF183D_Init)
 <LI><a href="#[148]">WF200D_Get_Pressure</a> from wf200d.o(i.WF200D_Get_Pressure) referenced from wf200d.o(.constdata)
 <LI><a href="#[147]">WF200D_Get_Temprature</a> from wf200d.o(i.WF200D_Get_Temprature) referenced from wf200d.o(.constdata)
 <LI><a href="#[b9]">WF200D_I2C_Init</a> from wf200d.o(i.WF200D_I2C_Init) referenced from wf200d.o(i.WF200D_Init)
 <LI><a href="#[bb]">WF200D_I2C_ReadByte</a> from wf200d.o(i.WF200D_I2C_ReadByte) referenced from wf200d.o(i.WF200D_Init)
 <LI><a href="#[ba]">WF200D_I2C_WriteByte</a> from wf200d.o(i.WF200D_I2C_WriteByte) referenced from wf200d.o(i.WF200D_Init)
 <LI><a href="#[144]">WF200D_Init</a> from wf200d.o(i.WF200D_Init) referenced from wf200d.o(.constdata)
 <LI><a href="#[149]">WF200D_Press_Formula</a> from wf200d.o(i.WF200D_Press_Formula) referenced from wf200d.o(.constdata)
 <LI><a href="#[145]">WF200D_Reset</a> from wf200d.o(i.WF200D_Reset) referenced from wf200d.o(.constdata)
 <LI><a href="#[bc]">WF200D_SPI_Init</a> from wf200d.o(i.WF200D_SPI_Init) referenced from wf200d.o(i.WF200D_Init)
 <LI><a href="#[be]">WF200D_SPI_ReadByte</a> from wf200d.o(i.WF200D_SPI_ReadByte) referenced from wf200d.o(i.WF200D_Init)
 <LI><a href="#[bd]">WF200D_SPI_WriteByte</a> from wf200d.o(i.WF200D_SPI_WriteByte) referenced from wf200d.o(i.WF200D_Init)
 <LI><a href="#[146]">WF200D_Set_Period</a> from wf200d.o(i.WF200D_Set_Period) referenced from wf200d.o(.constdata)
 <LI><a href="#[21]">WWDGT_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[1ab]">WWDG_Driver_Probe</a> from fw_wdg.o(i.WWDG_Driver_Probe) referenced from fw_wdg.o(Device_Table)
 <LI><a href="#[f9]">WWDG_FeedDog</a> from ll_wdg.o(i.WWDG_FeedDog) referenced from ll_wdg.o(.constdata)
 <LI><a href="#[f8]">WWDG_Init</a> from ll_wdg.o(i.WWDG_Init) referenced from ll_wdg.o(.constdata)
 <LI><a href="#[c3]">__asm___11_ll_system_c_bb8ca80c__System_Get_IRQState</a> from ll_system.o(.emb_text) referenced from ll_system.o(.constdata)
 <LI><a href="#[5f]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_gd32f30x_hd.o(.text)
 <LI><a href="#[bf]">fputc</a> from fw_uart.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[5]">free</a> from mallocr.o(i.__free$realloc) referenced 2 times from mm.o(.data)
 <LI><a href="#[5d]">main</a> from fw_startup.o(i.$Sub$$main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[4]">malloc</a> from mallocr.o(i.__malloc$realloc) referenced 4 times from mm.o(.data)
 <LI><a href="#[3]">msc_data_handler</a> from msc_core.o(i.msc_data_handler) referenced 2 times from ll_usb.o(.data)
 <LI><a href="#[1]">msc_deinit</a> from msc_core.o(i.msc_deinit) referenced 2 times from ll_usb.o(.data)
 <LI><a href="#[0]">msc_init</a> from msc_core.o(i.msc_init) referenced 2 times from ll_usb.o(.data)
 <LI><a href="#[2]">msc_req_handler</a> from msc_core.o(i.msc_req_handler) referenced 2 times from ll_usb.o(.data)
 <LI><a href="#[9]">usbd_clearfeature</a> from usbd_std.o(i.usbd_clearfeature) referenced 2 times from usbd_std.o(.data)
 <LI><a href="#[15]">usbd_configuration_descriptor_get</a> from usbd_std.o(i.usbd_configuration_descriptor_get) referenced 2 times from usbd_std.o(.data)
 <LI><a href="#[14]">usbd_device_descriptor_get</a> from usbd_std.o(i.usbd_device_descriptor_get) referenced 2 times from usbd_std.o(.data)
 <LI><a href="#[f]">usbd_getconfiguration</a> from usbd_std.o(i.usbd_getconfiguration) referenced 2 times from usbd_std.o(.data)
 <LI><a href="#[d]">usbd_getdescriptor</a> from usbd_std.o(i.usbd_getdescriptor) referenced 2 times from usbd_std.o(.data)
 <LI><a href="#[11]">usbd_getinterface</a> from usbd_std.o(i.usbd_getinterface) referenced 2 times from usbd_std.o(.data)
 <LI><a href="#[8]">usbd_getstatus</a> from usbd_std.o(i.usbd_getstatus) referenced 2 times from usbd_std.o(.data)
 <LI><a href="#[a]">usbd_reserved</a> from usbd_std.o(i.usbd_reserved) referenced 4 times from usbd_std.o(.data)
 <LI><a href="#[c]">usbd_setaddress</a> from usbd_std.o(i.usbd_setaddress) referenced 2 times from usbd_std.o(.data)
 <LI><a href="#[10]">usbd_setconfiguration</a> from usbd_std.o(i.usbd_setconfiguration) referenced 2 times from usbd_std.o(.data)
 <LI><a href="#[e]">usbd_setdescriptor</a> from usbd_std.o(i.usbd_setdescriptor) referenced 2 times from usbd_std.o(.data)
 <LI><a href="#[b]">usbd_setfeature</a> from usbd_std.o(i.usbd_setfeature) referenced 2 times from usbd_std.o(.data)
 <LI><a href="#[12]">usbd_setinterface</a> from usbd_std.o(i.usbd_setinterface) referenced 2 times from usbd_std.o(.data)
 <LI><a href="#[16]">usbd_string_descriptor_get</a> from usbd_std.o(i.usbd_string_descriptor_get) referenced 2 times from usbd_std.o(.data)
 <LI><a href="#[13]">usbd_synchframe</a> from usbd_std.o(i.usbd_synchframe) referenced 2 times from usbd_std.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[5f]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(.text)
</UL>
<P><STRONG><a name="[3ac]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[1ac]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1c2]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3ad]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[3ae]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[3af]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[3b0]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[3b1]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[c3]"></a>__asm___11_ll_system_c_bb8ca80c__System_Get_IRQState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ll_system.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> ll_system.o(.constdata)
</UL>
<P><STRONG><a name="[17]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>CAN0_EWMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_EWMC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_EWMC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>CAN0_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMA0_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>DMA0_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>DMA0_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>DMA0_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>DMA0_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>DMA0_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>DMA0_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DMA1_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>DMA1_Channel3_4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>EXMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>I2C0_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>I2C0_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>LVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>RCU_CTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIMER0_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIMER0_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIMER0_TRG_CMT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>TIMER7_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>TIMER7_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>TIMER7_TRG_CMT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBD_HP_CAN0_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>USBD_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>WWDGT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1ae]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1be]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[3b2]"></a>____aeabi_memcpy8$ret$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[3b3]"></a>___aeabi_memmove4$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[3b4]"></a>___aeabi_memmove8$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[1fe]"></a>__aeabi_memcpy</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBlock_Read_SelfAlign
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBlock_Write_SelfAlign
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Frame_Write
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Frame_Read
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNOR_Write
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Write
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Find_StringCS
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Anticollision
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_ServerInfo
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>

<P><STRONG><a name="[293]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_Init
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_I2C_Init
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_Init
</UL>

<P><STRONG><a name="[243]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Read_Inter
</UL>

<P><STRONG><a name="[3b5]"></a>memcpy</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[3b6]"></a>memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[1b2]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[3b7]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[3b8]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1b1]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGTR_Config
</UL>

<P><STRONG><a name="[238]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGTR_DeInit
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGTR_Config
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Set_Mode
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_ServerInfo
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_LinkState
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPI_DeInit
</UL>

<P><STRONG><a name="[3b9]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1b3]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[246]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Set_Mode
</UL>

<P><STRONG><a name="[232]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_ServerInfo
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_APInfo
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_AP_Link
</UL>

<P><STRONG><a name="[233]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_String_IsExist
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read_Inter
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read_Fisrt
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Find_StringCS_RL1
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Find_StringCS
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Write_Cmd
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Read_Inter
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_ServerInfo
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_APInfo
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_AP_Link
</UL>

<P><STRONG><a name="[23e]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_ServerInfo
</UL>

<P><STRONG><a name="[237]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_APInfo
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_PreBind
</UL>

<P><STRONG><a name="[1d6]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DeInit
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Timing_Init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWM_Init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Encoder_Init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DeInit
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_Find
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_DeInit
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DeInit
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Driver_Find
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_PreBind
</UL>

<P><STRONG><a name="[236]"></a>strtok</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, strtok.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strtok
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_ServerInfo
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_APInfo
</UL>

<P><STRONG><a name="[1b4]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Read
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_APInfo
</UL>

<P><STRONG><a name="[1b7]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1bb]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1bc]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1bd]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[37d]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[3ba]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[380]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1b0]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[3bb]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[1af]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[3bc]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[1b8]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[3bd]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[1b6]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[3be]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[1ba]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>

<P><STRONG><a name="[1b9]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[1c0]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1c1]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1ad]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[3bf]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[1c3]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[1bf]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[3c0]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[3c1]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[5d]"></a>main</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, fw_startup.o(i.$Sub$$main))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = main &rArr; FW_Delay_Init &rArr; FW_Driver_Find &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_System_Init
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Init
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_PreInit
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_PreBind
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[33]"></a>ADC0_1_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ll_adc.o(i.ADC0_1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC0_1_IRQHandler &rArr; FW_ADC_Bus_IH
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_ADC_Bus_IH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>ADC2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ll_adc.o(i.ADC2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f30x_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f30x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ll_exti.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EXTI0_IRQHandler &rArr; EXTI_IRQHandler &rArr; FW_EXTI_IH_ISR
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>EXTI10_15_IRQHandler</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, ll_exti.o(i.EXTI10_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EXTI10_15_IRQHandler &rArr; EXTI_IRQHandler &rArr; FW_EXTI_IH_ISR
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ll_exti.o(i.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EXTI1_IRQHandler &rArr; EXTI_IRQHandler &rArr; FW_EXTI_IH_ISR
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ll_exti.o(i.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EXTI2_IRQHandler &rArr; EXTI_IRQHandler &rArr; FW_EXTI_IH_ISR
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ll_exti.o(i.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EXTI3_IRQHandler &rArr; EXTI_IRQHandler &rArr; FW_EXTI_IH_ISR
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ll_exti.o(i.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EXTI4_IRQHandler &rArr; EXTI_IRQHandler &rArr; FW_EXTI_IH_ISR
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>EXTI5_9_IRQHandler</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ll_exti.o(i.EXTI5_9_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EXTI5_9_IRQHandler &rArr; EXTI_IRQHandler &rArr; FW_EXTI_IH_ISR
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d5]"></a>FW_ADC_Bus_GetChannelNum</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fw_adc.o(i.FW_ADC_Bus_GetChannelNum))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[1eb]"></a>FW_ADC_Bus_GetFS</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fw_adc.o(i.FW_ADC_Bus_GetFS))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_VrefFormula
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TempFormula
</UL>

<P><STRONG><a name="[1c9]"></a>FW_ADC_Bus_IH</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fw_adc.o(i.FW_ADC_Bus_IH))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FW_ADC_Bus_IH
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_1_IRQHandler
</UL>

<P><STRONG><a name="[1d7]"></a>FW_ADC_Bus_SetPort</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fw_adc.o(i.FW_ADC_Bus_SetPort))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[205]"></a>FW_CAN_GetTRM</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fw_can.o(i.FW_CAN_GetTRM))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
</UL>

<P><STRONG><a name="[1fb]"></a>FW_CAN_SetPort</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fw_can.o(i.FW_CAN_SetPort))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DeInit
</UL>

<P><STRONG><a name="[217]"></a>FW_DAC_GetPort</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fw_dac.o(i.FW_DAC_GetPort))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DAC_CTL
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Write
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Trigger_Config
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Trigger_CTL
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Read
</UL>

<P><STRONG><a name="[209]"></a>FW_DAC_SetPort</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fw_dac.o(i.FW_DAC_SetPort))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_DeInit
</UL>

<P><STRONG><a name="[269]"></a>FW_Delay_GetUsDuration</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, fw_delay.o(i.FW_Delay_GetUsDuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FW_Delay_GetUsDuration
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Init
</UL>

<P><STRONG><a name="[267]"></a>FW_Delay_GetUsStart</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, fw_delay.o(i.FW_Delay_GetUsStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FW_Delay_GetUsStart
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Init
</UL>

<P><STRONG><a name="[1c5]"></a>FW_Delay_Init</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, fw_delay.o(i.FW_Delay_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = FW_Delay_Init &rArr; FW_Driver_Find &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Driver_Find
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Us
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_OS_IsStart
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_OS_GetTickTime
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_GetUsStart
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_GetUsDuration
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e7]"></a>FW_Delay_Ms</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fw_delay.o(i.FW_Delay_Ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FW_Delay_Ms
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF183D_UART_GetTemprature
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF183D_UART_GetPressure
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF200D_Get_Temprature
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF200D_Get_Pressure
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_Reset
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Set_RF
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Config_ISOType
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Comm
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Write
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Set_TRPT
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Server_Link
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Reset
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Read
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_AP_Unlink
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_AP_Probe
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_AP_Link
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Send
</UL>

<P><STRONG><a name="[1cd]"></a>FW_Delay_RoughMs</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, fw_delay.o(i.FW_Delay_RoughMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FW_Delay_RoughMs &rArr; FW_System_GetSysclk
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_System_GetSysclk
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Calibration
</UL>

<P><STRONG><a name="[324]"></a>FW_Delay_TickTock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fw_delay.o(i.FW_Delay_TickTock))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[268]"></a>FW_Delay_Us</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, fw_delay.o(i.FW_Delay_Us))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FW_Delay_Us
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI_Init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_HC595_Write
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM77_Set_Period
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM77_Get_Temprature
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM77_Get_Sample
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Init
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_OW_WaitACK
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_OW_Reset
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_OW_Init
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Init
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUART_TX_Byte
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUART_RX_Byte
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_OW_WriteByte
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_OW_ReadByte
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_Write_Byte
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_Stop
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_Start
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_Read_Byte
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_ACK
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SI2C_Read
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCK_RE
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCK_FE
</UL>

<P><STRONG><a name="[21f]"></a>FW_Device_Find</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, fw_device.o(i.FW_Device_Find))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = FW_Device_Find &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SEI
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SDI
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Trigger_Config
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC595_Port_Init
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_GPIO_Config
</UL>

<P><STRONG><a name="[1c6]"></a>FW_Device_PreBind</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, fw_device.o(i.FW_Device_PreBind))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = FW_Device_PreBind &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_List_Init
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c7]"></a>FW_Device_PreInit</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, fw_device.o(i.FW_Device_PreInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FW_Device_PreInit
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[253]"></a>FW_Driver_Find</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, fw_driver.o(i.FW_Driver_Find))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = FW_Driver_Find &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF183D_Init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF200D_Init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNOR_Init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI_Init
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_GPIO_Config
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Init
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_Init
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_System_Init
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Driver_Probe
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_Driver_Probe
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Driver_Probe
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRTC_Driver_Probe
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_Driver_Probe
</UL>

<P><STRONG><a name="[24e]"></a>FW_EXTI_IH_ISR</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, fw_exti.o(i.FW_EXTI_IH_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FW_EXTI_IH_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_IRQHandler
</UL>

<P><STRONG><a name="[290]"></a>FW_I2C_Init</STRONG> (Thumb, 106 bytes, Stack size 104 bytes, fw_i2c.o(i.FW_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = FW_I2C_Init &rArr; SGTR_Config &rArr; MM_Malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGTR_DeInit
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGTR_Config
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF183D_I2C_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF200D_I2C_Init
</UL>

<P><STRONG><a name="[377]"></a>FW_I2C_Read</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, fw_i2c.o(i.FW_I2C_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FW_I2C_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF200D_I2C_ReadByte
</UL>

<P><STRONG><a name="[372]"></a>FW_I2C_SetDelay</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, fw_i2c.o(i.FW_I2C_SetDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FW_I2C_SetDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF183D_I2C_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF200D_I2C_Init
</UL>

<P><STRONG><a name="[378]"></a>FW_I2C_Write</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, fw_i2c.o(i.FW_I2C_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FW_I2C_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF200D_I2C_WriteByte
</UL>

<P><STRONG><a name="[1cc]"></a>FW_Lock</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fw_system.o(i.FW_Lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FW_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Calibration
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Write
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_String_IsExist
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read_Inter
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read_HL
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read_Fisrt
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_PMB_Write
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_PMB_Set
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Get_DataLength
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Clear_Buffer
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Data_IsCC
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_ServerInfo
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_LinkState
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_AP_Probe
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_AP_Link
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_IH_TX
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_IH_TC
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_IH_RX
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_IH_RC
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_WriteINT
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_WriteDMA
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_IH_TX
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_IH_TC
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_IH_RX
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_IH_RC
</UL>

<P><STRONG><a name="[6b]"></a>FW_OS_Delay</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, fw_os.o(i.FW_OS_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FW_OS_Delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_delay.o(i.FW_Delay_Init)
</UL>
<P><STRONG><a name="[266]"></a>FW_OS_GetTickTime</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fw_os.o(i.FW_OS_GetTickTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FW_OS_GetTickTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Init
</UL>

<P><STRONG><a name="[265]"></a>FW_OS_IsStart</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fw_os.o(i.FW_OS_IsStart))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Init
</UL>

<P><STRONG><a name="[22c]"></a>FW_OW_Init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, fw_ow.o(i.FW_OW_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FW_OW_Init &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Us
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Read
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_Init
</UL>

<P><STRONG><a name="[22d]"></a>FW_OW_Read</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, fw_ow.o(i.FW_OW_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = FW_OW_Read &rArr; FW_OW_ReadByte &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_OW_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_Read
</UL>

<P><STRONG><a name="[228]"></a>FW_OW_Reset</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, fw_ow.o(i.FW_OW_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FW_OW_Reset &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Us
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_Reset
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_Get_Temprature
</UL>

<P><STRONG><a name="[229]"></a>FW_OW_WaitACK</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, fw_ow.o(i.FW_OW_WaitACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FW_OW_WaitACK &rArr; FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Us
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Read
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_Get_Temprature
</UL>

<P><STRONG><a name="[22e]"></a>FW_OW_Write</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, fw_ow.o(i.FW_OW_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = FW_OW_Write &rArr; FW_OW_WriteByte &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_OW_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_Write
</UL>

<P><STRONG><a name="[26b]"></a>FW_SDI</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fw_system.o(i.FW_SDI))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FW_SDI
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_Find
</UL>

<P><STRONG><a name="[26c]"></a>FW_SEI</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fw_system.o(i.FW_SEI))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FW_SEI
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_Find
</UL>

<P><STRONG><a name="[305]"></a>FW_SPI_CSSet</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, fw_spi.o(i.FW_SPI_CSSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FW_SPI_CSSet
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF200D_SPI_WriteByte
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF200D_SPI_ReadByte
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_EN
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_DI
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_HC595_Write
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_EN
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_DI
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Set_Reg
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Get_Reg
</UL>

<P><STRONG><a name="[315]"></a>FW_SPI_GetDMABBase</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fw_spi.o(i.FW_SPI_GetDMABBase))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>

<P><STRONG><a name="[316]"></a>FW_SPI_GetDMABSize</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fw_spi.o(i.FW_SPI_GetDMABSize))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>

<P><STRONG><a name="[314]"></a>FW_SPI_GetTRM</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fw_spi.o(i.FW_SPI_GetTRM))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TX_CTL
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RX_CTL
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>

<P><STRONG><a name="[2a3]"></a>FW_SPI_Init</STRONG> (Thumb, 156 bytes, Stack size 104 bytes, fw_spi.o(i.FW_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = FW_SPI_Init &rArr; FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGTR_DeInit
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGTR_Config
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF200D_SPI_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_HC595_Init
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Init
</UL>

<P><STRONG><a name="[313]"></a>FW_SPI_RX_ISR</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fw_spi.o(i.FW_SPI_RX_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FW_SPI_RX_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_IRQHandler
</UL>

<P><STRONG><a name="[307]"></a>FW_SPI_Read</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, fw_spi.o(i.FW_SPI_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FW_SPI_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF200D_SPI_ReadByte
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Read_Byte
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Read
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Get_CID
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Get_Reg
</UL>

<P><STRONG><a name="[30e]"></a>FW_SPI_SetPort</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fw_spi.o(i.FW_SPI_SetPort))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DeInit
</UL>

<P><STRONG><a name="[312]"></a>FW_SPI_TX_ISR</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fw_spi.o(i.FW_SPI_TX_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FW_SPI_TX_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_IRQHandler
</UL>

<P><STRONG><a name="[2df]"></a>FW_SPI_Write</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, fw_spi.o(i.FW_SPI_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FW_SPI_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF200D_SPI_WriteByte
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF200D_SPI_ReadByte
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Write_Byte
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Write
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_HC595_Write
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD8_Write_Data
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD8_Write_Cmd
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD8_Write
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Set_Reg
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Get_Reg
</UL>

<P><STRONG><a name="[26a]"></a>FW_System_GetSysclk</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fw_system.o(i.FW_System_GetSysclk))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FW_System_GetSysclk
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_RoughMs
</UL>

<P><STRONG><a name="[1c4]"></a>FW_System_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, fw_system.o(i.FW_System_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = FW_System_Init &rArr; FW_Driver_Find &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Driver_Find
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[225]"></a>FW_TIM_CTL</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, fw_timer.o(i.FW_TIM_CTL))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FW_TIM_CTL
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Trigger_Config
</UL>

<P><STRONG><a name="[2a8]"></a>FW_TIM_GetClock</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, fw_timer.o(i.FW_TIM_GetClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FW_TIM_GetClock
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Timing_Init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWM_Init
</UL>

<P><STRONG><a name="[221]"></a>FW_TIM_GetPort</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fw_timer.o(i.FW_TIM_GetPort))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Trigger_Config
</UL>

<P><STRONG><a name="[34c]"></a>FW_TIM_GetUnit</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, fw_timer.o(i.FW_TIM_GetUnit))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Timing_Init
</UL>

<P><STRONG><a name="[220]"></a>FW_TIM_Init</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, fw_timer.o(i.FW_TIM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FW_TIM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Trigger_Config
</UL>

<P><STRONG><a name="[224]"></a>FW_TIM_SetFrequency</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, fw_timer.o(i.FW_TIM_SetFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FW_TIM_SetFrequency
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Trigger_Config
</UL>

<P><STRONG><a name="[339]"></a>FW_TIM_SetPort</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fw_timer.o(i.FW_TIM_SetPort))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Timing_Init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWM_Init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Encoder_Init
</UL>

<P><STRONG><a name="[234]"></a>FW_UART_ClearFIFO</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, fw_uart.o(i.FW_UART_ClearFIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FW_UART_ClearFIFO &rArr; RB_Clear_Buffer &rArr; FW_Unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Clear_Buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Clear_RBuff
</UL>

<P><STRONG><a name="[35a]"></a>FW_UART_GetDMABBase</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fw_uart.o(i.FW_UART_GetDMABBase))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Set_TDL
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Get_RDL
</UL>

<P><STRONG><a name="[358]"></a>FW_UART_GetDMABSize</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fw_uart.o(i.FW_UART_GetDMABSize))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Get_RDL
</UL>

<P><STRONG><a name="[23d]"></a>FW_UART_GetDataLength</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, fw_uart.o(i.FW_UART_GetDataLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FW_UART_GetDataLength &rArr; RB_Get_DataLength &rArr; FW_Unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Get_DataLength
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_RDL
</UL>

<P><STRONG><a name="[23b]"></a>FW_UART_GetFIFOBBase</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, fw_uart.o(i.FW_UART_GetFIFOBBase))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FW_UART_GetFIFOBBase
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Get_Buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_RBuff
</UL>

<P><STRONG><a name="[362]"></a>FW_UART_GetTRM</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fw_uart.o(i.FW_UART_GetTRM))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Wait_TC
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Wait_RC
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TX_CTL
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RX_CTL
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[23f]"></a>FW_UART_Init</STRONG> (Thumb, 154 bytes, Stack size 104 bytes, fw_uart.o(i.FW_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = FW_UART_Init &rArr; SGTR_Config &rArr; MM_Malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGTR_DeInit
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGTR_Config
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF183D_UART_Init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Init
</UL>

<P><STRONG><a name="[35f]"></a>FW_UART_RC_ISR</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fw_uart.o(i.FW_UART_RC_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FW_UART_RC_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRQHandler
</UL>

<P><STRONG><a name="[35d]"></a>FW_UART_RX_ISR</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fw_uart.o(i.FW_UART_RX_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FW_UART_RX_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRQHandler
</UL>

<P><STRONG><a name="[244]"></a>FW_UART_Read</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, fw_uart.o(i.FW_UART_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FW_UART_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Read_Msg
</UL>

<P><STRONG><a name="[23a]"></a>FW_UART_ReadFirst</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, fw_uart.o(i.FW_UART_ReadFirst))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = FW_UART_ReadFirst &rArr; RB_Read_Fisrt &rArr; RB_Find_StringCS &rArr; Strfind
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read_Fisrt
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_Mode
</UL>

<P><STRONG><a name="[2ad]"></a>FW_UART_ReadHL</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, fw_uart.o(i.FW_UART_ReadHL))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = FW_UART_ReadHL &rArr; RB_Read_HL &rArr; RB_Read &rArr; RB_Get_DataLength &rArr; FW_Unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read_HL
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF183D_UART_GetTemprature
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF183D_UART_GetPressure
</UL>

<P><STRONG><a name="[242]"></a>FW_UART_ReadInter</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, fw_uart.o(i.FW_UART_ReadInter))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = FW_UART_ReadInter &rArr; RB_Read_Inter &rArr; RB_Find_StringCS &rArr; Strfind
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read_Inter
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Read_Inter
</UL>

<P><STRONG><a name="[356]"></a>FW_UART_SetPort</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fw_uart.o(i.FW_UART_SetPort))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DeInit
</UL>

<P><STRONG><a name="[247]"></a>FW_UART_StringIsExist</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, fw_uart.o(i.FW_UART_StringIsExist))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = FW_UART_StringIsExist &rArr; RB_String_IsExist &rArr; RB_Find_StringCS_RL1 &rArr; Strfind
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_String_IsExist
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_String_IsExist
</UL>

<P><STRONG><a name="[361]"></a>FW_UART_TC_ISR</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fw_uart.o(i.FW_UART_TC_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FW_UART_TC_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRQHandler
</UL>

<P><STRONG><a name="[360]"></a>FW_UART_TX_ISR</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fw_uart.o(i.FW_UART_TX_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FW_UART_TX_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRQHandler
</UL>

<P><STRONG><a name="[249]"></a>FW_UART_Write</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, fw_uart.o(i.FW_UART_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FW_UART_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF183D_UART_GetTemprature
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF183D_UART_GetPressure
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Write_Msg
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Write_Cmd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[1cf]"></a>FW_Unlock</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fw_system.o(i.FW_Unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FW_Unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Calibration
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Write
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_String_IsExist
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read_Inter
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read_HL
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read_Fisrt
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_PMB_Write
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_PMB_Set
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Get_DataLength
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Clear_Buffer
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Data_IsCC
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_ServerInfo
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_LinkState
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_AP_Probe
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_AP_Link
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_IH_TX
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_IH_TC
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_IH_RX
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_IH_RC
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_WriteINT
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_WriteDMA
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_IH_TX
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_IH_TC
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_IH_RX
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_IH_RC
</UL>

<P><STRONG><a name="[2b1]"></a>Flash_Erase_Sector</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, fw_flash.o(i.Flash_Erase_Sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Flash_Erase_Sector &rArr; Flash_Get_SectorIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Get_Size
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Get_SectorIndex
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
</UL>

<P><STRONG><a name="[2b5]"></a>Flash_Get_Base</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fw_flash.o(i.Flash_Get_Base))
<BR><BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Direct
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Get_SectorIndex
</UL>

<P><STRONG><a name="[2b4]"></a>Flash_Get_SectorIndex</STRONG> (Thumb, 112 bytes, Stack size 48 bytes, fw_flash.o(i.Flash_Get_SectorIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Flash_Get_SectorIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Get_Base
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Erase_Sector
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Get_SectorSize
</UL>

<P><STRONG><a name="[2b6]"></a>Flash_Get_SectorSize</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, fw_flash.o(i.Flash_Get_SectorSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Flash_Get_SectorSize &rArr; Flash_Get_SectorIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Get_Size
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Get_SectorIndex
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
</UL>

<P><STRONG><a name="[2b2]"></a>Flash_Get_Size</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fw_flash.o(i.Flash_Get_Size))
<BR><BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Direct
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Erase_Sector
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Get_SectorSize
</UL>

<P><STRONG><a name="[2b7]"></a>Flash_Read</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, fw_flash.o(i.Flash_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Flash_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Get_Size
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Get_Base
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_multi_blocks
</UL>

<P><STRONG><a name="[2b8]"></a>Flash_Write</STRONG> (Thumb, 278 bytes, Stack size 64 bytes, fw_flash.o(i.Flash_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Flash_Write &rArr; Flash_Erase_Sector &rArr; Flash_Get_SectorIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Direct
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Erase_Sector
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MM_Malloc
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MM_Free
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Get_SectorSize
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_multi_blocks
</UL>

<P><STRONG><a name="[2bb]"></a>Flash_Write_Direct</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, fw_flash.o(i.Flash_Write_Direct))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Flash_Write_Direct
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Get_Size
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Get_Base
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
</UL>

<P><STRONG><a name="[20b]"></a>GPIO_PinInit</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, fw_gpio.o(i.GPIO_PinInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Init
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF183D_OWI_Init
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
</UL>

<P><STRONG><a name="[27e]"></a>GPIO_PinRead</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, fw_gpio.o(i.GPIO_PinRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_PinRead
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Read
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Read
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Read
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Read
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_IN
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Read
</UL>

<P><STRONG><a name="[285]"></a>GPIO_PinWrite</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, fw_gpio.o(i.GPIO_PinWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF183D_OWI_Init
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
</UL>

<P><STRONG><a name="[2bc]"></a>GPIO_PortInit</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, fw_gpio.o(i.GPIO_PortInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_PortInit
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test
</UL>

<P><STRONG><a name="[2bd]"></a>GPIO_PortWrite</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, fw_gpio.o(i.GPIO_PortWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_PortWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test
</UL>

<P><STRONG><a name="[19]"></a>HardFault_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f30x_it.o(i.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HardFault_Handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f2]"></a>MBlock_Read_SelfAlign</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, mblock.o(i.MBlock_Read_SelfAlign))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MBlock_Read_SelfAlign &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_Read
</UL>

<P><STRONG><a name="[1f4]"></a>MBlock_Write_SelfAlign</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, mblock.o(i.MBlock_Write_SelfAlign))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MBlock_Write_SelfAlign &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_Write
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_Write
</UL>

<P><STRONG><a name="[2ba]"></a>MM_Free</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mm.o(i.MM_Free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MM_Free
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGTR_Config
</UL>

<P><STRONG><a name="[2b9]"></a>MM_Malloc</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mm.o(i.MM_Malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MM_Malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGTR_Config
</UL>

<P><STRONG><a name="[1a]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f30x_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ll_system.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a9]"></a>RB_Clear_Buffer</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rbuffer.o(i.RB_Clear_Buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RB_Clear_Buffer &rArr; FW_Unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_String_IsExist
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read_Inter
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read_Fisrt
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_ClearFIFO
</UL>

<P><STRONG><a name="[2aa]"></a>RB_Get_Buffer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rbuffer.o(i.RB_Get_Buffer))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_GetFIFOBBase
</UL>

<P><STRONG><a name="[2f3]"></a>RB_Get_BufferSize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rbuffer.o(i.RB_Get_BufferSize))
<BR><BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Write
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_String_IsExist
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read_Inter
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read_Fisrt
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Get_DataLength
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Find_StringCS_RL1
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Find_StringCS
</UL>

<P><STRONG><a name="[2a1]"></a>RB_Get_DataLength</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, rbuffer.o(i.RB_Get_DataLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RB_Get_DataLength &rArr; FW_Unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Lock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Get_BufferSize
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Write
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_String_IsExist
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read_Inter
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read_HL
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read_Fisrt
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_GetDataLength
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_WriteINT
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_ReadINT
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_IH_TC
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_WriteINT
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_WriteDMA
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_IH_TC
</UL>

<P><STRONG><a name="[2a4]"></a>RB_PMB_Set</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, rbuffer.o(i.RB_PMB_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RB_PMB_Set &rArr; FW_Unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_ReadINT
</UL>

<P><STRONG><a name="[2a5]"></a>RB_PMB_Write</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, rbuffer.o(i.RB_PMB_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RB_PMB_Write &rArr; FW_Unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_WriteINT
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_ReadINT
</UL>

<P><STRONG><a name="[2a2]"></a>RB_Read</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, rbuffer.o(i.RB_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RB_Read &rArr; RB_Get_DataLength &rArr; FW_Unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Lock
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Get_DataLength
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Get_BufferSize
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read_Inter
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read_HL
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read_Fisrt
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_IH_TX
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_IH_TC
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_WriteDMA
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_ReadINT
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_ReadDMA
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_IH_TX
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_IH_TC
</UL>

<P><STRONG><a name="[2ac]"></a>RB_Read_Fisrt</STRONG> (Thumb, 244 bytes, Stack size 56 bytes, rbuffer.o(i.RB_Read_Fisrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = RB_Read_Fisrt &rArr; RB_Find_StringCS &rArr; Strfind
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Lock
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Get_DataLength
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Get_BufferSize
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Clear_Buffer
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strfind
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Offset_Head
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Find_StringCS
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Data_IsCC
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_ReadFirst
</UL>

<P><STRONG><a name="[2ae]"></a>RB_Read_HL</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, rbuffer.o(i.RB_Read_HL))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = RB_Read_HL &rArr; RB_Read &rArr; RB_Get_DataLength &rArr; FW_Unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Lock
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Get_DataLength
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Offset_Index
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Offset_Head
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_ReadHL
</UL>

<P><STRONG><a name="[2af]"></a>RB_Read_Inter</STRONG> (Thumb, 464 bytes, Stack size 72 bytes, rbuffer.o(i.RB_Read_Inter))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = RB_Read_Inter &rArr; RB_Find_StringCS &rArr; Strfind
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Lock
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Get_DataLength
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Get_BufferSize
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Clear_Buffer
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strfind
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Offset_Head
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Find_StringCS
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Data_IsCC
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_ReadInter
</UL>

<P><STRONG><a name="[2b0]"></a>RB_String_IsExist</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, rbuffer.o(i.RB_String_IsExist))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = RB_String_IsExist &rArr; RB_Find_StringCS_RL1 &rArr; Strfind
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Lock
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Get_DataLength
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Get_BufferSize
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Clear_Buffer
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strfind
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Find_StringCS_RL1
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Data_IsCC
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_StringIsExist
</UL>

<P><STRONG><a name="[2a0]"></a>RB_Write</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, rbuffer.o(i.RB_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RB_Write &rArr; RB_Get_DataLength &rArr; FW_Unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Lock
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Get_DataLength
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Get_BufferSize
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_IH_RX
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_IH_RC
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_WriteINT
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_WriteDMA
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_IH_RX
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_IH_RC
</UL>

<P><STRONG><a name="[4a]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ll_rtc.o(i.RTC_Alarm_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_Alarm_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_lwoff_wait
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_flag_get
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_flag_clear
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_flag_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>RTC_IRQHandler</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, ll_rtc.o(i.RTC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_IRQHandler &rArr; RTC_TickTock
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_lwoff_wait
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_flag_get
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_flag_clear
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TickTock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2fd]"></a>RTC_TickTock</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fw_rtc.o(i.RTC_TickTock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_TickTock
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[294]"></a>SGTR_Config</STRONG> (Thumb, 1150 bytes, Stack size 16 bytes, serial.o(i.SGTR_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SGTR_Config &rArr; MM_Malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MM_Malloc
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MM_Free
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_Init
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_I2C_Init
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_Init
</UL>

<P><STRONG><a name="[292]"></a>SGTR_DeInit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, serial.o(i.SGTR_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SGTR_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_Init
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_I2C_Init
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_Init
</UL>

<P><STRONG><a name="[44]"></a>SPI0_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ll_spi.o(i.SPI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI0_IRQHandler &rArr; SPI_IRQHandler &rArr; spi_i2s_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>SPI1_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ll_spi.o(i.SPI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI1_IRQHandler &rArr; SPI_IRQHandler &rArr; spi_i2s_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>SPI2_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ll_spi.o(i.SPI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI2_IRQHandler &rArr; SPI_IRQHandler &rArr; spi_i2s_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>SysTick_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ll_delay.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_inc
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_TickTock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>SystemInit</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, system_gd32f30x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit &rArr; system_clock_config
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(.text)
</UL>
<P><STRONG><a name="[3a]"></a>TIMER0_UP_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ll_timer.o(i.TIMER0_UP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIMER0_UP_IRQHandler &rArr; TIMER_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ll_timer.o(i.TIMER1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIMER1_IRQHandler &rArr; TIMER_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ll_timer.o(i.TIMER2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIMER2_IRQHandler &rArr; TIMER_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ll_timer.o(i.TIMER3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIMER3_IRQHandler &rArr; TIMER_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ll_timer.o(i.TIMER4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIMER4_IRQHandler &rArr; TIMER_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>TIMER5_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ll_timer.o(i.TIMER5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIMER5_IRQHandler &rArr; TIMER_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>TIMER6_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ll_timer.o(i.TIMER6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIMER6_IRQHandler &rArr; TIMER_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>TIMER7_UP_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ll_timer.o(i.TIMER7_UP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIMER7_UP_IRQHandler &rArr; TIMER_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34f]"></a>Test</STRONG> (Thumb, 508 bytes, Stack size 0 bytes, hc595.o(i.Test))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Test &rArr; FW_Device_Find &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Ms
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_Find
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortWrite
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortInit
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[2d3]"></a>Time_GetCounter</STRONG> (Thumb, 174 bytes, Stack size 20 bytes, time.o(i.Time_GetCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Time_GetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_IsLeapYear
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRTC_Set_Alarm
</UL>

<P><STRONG><a name="[350]"></a>Time_IsLeapYear</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, time.o(i.Time_IsLeapYear))
<BR><BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_GetCounter
</UL>

<P><STRONG><a name="[55]"></a>UART3_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ll_uart.o(i.UART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART3_IRQHandler &rArr; UART_IRQHandler &rArr; usart_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>UART4_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ll_uart.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART4_IRQHandler &rArr; UART_IRQHandler &rArr; usart_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>USART0_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ll_uart.o(i.USART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART0_IRQHandler &rArr; UART_IRQHandler &rArr; usart_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>USART1_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ll_uart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART1_IRQHandler &rArr; UART_IRQHandler &rArr; usart_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>USART2_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ll_uart.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART2_IRQHandler &rArr; UART_IRQHandler &rArr; usart_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>USBD_LP_CAN0_RX0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ll_usb.o(i.USBD_LP_CAN0_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = USBD_LP_CAN0_RX0_IRQHandler &rArr; usbd_isr &rArr; usbd_intf_lpst &rArr; usbd_setup_transaction &rArr; usbd_device_class_request &rArr; usbd_enum_error &rArr; usbd_ep_stall
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f30x_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[149]"></a>WF200D_Press_Formula</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wf200d.o(i.WF200D_Press_Formula))
<BR>[Address Reference Count : 1]<UL><LI> wf200d.o(.constdata)
</UL>
<P><STRONG><a name="[379]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3c2]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[2bf]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[3c3]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[3c4]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[1b5]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[3c5]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[5]"></a>free</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, mallocr.o(i.__free$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mm.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>malloc</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, mallocr.o(i.__malloc$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mm.o(.data)
</UL>
<P><STRONG><a name="[3c6]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[3c7]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[3c8]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[1ce]"></a>adc_calibration_enable</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, gd32f30x_adc.o(i.adc_calibration_enable))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Calibration
</UL>

<P><STRONG><a name="[1e4]"></a>adc_channel_length_config</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, gd32f30x_adc.o(i.adc_channel_length_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = adc_channel_length_config
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[1e1]"></a>adc_data_alignment_config</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32f30x_adc.o(i.adc_data_alignment_config))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[1da]"></a>adc_deinit</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, gd32f30x_adc.o(i.adc_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adc_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[1cb]"></a>adc_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f30x_adc.o(i.adc_disable))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CTL
</UL>

<P><STRONG><a name="[1e5]"></a>adc_dma_mode_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f30x_adc.o(i.adc_dma_mode_enable))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[1ca]"></a>adc_enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f30x_adc.o(i.adc_enable))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Calibration
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CTL
</UL>

<P><STRONG><a name="[1e6]"></a>adc_external_trigger_config</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, gd32f30x_adc.o(i.adc_external_trigger_config))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[1e0]"></a>adc_external_trigger_source_config</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, gd32f30x_adc.o(i.adc_external_trigger_source_config))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[1ea]"></a>adc_interrupt_enable</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, gd32f30x_adc.o(i.adc_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[1e3]"></a>adc_mode_config</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32f30x_adc.o(i.adc_mode_config))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[1d3]"></a>adc_regular_channel_config</STRONG> (Thumb, 172 bytes, Stack size 20 bytes, gd32f30x_adc.o(i.adc_regular_channel_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = adc_regular_channel_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Channel_Config
</UL>

<P><STRONG><a name="[1e2]"></a>adc_resolution_config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gd32f30x_adc.o(i.adc_resolution_config))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[1e8]"></a>adc_software_trigger_enable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gd32f30x_adc.o(i.adc_software_trigger_enable))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[1df]"></a>adc_special_function_config</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, gd32f30x_adc.o(i.adc_special_function_config))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[1d4]"></a>adc_tempsensor_vrefint_enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f30x_adc.o(i.adc_tempsensor_vrefint_enable))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Channel_Config
</UL>

<P><STRONG><a name="[383]"></a>bbb_report_array_to_host</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, bbb_scsi_driver.o(i.bbb_report_array_to_host))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = bbb_report_array_to_host &rArr; usbd_ep_tx &rArr; usbd_ep_data_write
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_tx
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_rx
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_set_csw
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_scsi_command
</UL>

<P><STRONG><a name="[385]"></a>bbb_set_csw</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bbb_scsi_driver.o(i.bbb_set_csw))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bbb_set_csw
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_scsi_command
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_report_array_to_host
</UL>

<P><STRONG><a name="[1f3]"></a>bkp_read_data</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, gd32f30x_bkp.o(i.bkp_read_data))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_Read_Gran
</UL>

<P><STRONG><a name="[1f5]"></a>bkp_write_data</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, gd32f30x_bkp.o(i.bkp_write_data))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_Write_Gran
</UL>

<P><STRONG><a name="[1fc]"></a>can_deinit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gd32f30x_can.o(i.can_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = can_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DeInit
</UL>

<P><STRONG><a name="[204]"></a>can_filter_init</STRONG> (Thumb, 262 bytes, Stack size 8 bytes, gd32f30x_can.o(i.can_filter_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = can_filter_init
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
</UL>

<P><STRONG><a name="[203]"></a>can_init</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, gd32f30x_can.o(i.can_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = can_init
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
</UL>

<P><STRONG><a name="[206]"></a>can_interrupt_disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f30x_can.o(i.can_interrupt_disable))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TX_CTL
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_RX_CTL
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
</UL>

<P><STRONG><a name="[207]"></a>can_interrupt_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f30x_can.o(i.can_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TX_CTL
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_RX_CTL
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
</UL>

<P><STRONG><a name="[1fd]"></a>can_message_receive</STRONG> (Thumb, 228 bytes, Stack size 8 bytes, gd32f30x_can.o(i.can_message_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = can_message_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Frame_Read
</UL>

<P><STRONG><a name="[1ff]"></a>can_message_transmit</STRONG> (Thumb, 332 bytes, Stack size 12 bytes, gd32f30x_can.o(i.can_message_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = can_message_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Frame_Write
</UL>

<P><STRONG><a name="[226]"></a>dac_data_set</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, gd32f30x_dac.o(i.dac_data_set))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Write
</UL>

<P><STRONG><a name="[20a]"></a>dac_deinit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gd32f30x_dac.o(i.dac_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dac_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_DeInit
</UL>

<P><STRONG><a name="[2e5]"></a>dac_disable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gd32f30x_dac.o(i.dac_disable))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DAC_CTL
</UL>

<P><STRONG><a name="[20f]"></a>dac_dma_enable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gd32f30x_dac.o(i.dac_dma_enable))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Init
</UL>

<P><STRONG><a name="[216]"></a>dac_enable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gd32f30x_dac.o(i.dac_enable))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DAC_CTL
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Init
</UL>

<P><STRONG><a name="[212]"></a>dac_lfsr_noise_config</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, gd32f30x_dac.o(i.dac_lfsr_noise_config))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Init
</UL>

<P><STRONG><a name="[215]"></a>dac_output_buffer_disable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gd32f30x_dac.o(i.dac_output_buffer_disable))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Init
</UL>

<P><STRONG><a name="[214]"></a>dac_output_buffer_enable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gd32f30x_dac.o(i.dac_output_buffer_enable))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Init
</UL>

<P><STRONG><a name="[218]"></a>dac_output_value_get</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32f30x_dac.o(i.dac_output_value_get))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Read
</UL>

<P><STRONG><a name="[21a]"></a>dac_software_trigger_disable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gd32f30x_dac.o(i.dac_software_trigger_disable))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Trigger_CTL
</UL>

<P><STRONG><a name="[219]"></a>dac_software_trigger_enable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gd32f30x_dac.o(i.dac_software_trigger_enable))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Trigger_CTL
</UL>

<P><STRONG><a name="[213]"></a>dac_triangle_noise_config</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, gd32f30x_dac.o(i.dac_triangle_noise_config))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Init
</UL>

<P><STRONG><a name="[21e]"></a>dac_trigger_disable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gd32f30x_dac.o(i.dac_trigger_disable))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Trigger_CTL
</UL>

<P><STRONG><a name="[210]"></a>dac_trigger_enable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gd32f30x_dac.o(i.dac_trigger_enable))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Trigger_CTL
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Init
</UL>

<P><STRONG><a name="[20c]"></a>dac_trigger_source_config</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, gd32f30x_dac.o(i.dac_trigger_source_config))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Init
</UL>

<P><STRONG><a name="[211]"></a>dac_wave_mode_config</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, gd32f30x_dac.o(i.dac_wave_mode_config))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Init
</UL>

<P><STRONG><a name="[21c]"></a>dma_channel_disable</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, gd32f30x_dma.o(i.dma_channel_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_channel_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TX_CTL
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Set_TDL
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RX_CTL
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Trigger_CTL
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TX_CTL
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Read
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RX_CTL
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>

<P><STRONG><a name="[1de]"></a>dma_channel_enable</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, gd32f30x_dma.o(i.dma_channel_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_channel_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TX_CTL
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Set_TDL
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RX_CTL
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Trigger_CTL
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TX_CTL
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Read
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RX_CTL
</UL>

<P><STRONG><a name="[20e]"></a>dma_circulation_disable</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, gd32f30x_dma.o(i.dma_circulation_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_circulation_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>

<P><STRONG><a name="[1dd]"></a>dma_circulation_enable</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, gd32f30x_dma.o(i.dma_circulation_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_circulation_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[1d9]"></a>dma_deinit</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, gd32f30x_dma.o(i.dma_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>

<P><STRONG><a name="[20d]"></a>dma_flag_clear</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gd32f30x_dma.o(i.dma_flag_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dma_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Set_TDL
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Get_RDL
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Trigger_CTL
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Read
</UL>

<P><STRONG><a name="[21b]"></a>dma_flag_get</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, gd32f30x_dma.o(i.dma_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dma_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Wait_TC
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Wait_RC
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Trigger_CTL
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Read
</UL>

<P><STRONG><a name="[1dc]"></a>dma_init</STRONG> (Thumb, 302 bytes, Stack size 24 bytes, gd32f30x_dma.o(i.dma_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dma_init
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>

<P><STRONG><a name="[31e]"></a>dma_memory_address_config</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gd32f30x_dma.o(i.dma_memory_address_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_memory_address_config
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Set_TDL
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Get_RDL
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Read
</UL>

<P><STRONG><a name="[322]"></a>dma_memory_increase_enable</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, gd32f30x_dma.o(i.dma_memory_increase_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_memory_increase_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write
</UL>

<P><STRONG><a name="[317]"></a>dma_memory_to_memory_disable</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, gd32f30x_dma.o(i.dma_memory_to_memory_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_memory_to_memory_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>

<P><STRONG><a name="[21d]"></a>dma_transfer_number_config</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gd32f30x_dma.o(i.dma_transfer_number_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_transfer_number_config
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Set_TDL
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Trigger_CTL
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Read
</UL>

<P><STRONG><a name="[359]"></a>dma_transfer_number_get</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gd32f30x_dma.o(i.dma_transfer_number_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_transfer_number_get
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_and_channel_check
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Get_RDL
</UL>

<P><STRONG><a name="[2e4]"></a>exmc_norsram_enable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32f30x_exmc.o(i.exmc_norsram_enable))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Bus_Init
</UL>

<P><STRONG><a name="[2e3]"></a>exmc_norsram_init</STRONG> (Thumb, 280 bytes, Stack size 16 bytes, gd32f30x_exmc.o(i.exmc_norsram_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = exmc_norsram_init
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Bus_Init
</UL>

<P><STRONG><a name="[2fc]"></a>exti_flag_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd32f30x_exti.o(i.exti_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
</UL>

<P><STRONG><a name="[252]"></a>exti_init</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, gd32f30x_exti.o(i.exti_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = exti_init
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRTC_Set_Alarm
</UL>

<P><STRONG><a name="[24c]"></a>exti_interrupt_disable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f30x_exti.o(i.exti_interrupt_disable))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_CTL
</UL>

<P><STRONG><a name="[24b]"></a>exti_interrupt_enable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f30x_exti.o(i.exti_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_CTL
</UL>

<P><STRONG><a name="[24f]"></a>exti_interrupt_flag_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd32f30x_exti.o(i.exti_interrupt_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_IRQHandler
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRTC_Set_Alarm
</UL>

<P><STRONG><a name="[24d]"></a>exti_interrupt_flag_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f30x_exti.o(i.exti_interrupt_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_IRQHandler
</UL>

<P><STRONG><a name="[388]"></a>flash_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, flash_access.o(i.flash_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = flash_init &rArr; FW_Device_Find &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_Find
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_init
</UL>

<P><STRONG><a name="[389]"></a>flash_read_multi_blocks</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, flash_access.o(i.flash_read_multi_blocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = flash_read_multi_blocks &rArr; Flash_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_scsi_command
</UL>

<P><STRONG><a name="[38a]"></a>flash_write_multi_blocks</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, flash_access.o(i.flash_write_multi_blocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = flash_write_multi_blocks &rArr; Flash_Write &rArr; Flash_Erase_Sector &rArr; Flash_Get_SectorIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_scsi_command
</UL>

<P><STRONG><a name="[38b]"></a>fmc_bank0_ready_wait</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, gd32f30x_fmc.o(i.fmc_bank0_ready_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = fmc_bank0_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_bank0_state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_word_program
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_page_erase
</UL>

<P><STRONG><a name="[38c]"></a>fmc_bank0_state_get</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, gd32f30x_fmc.o(i.fmc_bank0_state_get))
<BR><BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_bank0_ready_wait
</UL>

<P><STRONG><a name="[38d]"></a>fmc_bank1_ready_wait</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, gd32f30x_fmc.o(i.fmc_bank1_ready_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = fmc_bank1_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_bank1_state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_word_program
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_page_erase
</UL>

<P><STRONG><a name="[38e]"></a>fmc_bank1_state_get</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, gd32f30x_fmc.o(i.fmc_bank1_state_get))
<BR><BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_bank1_ready_wait
</UL>

<P><STRONG><a name="[2c1]"></a>fmc_flag_clear</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f30x_fmc.o(i.fmc_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_Write
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_Erase_Sector
</UL>

<P><STRONG><a name="[2c3]"></a>fmc_lock</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gd32f30x_fmc.o(i.fmc_lock))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_Write
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_Erase_Sector
</UL>

<P><STRONG><a name="[2c2]"></a>fmc_page_erase</STRONG> (Thumb, 210 bytes, Stack size 12 bytes, gd32f30x_fmc.o(i.fmc_page_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fmc_page_erase &rArr; fmc_bank1_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_bank1_ready_wait
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_bank0_ready_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_Erase_Sector
</UL>

<P><STRONG><a name="[2c0]"></a>fmc_unlock</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, gd32f30x_fmc.o(i.fmc_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_Write
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_Erase_Sector
</UL>

<P><STRONG><a name="[2c5]"></a>fmc_word_program</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, gd32f30x_fmc.o(i.fmc_word_program))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fmc_word_program &rArr; fmc_bank1_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_bank1_ready_wait
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_bank0_ready_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_Write_Gran
</UL>

<P><STRONG><a name="[329]"></a>fmc_wscnt_set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f30x_fmc.o(i.fmc_wscnt_set))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[bf]"></a>fputc</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, fw_uart.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fputc &rArr; FW_UART_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[2d9]"></a>fwdgt_config</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, gd32f30x_fwdgt.o(i.fwdgt_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = fwdgt_config
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
</UL>

<P><STRONG><a name="[2d7]"></a>fwdgt_counter_reload</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f30x_fwdgt.o(i.fwdgt_counter_reload))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_FeedDog
</UL>

<P><STRONG><a name="[2da]"></a>fwdgt_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f30x_fwdgt.o(i.fwdgt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
</UL>

<P><STRONG><a name="[2d8]"></a>fwdgt_write_disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f30x_fwdgt.o(i.fwdgt_write_disable))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_FeedDog
</UL>

<P><STRONG><a name="[2d6]"></a>fwdgt_write_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f30x_fwdgt.o(i.fwdgt_write_enable))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_FeedDog
</UL>

<P><STRONG><a name="[2ed]"></a>gpio_bit_reset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f30x_gpio.o(i.gpio_bit_reset))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin_Write
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_scsi_command
</UL>

<P><STRONG><a name="[2ec]"></a>gpio_bit_set</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f30x_gpio.o(i.gpio_bit_set))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin_Write
</UL>

<P><STRONG><a name="[2e8]"></a>gpio_deinit</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, gd32f30x_gpio.o(i.gpio_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_DeInit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin_DeInit
</UL>

<P><STRONG><a name="[251]"></a>gpio_exti_source_select</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, gd32f30x_gpio.o(i.gpio_exti_source_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_exti_source_select
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
</UL>

<P><STRONG><a name="[2ea]"></a>gpio_init</STRONG> (Thumb, 188 bytes, Stack size 20 bytes, gd32f30x_gpio.o(i.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin_Init
</UL>

<P><STRONG><a name="[2eb]"></a>gpio_input_bit_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f30x_gpio.o(i.gpio_input_bit_get))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin_Read
</UL>

<P><STRONG><a name="[2ef]"></a>gpio_input_port_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f30x_gpio.o(i.gpio_input_port_get))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_Read
</UL>

<P><STRONG><a name="[2e9]"></a>gpio_output_bit_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f30x_gpio.o(i.gpio_output_bit_get))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin_GetOutput
</UL>

<P><STRONG><a name="[2ee]"></a>gpio_output_port_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f30x_gpio.o(i.gpio_output_port_get))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_GetOutput
</UL>

<P><STRONG><a name="[202]"></a>gpio_pin_remap_config</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, gd32f30x_gpio.o(i.gpio_pin_remap_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_pin_remap_config
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IO_Init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_IO_Init
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_IO_Init
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_IO_Init
</UL>

<P><STRONG><a name="[2f0]"></a>gpio_port_write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f30x_gpio.o(i.gpio_port_write))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_Write
</UL>

<P><STRONG><a name="[325]"></a>lv_tick_inc</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_hal_tick.o(i.lv_tick_inc))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1c8]"></a>$Super$$main</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = $Super$$main &rArr; Test &rArr; FW_Device_Find &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3]"></a>msc_data_handler</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, msc_core.o(i.msc_data_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = msc_data_handler &rArr; process_scsi_command &rArr; flash_write_multi_blocks &rArr; Flash_Write &rArr; Flash_Erase_Sector &rArr; Flash_Get_SectorIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_command_parse
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_scsi_command
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_usb.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>msc_deinit</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, msc_core.o(i.msc_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = msc_deinit &rArr; usbd_ep_rx
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_deinit
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_rx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_usb.o(.data)
</UL>
<P><STRONG><a name="[0]"></a>msc_init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, msc_core.o(i.msc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = msc_init &rArr; flash_init &rArr; FW_Device_Find &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_init
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_rx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_usb.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>msc_req_handler</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, msc_core.o(i.msc_req_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = msc_req_handler &rArr; usbd_ep_tx &rArr; usbd_ep_data_write
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_stall
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enum_error
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_tx
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_rx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_usb.o(.data)
</UL>
<P><STRONG><a name="[1e9]"></a>nvic_irq_enable</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, gd32f30x_misc.o(i.nvic_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_set
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Timing_Init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWM_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRTC_Set_Alarm
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRTC_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>

<P><STRONG><a name="[395]"></a>nvic_priority_group_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f30x_misc.o(i.nvic_priority_group_set))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>

<P><STRONG><a name="[331]"></a>nvic_vector_table_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f30x_misc.o(i.nvic_vector_table_set))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Set_VectorTable
</UL>

<P><STRONG><a name="[2c4]"></a>ob_spc_get</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gd32f30x_fmc.o(i.ob_spc_get))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IFlash_Get_PE
</UL>

<P><STRONG><a name="[1f0]"></a>pmu_backup_write_enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f30x_pmu.o(i.pmu_backup_write_enable))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_Init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRTC_Init
</UL>

<P><STRONG><a name="[38f]"></a>process_scsi_command</STRONG> (Thumb, 1122 bytes, Stack size 24 bytes, bbb_scsi_driver.o(i.process_scsi_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = process_scsi_command &rArr; flash_write_multi_blocks &rArr; Flash_Write &rArr; Flash_Erase_Sector &rArr; Flash_Get_SectorIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_tx
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_rx
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_multi_blocks
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_multi_blocks
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_set_csw
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_report_array_to_host
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_data_handler
</UL>

<P><STRONG><a name="[1db]"></a>rcu_adc_clock_config</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, gd32f30x_rcu.o(i.rcu_adc_clock_config))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[32d]"></a>rcu_ahb_clock_config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f30x_rcu.o(i.rcu_ahb_clock_config))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[327]"></a>rcu_all_reset_flag_clear</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f30x_rcu.o(i.rcu_all_reset_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Clear_RSTSource
</UL>

<P><STRONG><a name="[32e]"></a>rcu_apb1_clock_config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f30x_rcu.o(i.rcu_apb1_clock_config))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[32f]"></a>rcu_apb2_clock_config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f30x_rcu.o(i.rcu_apb2_clock_config))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[1f1]"></a>rcu_bkp_reset_disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f30x_rcu.o(i.rcu_bkp_reset_disable))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_Init
</UL>

<P><STRONG><a name="[330]"></a>rcu_clock_freq_get</STRONG> (Thumb, 310 bytes, Stack size 84 bytes, gd32f30x_rcu.o(i.rcu_clock_freq_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
</UL>

<P><STRONG><a name="[32a]"></a>rcu_deinit</STRONG> (Thumb, 106 bytes, Stack size 4 bytes, gd32f30x_rcu.o(i.rcu_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rcu_deinit &rArr; rcu_osci_stab_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_osci_stab_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[328]"></a>rcu_flag_get</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gd32f30x_rcu.o(i.rcu_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Get_RSTSource
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_osci_stab_wait
</UL>

<P><STRONG><a name="[2cc]"></a>rcu_osci_on</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f30x_rcu.o(i.rcu_osci_on))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRTC_Init
</UL>

<P><STRONG><a name="[2cd]"></a>rcu_osci_stab_wait</STRONG> (Thumb, 268 bytes, Stack size 20 bytes, gd32f30x_rcu.o(i.rcu_osci_stab_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rcu_osci_stab_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_deinit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRTC_Init
</UL>

<P><STRONG><a name="[1d8]"></a>rcu_periph_clock_enable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f30x_rcu.o(i.rcu_periph_clock_enable))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin_Init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Timing_Init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWM_Init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Encoder_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Bus_Init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_Init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRTC_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>

<P><STRONG><a name="[382]"></a>rcu_periph_reset_disable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f30x_rcu.o(i.rcu_periph_reset_disable))
<BR><BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_deinit
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_deinit
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_deinit
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_deinit
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_deinit
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
</UL>

<P><STRONG><a name="[381]"></a>rcu_periph_reset_enable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f30x_rcu.o(i.rcu_periph_reset_enable))
<BR><BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_deinit
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_deinit
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_deinit
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_deinit
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_deinit
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
</UL>

<P><STRONG><a name="[32b]"></a>rcu_pll_config</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32f30x_rcu.o(i.rcu_pll_config))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[2ce]"></a>rcu_rtc_clock_config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f30x_rcu.o(i.rcu_rtc_clock_config))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRTC_Init
</UL>

<P><STRONG><a name="[32c]"></a>rcu_system_clock_source_config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f30x_rcu.o(i.rcu_system_clock_source_config))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[36f]"></a>rcu_usb_clock_config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f30x_rcu.o(i.rcu_usb_clock_config))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
</UL>

<P><STRONG><a name="[3a5]"></a>resume_mcu</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usbd_pwr.o(i.resume_mcu))
<BR><BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_intf_wakeup
</UL>

<P><STRONG><a name="[2d4]"></a>rtc_alarm_config</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, gd32f30x_rtc.o(i.rtc_alarm_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rtc_alarm_config
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration_mode_exit
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration_mode_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRTC_Set_Alarm
</UL>

<P><STRONG><a name="[396]"></a>rtc_configuration_mode_enter</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f30x_rtc.o(i.rtc_configuration_mode_enter))
<BR><BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_prescaler_set
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_counter_set
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_alarm_config
</UL>

<P><STRONG><a name="[397]"></a>rtc_configuration_mode_exit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f30x_rtc.o(i.rtc_configuration_mode_exit))
<BR><BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_prescaler_set
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_counter_set
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_alarm_config
</UL>

<P><STRONG><a name="[2cb]"></a>rtc_counter_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f30x_rtc.o(i.rtc_counter_get))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRTC_Get_Counter
</UL>

<P><STRONG><a name="[2d5]"></a>rtc_counter_set</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, gd32f30x_rtc.o(i.rtc_counter_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rtc_counter_set
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration_mode_exit
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration_mode_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRTC_Set_Counter
</UL>

<P><STRONG><a name="[2fb]"></a>rtc_flag_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f30x_rtc.o(i.rtc_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
</UL>

<P><STRONG><a name="[2fa]"></a>rtc_flag_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f30x_rtc.o(i.rtc_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
</UL>

<P><STRONG><a name="[2d1]"></a>rtc_interrupt_enable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f30x_rtc.o(i.rtc_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRTC_Init
</UL>

<P><STRONG><a name="[2d0]"></a>rtc_lwoff_wait</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f30x_rtc.o(i.rtc_lwoff_wait))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRTC_Set_Counter
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRTC_Set_Alarm
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRTC_Init
</UL>

<P><STRONG><a name="[2d2]"></a>rtc_prescaler_set</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, gd32f30x_rtc.o(i.rtc_prescaler_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rtc_prescaler_set
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration_mode_exit
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration_mode_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRTC_Init
</UL>

<P><STRONG><a name="[2cf]"></a>rtc_register_sync_wait</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f30x_rtc.o(i.rtc_register_sync_wait))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRTC_Init
</UL>

<P><STRONG><a name="[390]"></a>scsi_command_parse</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, bbb_scsi_driver.o(i.scsi_command_parse))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_data_handler
</UL>

<P><STRONG><a name="[31b]"></a>spi_crc_polynomial_set</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f30x_spi.o(i.spi_crc_polynomial_set))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>

<P><STRONG><a name="[30b]"></a>spi_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f30x_spi.o(i.spi_disable))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CTL
</UL>

<P><STRONG><a name="[318]"></a>spi_dma_disable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32f30x_spi.o(i.spi_dma_disable))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Read
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>

<P><STRONG><a name="[31f]"></a>spi_dma_enable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32f30x_spi.o(i.spi_dma_enable))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Read
</UL>

<P><STRONG><a name="[30a]"></a>spi_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f30x_spi.o(i.spi_enable))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CTL
</UL>

<P><STRONG><a name="[31c]"></a>spi_i2s_data_receive</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f30x_spi.o(i.spi_i2s_data_receive))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Read
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RX_Byte
</UL>

<P><STRONG><a name="[320]"></a>spi_i2s_data_transmit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f30x_spi.o(i.spi_i2s_data_transmit))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TX_Byte
</UL>

<P><STRONG><a name="[30f]"></a>spi_i2s_deinit</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, gd32f30x_spi.o(i.spi_i2s_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi_i2s_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DeInit
</UL>

<P><STRONG><a name="[321]"></a>spi_i2s_flag_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f30x_spi.o(i.spi_i2s_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Wait_TC
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Wait_RC
</UL>

<P><STRONG><a name="[319]"></a>spi_i2s_interrupt_disable</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, gd32f30x_spi.o(i.spi_i2s_interrupt_disable))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TX_CTL
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RX_CTL
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>

<P><STRONG><a name="[31d]"></a>spi_i2s_interrupt_enable</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, gd32f30x_spi.o(i.spi_i2s_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TX_CTL
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RX_CTL
</UL>

<P><STRONG><a name="[311]"></a>spi_i2s_interrupt_flag_get</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, gd32f30x_spi.o(i.spi_i2s_interrupt_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi_i2s_interrupt_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_IRQHandler
</UL>

<P><STRONG><a name="[31a]"></a>spi_init</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, gd32f30x_spi.o(i.spi_init))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>

<P><STRONG><a name="[34b]"></a>timer_auto_reload_shadow_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f30x_timer.o(i.timer_auto_reload_shadow_enable))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Timing_Init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWM_Init
</UL>

<P><STRONG><a name="[341]"></a>timer_channel_capture_value_register_read</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, gd32f30x_timer.o(i.timer_channel_capture_value_register_read))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Get_DC
</UL>

<P><STRONG><a name="[399]"></a>timer_channel_input_capture_prescaler_config</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, gd32f30x_timer.o(i.timer_channel_input_capture_prescaler_config))
<BR><BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_input_capture_config
</UL>

<P><STRONG><a name="[33d]"></a>timer_channel_input_struct_para_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f30x_timer.o(i.timer_channel_input_struct_para_init))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Encoder_Init
</UL>

<P><STRONG><a name="[346]"></a>timer_channel_output_config</STRONG> (Thumb, 484 bytes, Stack size 8 bytes, gd32f30x_timer.o(i.timer_channel_output_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_channel_output_config
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWM_Init
</UL>

<P><STRONG><a name="[348]"></a>timer_channel_output_mode_config</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, gd32f30x_timer.o(i.timer_channel_output_mode_config))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWM_Init
</UL>

<P><STRONG><a name="[347]"></a>timer_channel_output_pulse_value_config</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, gd32f30x_timer.o(i.timer_channel_output_pulse_value_config))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Set_DC
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWM_Init
</UL>

<P><STRONG><a name="[349]"></a>timer_channel_output_shadow_config</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, gd32f30x_timer.o(i.timer_channel_output_shadow_config))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWM_Init
</UL>

<P><STRONG><a name="[345]"></a>timer_channel_output_state_config</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, gd32f30x_timer.o(i.timer_channel_output_state_config))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWM_Init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWM_CTL
</UL>

<P><STRONG><a name="[340]"></a>timer_counter_read</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f30x_timer.o(i.timer_counter_read))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Get_Counter
</UL>

<P><STRONG><a name="[33f]"></a>timer_counter_value_config</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f30x_timer.o(i.timer_counter_value_config))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Set_Counter
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Encoder_Init
</UL>

<P><STRONG><a name="[338]"></a>timer_deinit</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, gd32f30x_timer.o(i.timer_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWM_Init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[336]"></a>timer_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f30x_timer.o(i.timer_disable))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Timing_Init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWM_Init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Encoder_Init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CTL
</UL>

<P><STRONG><a name="[335]"></a>timer_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f30x_timer.o(i.timer_enable))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Timing_Init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWM_Init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Encoder_Init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CTL
</UL>

<P><STRONG><a name="[33a]"></a>timer_init</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, gd32f30x_timer.o(i.timer_init))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Set_Frequency
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Encoder_Init
</UL>

<P><STRONG><a name="[33e]"></a>timer_input_capture_config</STRONG> (Thumb, 326 bytes, Stack size 16 bytes, gd32f30x_timer.o(i.timer_input_capture_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timer_input_capture_config
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_input_capture_prescaler_config
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Encoder_Init
</UL>

<P><STRONG><a name="[344]"></a>timer_interrupt_disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f30x_timer.o(i.timer_interrupt_disable))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_IT_CTL
</UL>

<P><STRONG><a name="[343]"></a>timer_interrupt_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f30x_timer.o(i.timer_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Timing_Init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWM_Init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_IT_CTL
</UL>

<P><STRONG><a name="[334]"></a>timer_interrupt_flag_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd32f30x_timer.o(i.timer_interrupt_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Timing_Init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWM_Init
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IRQHandler
</UL>

<P><STRONG><a name="[333]"></a>timer_interrupt_flag_get</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32f30x_timer.o(i.timer_interrupt_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IRQHandler
</UL>

<P><STRONG><a name="[222]"></a>timer_master_output_trigger_source_select</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f30x_timer.o(i.timer_master_output_trigger_source_select))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Trigger_Config
</UL>

<P><STRONG><a name="[342]"></a>timer_prescaler_read</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f30x_timer.o(i.timer_prescaler_read))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Get_Frequency
</UL>

<P><STRONG><a name="[34a]"></a>timer_primary_output_config</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32f30x_timer.o(i.timer_primary_output_config))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWM_Init
</UL>

<P><STRONG><a name="[33c]"></a>timer_quadrature_decoder_mode_config</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, gd32f30x_timer.o(i.timer_quadrature_decoder_mode_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = timer_quadrature_decoder_mode_config
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Encoder_Init
</UL>

<P><STRONG><a name="[223]"></a>timer_update_event_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f30x_timer.o(i.timer_update_event_enable))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Trigger_Config
</UL>

<P><STRONG><a name="[368]"></a>usart_baudrate_set</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, gd32f30x_usart.o(i.usart_baudrate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[36b]"></a>usart_data_receive</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f30x_usart.o(i.usart_data_receive))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RX_Byte
</UL>

<P><STRONG><a name="[36c]"></a>usart_data_transmit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f30x_usart.o(i.usart_data_transmit))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TX_Byte
</UL>

<P><STRONG><a name="[357]"></a>usart_deinit</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, gd32f30x_usart.o(i.usart_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DeInit
</UL>

<P><STRONG><a name="[354]"></a>usart_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f30x_usart.o(i.usart_disable))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CTL
</UL>

<P><STRONG><a name="[367]"></a>usart_dma_receive_config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gd32f30x_usart.o(i.usart_dma_receive_config))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[364]"></a>usart_dma_transmit_config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gd32f30x_usart.o(i.usart_dma_transmit_config))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[353]"></a>usart_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f30x_usart.o(i.usart_enable))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CTL
</UL>

<P><STRONG><a name="[365]"></a>usart_flag_clear</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f30x_usart.o(i.usart_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[36d]"></a>usart_flag_get</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gd32f30x_usart.o(i.usart_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Wait_TC
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Wait_RC
</UL>

<P><STRONG><a name="[363]"></a>usart_interrupt_disable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gd32f30x_usart.o(i.usart_interrupt_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TX_CTL
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RX_CTL
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[366]"></a>usart_interrupt_enable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gd32f30x_usart.o(i.usart_interrupt_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TX_CTL
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RX_CTL
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[35e]"></a>usart_interrupt_flag_clear</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f30x_usart.o(i.usart_interrupt_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRQHandler
</UL>

<P><STRONG><a name="[35c]"></a>usart_interrupt_flag_get</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, gd32f30x_usart.o(i.usart_interrupt_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usart_interrupt_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRQHandler
</UL>

<P><STRONG><a name="[369]"></a>usart_receive_config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gd32f30x_usart.o(i.usart_receive_config))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RX_CTL
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[36a]"></a>usart_transmit_config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gd32f30x_usart.o(i.usart_transmit_config))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TX_CTL
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[370]"></a>usbd_core_init</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, usbd_core.o(i.usbd_core_init))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
</UL>

<P><STRONG><a name="[39b]"></a>usbd_device_class_request</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, usbd_std.o(i.usbd_device_class_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = usbd_device_class_request &rArr; usbd_enum_error &rArr; usbd_ep_stall
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enum_error
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_transaction
</UL>

<P><STRONG><a name="[393]"></a>usbd_enum_error</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, usbd_std.o(i.usbd_enum_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = usbd_enum_error &rArr; usbd_ep_stall
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_stall
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_req_handler
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_device_class_request
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setinterface
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setfeature
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setconfiguration
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setaddress
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_getstatus
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_getinterface
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_getdescriptor
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_getconfiguration
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_clearfeature
</UL>

<P><STRONG><a name="[39a]"></a>usbd_ep_clear_stall</STRONG> (Thumb, 212 bytes, Stack size 20 bytes, usbd_core.o(i.usbd_ep_clear_stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = usbd_ep_clear_stall
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_clearfeature
</UL>

<P><STRONG><a name="[39f]"></a>usbd_ep_data_read</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, usbd_core.o(i.usbd_ep_data_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbd_ep_data_read
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_intf_lpst
</UL>

<P><STRONG><a name="[39c]"></a>usbd_ep_data_write</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, usbd_core.o(i.usbd_ep_data_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usbd_ep_data_write
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_tx
</UL>

<P><STRONG><a name="[391]"></a>usbd_ep_deinit</STRONG> (Thumb, 174 bytes, Stack size 12 bytes, usbd_core.o(i.usbd_ep_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usbd_ep_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_deinit
</UL>

<P><STRONG><a name="[392]"></a>usbd_ep_init</STRONG> (Thumb, 298 bytes, Stack size 20 bytes, usbd_core.o(i.usbd_ep_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = usbd_ep_init
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_init
</UL>

<P><STRONG><a name="[386]"></a>usbd_ep_rx</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, usbd_core.o(i.usbd_ep_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usbd_ep_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_req_handler
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_init
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_deinit
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_scsi_command
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_report_array_to_host
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_out_transaction
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_in_transaction
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_intf_lpst
</UL>

<P><STRONG><a name="[394]"></a>usbd_ep_stall</STRONG> (Thumb, 156 bytes, Stack size 20 bytes, usbd_core.o(i.usbd_ep_stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = usbd_ep_stall
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_req_handler
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enum_error
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setfeature
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_transaction
</UL>

<P><STRONG><a name="[384]"></a>usbd_ep_tx</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, usbd_core.o(i.usbd_ep_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = usbd_ep_tx &rArr; usbd_ep_data_write
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_data_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_req_handler
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_scsi_command
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbb_report_array_to_host
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_getstatus
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_getdescriptor
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_getconfiguration
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_in_transaction
</UL>

<P><STRONG><a name="[39d]"></a>usbd_in_transaction</STRONG> (Thumb, 274 bytes, Stack size 16 bytes, usbd_std.o(i.usbd_in_transaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = usbd_in_transaction &rArr; usbd_ep_tx &rArr; usbd_ep_data_write
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_tx
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_intf_lpst
</UL>

<P><STRONG><a name="[36e]"></a>usbd_isr</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, usbd_int.o(i.usbd_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = usbd_isr &rArr; usbd_intf_lpst &rArr; usbd_setup_transaction &rArr; usbd_device_class_request &rArr; usbd_enum_error &rArr; usbd_ep_stall
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_intf_wakeup
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_intf_suspend
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_intf_sof
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_intf_reset
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_intf_lpst
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_intf_esof
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LP_CAN0_RX0_IRQHandler
</UL>

<P><STRONG><a name="[3a1]"></a>usbd_out_transaction</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, usbd_std.o(i.usbd_out_transaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = usbd_out_transaction &rArr; usbd_ep_rx
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_intf_lpst
</UL>

<P><STRONG><a name="[3a9]"></a>usbd_setup_request_parse</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usbd_std.o(i.usbd_setup_request_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_setup_request_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_transaction
</UL>

<P><STRONG><a name="[3a0]"></a>usbd_setup_transaction</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, usbd_std.o(i.usbd_setup_transaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = usbd_setup_transaction &rArr; usbd_device_class_request &rArr; usbd_enum_error &rArr; usbd_ep_stall
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_stall
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_vendor_request
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_standard_request
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_request_parse
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_device_class_request
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_intf_lpst
</UL>

<P><STRONG><a name="[3aa]"></a>usbd_standard_request</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, usbd_std.o(i.usbd_standard_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbd_standard_request
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_transaction
</UL>

<P><STRONG><a name="[3a3]"></a>usbd_suspend</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbd_pwr.o(i.usbd_suspend))
<BR><BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_intf_suspend
</UL>

<P><STRONG><a name="[3ab]"></a>usbd_vendor_request</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_std.o(i.usbd_vendor_request))
<BR><BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_transaction
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[c9]"></a>System_Clear_RSTSource</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ll_system.o(i.System_Clear_RSTSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = System_Clear_RSTSource
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_all_reset_flag_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_system.o(.constdata)
</UL>
<P><STRONG><a name="[c1]"></a>System_Disable_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ll_system.o(i.System_Disable_IRQ))
<BR>[Address Reference Count : 1]<UL><LI> ll_system.o(.constdata)
</UL>
<P><STRONG><a name="[c2]"></a>System_Enable_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ll_system.o(i.System_Enable_IRQ))
<BR>[Address Reference Count : 1]<UL><LI> ll_system.o(.constdata)
</UL>
<P><STRONG><a name="[c8]"></a>System_Get_RSTSource</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, ll_system.o(i.System_Get_RSTSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = System_Get_RSTSource
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_flag_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_system.o(.constdata)
</UL>
<P><STRONG><a name="[c5]"></a>System_Get_Sysclk</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ll_system.o(i.System_Get_Sysclk))
<BR>[Address Reference Count : 1]<UL><LI> ll_system.o(.constdata)
</UL>
<P><STRONG><a name="[c0]"></a>System_Init</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, ll_system.o(i.System_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = System_Init &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_system_clock_source_config
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_pll_config
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_osci_on
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_flag_get
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_deinit
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_apb2_clock_config
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_apb1_clock_config
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_ahb_clock_config
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_remap_config
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_wscnt_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_system.o(.constdata)
</UL>
<P><STRONG><a name="[c4]"></a>System_Set_Sysclk</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ll_system.o(i.System_Set_Sysclk))
<BR>[Address Reference Count : 1]<UL><LI> ll_system.o(.constdata)
</UL>
<P><STRONG><a name="[c6]"></a>System_Set_VectorTable</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ll_system.o(i.System_Set_VectorTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = System_Set_VectorTable
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_vector_table_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_system.o(.constdata)
</UL>
<P><STRONG><a name="[c7]"></a>System_Soft_Reset</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ll_system.o(i.System_Soft_Reset))
<BR>[Address Reference Count : 1]<UL><LI> ll_system.o(.constdata)
</UL>
<P><STRONG><a name="[cb]"></a>Delay_Get_Clock</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ll_delay.o(i.Delay_Get_Clock))
<BR>[Address Reference Count : 1]<UL><LI> ll_delay.o(.constdata)
</UL>
<P><STRONG><a name="[cd]"></a>Delay_Get_Counter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ll_delay.o(i.Delay_Get_Counter))
<BR>[Address Reference Count : 1]<UL><LI> ll_delay.o(.constdata)
</UL>
<P><STRONG><a name="[cc]"></a>Delay_Get_Reload</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ll_delay.o(i.Delay_Get_Reload))
<BR>[Address Reference Count : 1]<UL><LI> ll_delay.o(.constdata)
</UL>
<P><STRONG><a name="[ce]"></a>Delay_Get_TickTime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ll_delay.o(i.Delay_Get_TickTime))
<BR>[Address Reference Count : 1]<UL><LI> ll_delay.o(.constdata)
</UL>
<P><STRONG><a name="[ca]"></a>Delay_Init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ll_delay.o(i.Delay_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Delay_Init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_delay.o(.constdata)
</UL>
<P><STRONG><a name="[22f]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ll_delay.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Init
</UL>

<P><STRONG><a name="[cf]"></a>Pin_DeInit</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ll_gpio.o(i.Pin_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Pin_DeInit &rArr; gpio_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_deinit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[d2]"></a>Pin_GetOutput</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ll_gpio.o(i.Pin_GetOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Pin_GetOutput
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_bit_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[d0]"></a>Pin_Init</STRONG> (Thumb, 392 bytes, Stack size 32 bytes, ll_gpio.o(i.Pin_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Pin_Init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[d3]"></a>Pin_Read</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ll_gpio.o(i.Pin_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Pin_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[d1]"></a>Pin_Write</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ll_gpio.o(i.Pin_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Pin_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[d5]"></a>Port_DeInit</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ll_gpio.o(i.Port_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Port_DeInit &rArr; gpio_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_deinit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[d4]"></a>Port_GetDefault</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ll_gpio.o(i.Port_GetDefault))
<BR>[Address Reference Count : 1]<UL><LI> ll_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[d7]"></a>Port_GetOutput</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ll_gpio.o(i.Port_GetOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Port_GetOutput
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_port_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[d8]"></a>Port_Read</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ll_gpio.o(i.Port_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Port_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_port_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[d6]"></a>Port_Write</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ll_gpio.o(i.Port_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Port_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_port_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[db]"></a>EXTI_Attach_IRQ</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, ll_exti.o(i.EXTI_Attach_IRQ))
<BR>[Address Reference Count : 1]<UL><LI> ll_exti.o(.constdata)
</UL>
<P><STRONG><a name="[da]"></a>EXTI_CTL</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ll_exti.o(i.EXTI_CTL))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI_CTL
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_enable
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_exti.o(.constdata)
</UL>
<P><STRONG><a name="[24a]"></a>EXTI_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ll_exti.o(i.EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EXTI_IRQHandler &rArr; FW_EXTI_IH_ISR
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_get
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_EXTI_IH_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI5_9_IRQHandler
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI10_15_IRQHandler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[d9]"></a>EXTI_Init</STRONG> (Thumb, 378 bytes, Stack size 32 bytes, ll_exti.o(i.EXTI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EXTI_Init &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_exti_source_select
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_init
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_exti.o(.constdata)
</UL>
<P><STRONG><a name="[250]"></a>Loop</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ll_exti.o(i.Loop))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
</UL>

<P><STRONG><a name="[351]"></a>FW_Device_SetDriver</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ll_uart.o(i.FW_Device_SetDriver))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Config
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Config
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_Config
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Config
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_Config
</UL>

<P><STRONG><a name="[26e]"></a>FW_GPIO_Init</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ll_uart.o(i.FW_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IO_Init
</UL>

<P><STRONG><a name="[355]"></a>Loop</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ll_uart.o(i.Loop))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Wait_TC
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Wait_RC
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TX_CTL
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Set_TDL
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RX_CTL
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Get_RDL
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DeInit
</UL>

<P><STRONG><a name="[19b]"></a>UART3_Config</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ll_uart.o(i.UART3_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_SetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_uart.o(Device_Table)
</UL>
<P><STRONG><a name="[19c]"></a>UART4_Config</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ll_uart.o(i.UART4_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART4_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_SetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_uart.o(Device_Table)
</UL>
<P><STRONG><a name="[de]"></a>UART_CTL</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ll_uart.o(i.UART_CTL))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_CTL
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_uart.o(.constdata)
</UL>
<P><STRONG><a name="[dc]"></a>UART_DeInit</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, ll_uart.o(i.UART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UART_DeInit &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_SetPort
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_uart.o(.constdata)
</UL>
<P><STRONG><a name="[e6]"></a>UART_Get_RDL</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, ll_uart.o(i.UART_Get_RDL))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_Get_RDL &rArr; dma_transfer_number_get
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_GetDMABSize
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_GetDMABBase
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_transfer_number_get
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_memory_address_config
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_flag_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_uart.o(.constdata)
</UL>
<P><STRONG><a name="[35b]"></a>UART_IO_Init</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, ll_uart.o(i.UART_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART_IO_Init &rArr; FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_remap_config
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[352]"></a>UART_IRQHandler</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, ll_uart.o(i.UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_IRQHandler &rArr; usart_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_RX_ISR
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_RC_ISR
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_get
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_clear
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_TX_ISR
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_TC_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
</UL>

<P><STRONG><a name="[dd]"></a>UART_Init</STRONG> (Thumb, 1238 bytes, Stack size 64 bytes, ll_uart.o(i.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = UART_Init &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_GetTRM
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_GetDMABSize
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_GetDMABBase
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IO_Init
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmit_config
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_receive_config
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_disable
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_clear
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_dma_transmit_config
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_dma_receive_config
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_memory_to_memory_disable
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_init
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_deinit
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_circulation_disable
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_enable
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_disable
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_SetPort
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_uart.o(.constdata)
</UL>
<P><STRONG><a name="[e2]"></a>UART_RX_Byte</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ll_uart.o(i.UART_RX_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_RX_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_uart.o(.constdata)
</UL>
<P><STRONG><a name="[e0]"></a>UART_RX_CTL</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, ll_uart.o(i.UART_RX_CTL))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_RX_CTL &rArr; dma_channel_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_GetTRM
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_receive_config
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_disable
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_enable
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_uart.o(.constdata)
</UL>
<P><STRONG><a name="[e5]"></a>UART_Set_TDL</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, ll_uart.o(i.UART_Set_TDL))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_Set_TDL &rArr; dma_transfer_number_config
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_GetDMABBase
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_transfer_number_config
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_memory_address_config
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_flag_clear
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_enable
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_uart.o(.constdata)
</UL>
<P><STRONG><a name="[e1]"></a>UART_TX_Byte</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ll_uart.o(i.UART_TX_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_TX_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_uart.o(.constdata)
</UL>
<P><STRONG><a name="[df]"></a>UART_TX_CTL</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, ll_uart.o(i.UART_TX_CTL))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_TX_CTL &rArr; dma_channel_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_GetTRM
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmit_config
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_disable
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_enable
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_uart.o(.constdata)
</UL>
<P><STRONG><a name="[e4]"></a>UART_Wait_RC</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, ll_uart.o(i.UART_Wait_RC))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = UART_Wait_RC &rArr; dma_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_GetTRM
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_flag_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_uart.o(.constdata)
</UL>
<P><STRONG><a name="[e3]"></a>UART_Wait_TC</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, ll_uart.o(i.UART_Wait_TC))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = UART_Wait_TC &rArr; dma_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_GetTRM
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_flag_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_uart.o(.constdata)
</UL>
<P><STRONG><a name="[198]"></a>USART0_Config</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ll_uart.o(i.USART0_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART0_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_SetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_uart.o(Device_Table)
</UL>
<P><STRONG><a name="[199]"></a>USART1_Config</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ll_uart.o(i.USART1_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART1_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_SetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_uart.o(Device_Table)
</UL>
<P><STRONG><a name="[19a]"></a>USART2_Config</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ll_uart.o(i.USART2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_SetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_uart.o(Device_Table)
</UL>
<P><STRONG><a name="[ed]"></a>IFlash_Erase_Sector</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ll_flash.o(i.IFlash_Erase_Sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IFlash_Erase_Sector &rArr; fmc_page_erase &rArr; fmc_bank1_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_unlock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_page_erase
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_lock
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_flag_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_flash.o(.constdata)
</UL>
<P><STRONG><a name="[eb]"></a>IFlash_Get_CID</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, ll_flash.o(i.IFlash_Get_CID))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IFlash_Get_CID
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_flash.o(.constdata)
</UL>
<P><STRONG><a name="[ea]"></a>IFlash_Get_Main</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, ll_flash.o(i.IFlash_Get_Main))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IFlash_Get_Main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_flash.o(.constdata)
</UL>
<P><STRONG><a name="[ec]"></a>IFlash_Get_PE</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ll_flash.o(i.IFlash_Get_PE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IFlash_Get_PE
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_spc_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_flash.o(.constdata)
</UL>
<P><STRONG><a name="[e8]"></a>IFlash_Get_SectorBase</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ll_flash.o(i.IFlash_Get_SectorBase))
<BR>[Address Reference Count : 1]<UL><LI> ll_flash.o(.constdata)
</UL>
<P><STRONG><a name="[e7]"></a>IFlash_Get_SectorNum</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ll_flash.o(i.IFlash_Get_SectorNum))
<BR>[Address Reference Count : 1]<UL><LI> ll_flash.o(.constdata)
</UL>
<P><STRONG><a name="[e9]"></a>IFlash_Get_SectorSize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ll_flash.o(i.IFlash_Get_SectorSize))
<BR>[Address Reference Count : 1]<UL><LI> ll_flash.o(.constdata)
</UL>
<P><STRONG><a name="[ef]"></a>IFlash_Read</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ll_flash.o(i.IFlash_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IFlash_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_flash.o(.constdata)
</UL>
<P><STRONG><a name="[98]"></a>IFlash_Read_Gran</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ll_flash.o(i.IFlash_Read_Gran))
<BR>[Address Reference Count : 1]<UL><LI> ll_flash.o(i.IFlash_Write)
</UL>
<P><STRONG><a name="[ee]"></a>IFlash_Write</STRONG> (Thumb, 72 bytes, Stack size 56 bytes, ll_flash.o(i.IFlash_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = IFlash_Write &rArr; MBlock_Write_SelfAlign &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_unlock
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_lock
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_flag_clear
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBlock_Write_SelfAlign
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_flash.o(.constdata)
</UL>
<P><STRONG><a name="[97]"></a>IFlash_Write_Gran</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ll_flash.o(i.IFlash_Write_Gran))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = IFlash_Write_Gran &rArr; fmc_word_program &rArr; fmc_bank1_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_word_program
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_flash.o(i.IFlash_Write)
</UL>
<P><STRONG><a name="[f1]"></a>IRTC_Get_Counter</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ll_rtc.o(i.IRTC_Get_Counter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRTC_Get_Counter
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_counter_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_rtc.o(.constdata)
</UL>
<P><STRONG><a name="[f0]"></a>IRTC_Init</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, ll_rtc.o(i.IRTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IRTC_Init &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_osci_on
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_register_sync_wait
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_prescaler_set
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_lwoff_wait
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_interrupt_enable
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_rtc_clock_config
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_osci_stab_wait
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_backup_write_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_rtc.o(.constdata)
</UL>
<P><STRONG><a name="[f3]"></a>IRTC_Set_Alarm</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ll_rtc.o(i.IRTC_Set_Alarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IRTC_Set_Alarm &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_init
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_lwoff_wait
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_alarm_config
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_GetCounter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_rtc.o(.constdata)
</UL>
<P><STRONG><a name="[f2]"></a>IRTC_Set_Counter</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ll_rtc.o(i.IRTC_Set_Counter))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IRTC_Set_Counter &rArr; rtc_counter_set
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_lwoff_wait
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_counter_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_rtc.o(.constdata)
</UL>
<P><STRONG><a name="[f5]"></a>IWDG_FeedDog</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ll_wdg.o(i.IWDG_FeedDog))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IWDG_FeedDog
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwdgt_write_enable
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwdgt_write_disable
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwdgt_counter_reload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_wdg.o(.constdata)
</UL>
<P><STRONG><a name="[f6]"></a>IWDG_Get_MaxTime</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ll_wdg.o(i.IWDG_Get_MaxTime))
<BR>[Address Reference Count : 1]<UL><LI> ll_wdg.o(.constdata)
</UL>
<P><STRONG><a name="[f7]"></a>IWDG_Get_MinTime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ll_wdg.o(i.IWDG_Get_MinTime))
<BR>[Address Reference Count : 1]<UL><LI> ll_wdg.o(.constdata)
</UL>
<P><STRONG><a name="[f4]"></a>IWDG_Init</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, ll_wdg.o(i.IWDG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = IWDG_Init &rArr; fwdgt_config
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwdgt_write_enable
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwdgt_write_disable
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwdgt_enable
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwdgt_counter_reload
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwdgt_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_wdg.o(.constdata)
</UL>
<P><STRONG><a name="[f9]"></a>WWDG_FeedDog</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ll_wdg.o(i.WWDG_FeedDog))
<BR>[Address Reference Count : 1]<UL><LI> ll_wdg.o(.constdata)
</UL>
<P><STRONG><a name="[f8]"></a>WWDG_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ll_wdg.o(i.WWDG_Init))
<BR>[Address Reference Count : 1]<UL><LI> ll_wdg.o(.constdata)
</UL>
<P><STRONG><a name="[fb]"></a>BKP_Get_Base</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ll_bkp.o(i.BKP_Get_Base))
<BR>[Address Reference Count : 1]<UL><LI> ll_bkp.o(.constdata)
</UL>
<P><STRONG><a name="[fc]"></a>BKP_Get_Size</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ll_bkp.o(i.BKP_Get_Size))
<BR>[Address Reference Count : 1]<UL><LI> ll_bkp.o(.constdata)
</UL>
<P><STRONG><a name="[fa]"></a>BKP_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ll_bkp.o(i.BKP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BKP_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_bkp_reset_disable
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_backup_write_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_bkp.o(.constdata)
</UL>
<P><STRONG><a name="[fe]"></a>BKP_Read</STRONG> (Thumb, 42 bytes, Stack size 48 bytes, ll_bkp.o(i.BKP_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = BKP_Read &rArr; MBlock_Read_SelfAlign &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBlock_Read_SelfAlign
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_bkp.o(.constdata)
</UL>
<P><STRONG><a name="[61]"></a>BKP_Read_Gran</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ll_bkp.o(i.BKP_Read_Gran))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BKP_Read_Gran
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_read_data
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ll_bkp.o(i.BKP_Read)
<LI> ll_bkp.o(i.BKP_Write)
</UL>
<P><STRONG><a name="[fd]"></a>BKP_Write</STRONG> (Thumb, 42 bytes, Stack size 48 bytes, ll_bkp.o(i.BKP_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = BKP_Write &rArr; MBlock_Write_SelfAlign &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBlock_Write_SelfAlign
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_bkp.o(.constdata)
</UL>
<P><STRONG><a name="[60]"></a>BKP_Write_Gran</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ll_bkp.o(i.BKP_Write_Gran))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BKP_Write_Gran
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_write_data
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ll_bkp.o(i.BKP_Read)
<LI> ll_bkp.o(i.BKP_Write)
</UL>
<P><STRONG><a name="[ff]"></a>USB_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ll_usb.o(i.USB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_Init &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_init
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_usb_clock_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_usb.o(.constdata)
</UL>
<P><STRONG><a name="[1f6]"></a>Bus_Data_IO_Init</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, ll_bus.o(i.Bus_Data_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Bus_Data_IO_Init &rArr; FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Bus_Init
</UL>

<P><STRONG><a name="[19d]"></a>EX_Bus_Config</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ll_bus.o(i.EX_Bus_Config))
<BR>[Address Reference Count : 1]<UL><LI> ll_bus.o(Device_Table)
</UL>
<P><STRONG><a name="[1f7]"></a>FW_GPIO_Init</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ll_bus.o(i.FW_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Bus_Init
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_Data_IO_Init
</UL>

<P><STRONG><a name="[100]"></a>LCD_Bus_Init</STRONG> (Thumb, 168 bytes, Stack size 104 bytes, ll_bus.o(i.LCD_Bus_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LCD_Bus_Init &rArr; Bus_Data_IO_Init &rArr; FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exmc_norsram_init
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exmc_norsram_enable
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_Data_IO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_bus.o(.constdata)
</UL>
<P><STRONG><a name="[19e]"></a>ADC0_Bus_Config</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, ll_adc.o(i.ADC0_Bus_Config))
<BR>[Address Reference Count : 1]<UL><LI> ll_adc.o(Device_Table)
</UL>
<P><STRONG><a name="[102]"></a>ADC_CTL</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ll_adc.o(i.ADC_CTL))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_CTL
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_enable
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Calibration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_adc.o(.constdata)
</UL>
<P><STRONG><a name="[103]"></a>ADC_Calibration</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ll_adc.o(i.ADC_Calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ADC_Calibration &rArr; FW_Delay_RoughMs &rArr; FW_System_GetSysclk
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_enable
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_calibration_enable
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Lock
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_RoughMs
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CTL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_adc.o(.constdata)
</UL>
<P><STRONG><a name="[1d0]"></a>ADC_Channel_Config</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, ll_adc.o(i.ADC_Channel_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ADC_Channel_Config &rArr; adc_regular_channel_config
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_tempsensor_vrefint_enable
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_regular_channel_config
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_ADC_GetDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[107]"></a>ADC_Get_Clock</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ll_adc.o(i.ADC_Get_Clock))
<BR>[Address Reference Count : 1]<UL><LI> ll_adc.o(.constdata)
</UL>
<P><STRONG><a name="[104]"></a>ADC_Get_ConvTime</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ll_adc.o(i.ADC_Get_ConvTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_Get_ConvTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_adc.o(.constdata)
</UL>
<P><STRONG><a name="[101]"></a>ADC_Init</STRONG> (Thumb, 508 bytes, Stack size 64 bytes, ll_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = ADC_Init &rArr; ADC_Channel_Config &rArr; adc_regular_channel_config
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_adc_clock_config
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_circulation_enable
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_special_function_config
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_software_trigger_enable
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_resolution_config
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_mode_config
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_interrupt_enable
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_external_trigger_source_config
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_external_trigger_config
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_enable
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_dma_mode_enable
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_deinit
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_data_alignment_config
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_channel_length_config
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_calibration_enable
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Ms
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_ADC_Bus_SetPort
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_ADC_Bus_GetChannelNum
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Channel_Config
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_init
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_deinit
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_enable
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_adc.o(.constdata)
</UL>
<P><STRONG><a name="[106]"></a>ADC_TempFormula</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ll_adc.o(i.ADC_TempFormula))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_TempFormula
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_ADC_Bus_GetFS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_adc.o(.constdata)
</UL>
<P><STRONG><a name="[105]"></a>ADC_VrefFormula</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ll_adc.o(i.ADC_VrefFormula))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_VrefFormula
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_ADC_Bus_GetFS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_adc.o(.constdata)
</UL>
<P><STRONG><a name="[108]"></a>ADC_WDG_Config</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ll_adc.o(i.ADC_WDG_Config))
<BR>[Address Reference Count : 1]<UL><LI> ll_adc.o(.constdata)
</UL>
<P><STRONG><a name="[1d1]"></a>FW_ADC_GetDevice</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ll_adc.o(i.FW_ADC_GetDevice))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Channel_Config
</UL>

<P><STRONG><a name="[1d2]"></a>Loop</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ll_adc.o(i.Loop))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Channel_Config
</UL>

<P><STRONG><a name="[26f]"></a>FW_GPIO_Init</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ll_timer.o(i.FW_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWM_Init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Encoder_Init
</UL>

<P><STRONG><a name="[19f]"></a>LL_Timer_Config</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ll_timer.o(i.LL_Timer_Config))
<BR>[Address Reference Count : 1]<UL><LI> ll_timer.o(Device_Table)
</UL>
<P><STRONG><a name="[337]"></a>Loop</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ll_timer.o(i.Loop))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Timing_Init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Set_DC
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWM_Init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWM_CTL
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_IT_CTL
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Get_DC
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Encoder_Init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[332]"></a>TIMER_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ll_timer.o(i.TIMER_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_get
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER7_UP_IRQHandler
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER6_IRQHandler
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER5_IRQHandler
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_UP_IRQHandler
</UL>

<P><STRONG><a name="[114]"></a>TIM_CTL</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ll_timer.o(i.TIM_CTL))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_CTL
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_timer.o(.constdata)
</UL>
<P><STRONG><a name="[109]"></a>TIM_DeInit</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, ll_timer.o(i.TIM_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TIM_DeInit &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_timer.o(.constdata)
</UL>
<P><STRONG><a name="[10f]"></a>TIM_Encoder_Init</STRONG> (Thumb, 578 bytes, Stack size 56 bytes, ll_timer.o(i.TIM_Encoder_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TIM_Encoder_Init &rArr; FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_IO_Init
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_quadrature_decoder_mode_config
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_input_capture_config
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_disable
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_counter_value_config
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_input_struct_para_init
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_TIM_SetPort
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_timer.o(.constdata)
</UL>
<P><STRONG><a name="[10a]"></a>TIM_Get_Clock</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, ll_timer.o(i.TIM_Get_Clock))
<BR>[Address Reference Count : 1]<UL><LI> ll_timer.o(.constdata)
</UL>
<P><STRONG><a name="[111]"></a>TIM_Get_Counter</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ll_timer.o(i.TIM_Get_Counter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_Get_Counter
</UL>
<BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_counter_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_timer.o(.constdata)
</UL>
<P><STRONG><a name="[113]"></a>TIM_Get_DC</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, ll_timer.o(i.TIM_Get_DC))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM_Get_DC
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_capture_value_register_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_timer.o(.constdata)
</UL>
<P><STRONG><a name="[10c]"></a>TIM_Get_Frequency</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, ll_timer.o(i.TIM_Get_Frequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM_Get_Frequency
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_prescaler_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_timer.o(.constdata)
</UL>
<P><STRONG><a name="[33b]"></a>TIM_IO_Init</STRONG> (Thumb, 480 bytes, Stack size 16 bytes, ll_timer.o(i.TIM_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TIM_IO_Init &rArr; gpio_pin_remap_config
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_remap_config
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWM_Init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Encoder_Init
</UL>

<P><STRONG><a name="[116]"></a>TIM_IT_CTL</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, ll_timer.o(i.TIM_IT_CTL))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM_IT_CTL
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_enable
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_timer.o(.constdata)
</UL>
<P><STRONG><a name="[115]"></a>TIM_PWM_CTL</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, ll_timer.o(i.TIM_PWM_CTL))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM_PWM_CTL
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_state_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_timer.o(.constdata)
</UL>
<P><STRONG><a name="[10e]"></a>TIM_PWM_Init</STRONG> (Thumb, 704 bytes, Stack size 48 bytes, ll_timer.o(i.TIM_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TIM_PWM_Init &rArr; TIM_Set_Frequency
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Set_Frequency
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_IO_Init
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_primary_output_config
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_clear
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_enable
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_disable
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_state_config
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_shadow_config
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_pulse_value_config
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_mode_config
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_config
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_auto_reload_shadow_enable
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_TIM_SetPort
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_TIM_GetClock
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_timer.o(.constdata)
</UL>
<P><STRONG><a name="[110]"></a>TIM_Set_Counter</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ll_timer.o(i.TIM_Set_Counter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_Set_Counter
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_counter_value_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_timer.o(.constdata)
</UL>
<P><STRONG><a name="[112]"></a>TIM_Set_DC</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, ll_timer.o(i.TIM_Set_DC))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM_Set_DC
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_pulse_value_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_timer.o(.constdata)
</UL>
<P><STRONG><a name="[10b]"></a>TIM_Set_Frequency</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, ll_timer.o(i.TIM_Set_Frequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIM_Set_Frequency
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Timing_Init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWM_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_timer.o(.constdata)
</UL>
<P><STRONG><a name="[10d]"></a>TIM_Timing_Init</STRONG> (Thumb, 434 bytes, Stack size 24 bytes, ll_timer.o(i.TIM_Timing_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TIM_Timing_Init &rArr; TIM_Set_Frequency
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Set_Frequency
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_clear
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_enable
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_disable
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_auto_reload_shadow_enable
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_TIM_SetPort
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_TIM_GetUnit
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_TIM_GetClock
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_timer.o(.constdata)
</UL>
<P><STRONG><a name="[308]"></a>FW_Device_SetDriver</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ll_spi.o(i.FW_Device_SetDriver))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Config
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Config
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_Config
</UL>

<P><STRONG><a name="[270]"></a>FW_GPIO_Init</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ll_spi.o(i.FW_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_IO_Init
</UL>

<P><STRONG><a name="[30d]"></a>Loop</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ll_spi.o(i.Loop))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TX_CTL
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Read
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RX_CTL
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DeInit
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Clock_GetDIV
</UL>

<P><STRONG><a name="[1a0]"></a>SPI0_Config</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ll_spi.o(i.SPI0_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI0_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_SetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_spi.o(Device_Table)
</UL>
<P><STRONG><a name="[1a1]"></a>SPI1_Config</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ll_spi.o(i.SPI1_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI1_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_SetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_spi.o(Device_Table)
</UL>
<P><STRONG><a name="[1a2]"></a>SPI2_Config</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ll_spi.o(i.SPI2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_SetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_spi.o(Device_Table)
</UL>
<P><STRONG><a name="[119]"></a>SPI_CTL</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ll_spi.o(i.SPI_CTL))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_CTL
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_enable
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TX_CTL
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RX_CTL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_spi.o(.constdata)
</UL>
<P><STRONG><a name="[30c]"></a>SPI_Clock_GetDIV</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, ll_spi.o(i.SPI_Clock_GetDIV))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_Clock_GetDIV
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>

<P><STRONG><a name="[117]"></a>SPI_DeInit</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, ll_spi.o(i.SPI_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SPI_DeInit &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_deinit
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_SetPort
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_spi.o(.constdata)
</UL>
<P><STRONG><a name="[310]"></a>SPI_IO_Init</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, ll_spi.o(i.SPI_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SPI_IO_Init &rArr; FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_remap_config
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>

<P><STRONG><a name="[309]"></a>SPI_IRQHandler</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ll_spi.o(i.SPI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_IRQHandler &rArr; spi_i2s_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_interrupt_flag_get
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_TX_ISR
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_RX_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_IRQHandler
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_IRQHandler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_IRQHandler
</UL>

<P><STRONG><a name="[118]"></a>SPI_Init</STRONG> (Thumb, 932 bytes, Stack size 104 bytes, ll_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SPI_Init &rArr; SPI_IO_Init &rArr; FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_memory_to_memory_disable
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_init
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_deinit
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_circulation_disable
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_disable
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_interrupt_disable
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_enable
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_dma_disable
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_crc_polynomial_set
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_SetPort
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_GetTRM
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_GetDMABSize
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_GetDMABBase
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_IO_Init
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Clock_GetDIV
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_spi.o(.constdata)
</UL>
<P><STRONG><a name="[11d]"></a>SPI_RX_Byte</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ll_spi.o(i.SPI_RX_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_RX_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_spi.o(.constdata)
</UL>
<P><STRONG><a name="[11b]"></a>SPI_RX_CTL</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, ll_spi.o(i.SPI_RX_CTL))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_RX_CTL &rArr; dma_channel_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_enable
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_disable
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_interrupt_enable
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_interrupt_disable
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_GetTRM
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CTL
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_spi.o(.constdata)
</UL>
<P><STRONG><a name="[121]"></a>SPI_Read</STRONG> (Thumb, 330 bytes, Stack size 32 bytes, ll_spi.o(i.SPI_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_Read &rArr; dma_transfer_number_config
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_transfer_number_config
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_memory_address_config
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_flag_get
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_flag_clear
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_enable
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_disable
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_receive
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_dma_enable
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_dma_disable
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_spi.o(.constdata)
</UL>
<P><STRONG><a name="[11c]"></a>SPI_TX_Byte</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ll_spi.o(i.SPI_TX_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_TX_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_spi.o(.constdata)
</UL>
<P><STRONG><a name="[11a]"></a>SPI_TX_CTL</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, ll_spi.o(i.SPI_TX_CTL))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_TX_CTL &rArr; dma_channel_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_enable
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_disable
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_interrupt_enable
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_interrupt_disable
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_GetTRM
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CTL
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_spi.o(.constdata)
</UL>
<P><STRONG><a name="[11f]"></a>SPI_Wait_RC</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ll_spi.o(i.SPI_Wait_RC))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_Wait_RC
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_flag_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_spi.o(.constdata)
</UL>
<P><STRONG><a name="[11e]"></a>SPI_Wait_TC</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ll_spi.o(i.SPI_Wait_TC))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_Wait_TC
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_flag_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_spi.o(.constdata)
</UL>
<P><STRONG><a name="[120]"></a>SPI_Write</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, ll_spi.o(i.SPI_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_Write &rArr; dma_transfer_number_config
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_transfer_number_config
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_memory_address_config
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_flag_get
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_flag_clear
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_enable
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_disable
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_dma_enable
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_dma_disable
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_memory_increase_enable
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_spi.o(.constdata)
</UL>
<P><STRONG><a name="[1a3]"></a>DAC0_Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ll_dac.o(i.DAC0_Config))
<BR>[Address Reference Count : 1]<UL><LI> ll_dac.o(Device_Table)
</UL>
<P><STRONG><a name="[122]"></a>DAC_DeInit</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ll_dac.o(i.DAC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DAC_DeInit &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_deinit
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_DAC_SetPort
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_dac.o(.constdata)
</UL>
<P><STRONG><a name="[123]"></a>DAC_Init</STRONG> (Thumb, 476 bytes, Stack size 72 bytes, ll_dac.o(i.DAC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DAC_Init &rArr; dma_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_init
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_flag_clear
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_circulation_disable
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_enable
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_wave_mode_config
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_trigger_source_config
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_trigger_enable
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_triangle_noise_config
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_output_buffer_enable
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_output_buffer_disable
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_lfsr_noise_config
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_enable
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_dma_enable
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_deinit
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_DAC_SetPort
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_dac.o(.constdata)
</UL>
<P><STRONG><a name="[126]"></a>DAC_Read</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ll_dac.o(i.DAC_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DAC_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_output_value_get
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_DAC_GetPort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_dac.o(.constdata)
</UL>
<P><STRONG><a name="[128]"></a>DAC_Trigger_CTL</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, ll_dac.o(i.DAC_Trigger_CTL))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DAC_Trigger_CTL &rArr; dma_transfer_number_config
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_transfer_number_config
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_flag_get
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_flag_clear
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_enable
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_disable
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_trigger_enable
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_trigger_disable
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_software_trigger_enable
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_software_trigger_disable
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_DAC_GetPort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_dac.o(.constdata)
</UL>
<P><STRONG><a name="[127]"></a>DAC_Trigger_Config</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, ll_dac.o(i.DAC_Trigger_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = DAC_Trigger_Config &rArr; FW_Device_Find &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_update_event_enable
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_master_output_trigger_source_select
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_TIM_SetFrequency
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_TIM_Init
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_TIM_GetPort
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_TIM_CTL
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_Find
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_DAC_GetPort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_dac.o(.constdata)
</UL>
<P><STRONG><a name="[125]"></a>DAC_Write</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, ll_dac.o(i.DAC_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DAC_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_data_set
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_DAC_GetPort
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_dac.o(.constdata)
</UL>
<P><STRONG><a name="[124]"></a>LL_DAC_CTL</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ll_dac.o(i.LL_DAC_CTL))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_DAC_CTL
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_enable
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_disable
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_DAC_GetPort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_dac.o(.constdata)
</UL>
<P><STRONG><a name="[208]"></a>Loop</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ll_dac.o(i.Loop))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Write
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_DeInit
</UL>

<P><STRONG><a name="[1a4]"></a>CAN_Config</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ll_can.o(i.CAN_Config))
<BR>[Address Reference Count : 1]<UL><LI> ll_can.o(Device_Table)
</UL>
<P><STRONG><a name="[129]"></a>CAN_DeInit</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ll_can.o(i.CAN_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CAN_DeInit &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_deinit
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_CAN_SetPort
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_can.o(.constdata)
</UL>
<P><STRONG><a name="[12b]"></a>CAN_FT_CTL</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ll_can.o(i.CAN_FT_CTL))
<BR>[Address Reference Count : 1]<UL><LI> ll_can.o(.constdata)
</UL>
<P><STRONG><a name="[12f]"></a>CAN_Frame_Read</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, ll_can.o(i.CAN_Frame_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CAN_Frame_Read &rArr; can_message_receive
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_message_receive
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_can.o(.constdata)
</UL>
<P><STRONG><a name="[12e]"></a>CAN_Frame_Write</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, ll_can.o(i.CAN_Frame_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CAN_Frame_Write &rArr; can_message_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_message_transmit
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_can.o(.constdata)
</UL>
<P><STRONG><a name="[200]"></a>CAN_IO_Init</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, ll_can.o(i.CAN_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CAN_IO_Init &rArr; FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_remap_config
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
</UL>

<P><STRONG><a name="[12a]"></a>CAN_Init</STRONG> (Thumb, 536 bytes, Stack size 88 bytes, ll_can.o(i.CAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = CAN_Init &rArr; CAN_IO_Init &rArr; FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_interrupt_enable
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_interrupt_disable
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_init
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_filter_init
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_deinit
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_CAN_SetPort
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_CAN_GetTRM
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_IO_Init
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_can.o(.constdata)
</UL>
<P><STRONG><a name="[12d]"></a>CAN_RX_CTL</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ll_can.o(i.CAN_RX_CTL))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CAN_RX_CTL
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_interrupt_enable
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_interrupt_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_can.o(.constdata)
</UL>
<P><STRONG><a name="[12c]"></a>CAN_TX_CTL</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ll_can.o(i.CAN_TX_CTL))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CAN_TX_CTL
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_interrupt_enable
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_interrupt_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_can.o(.constdata)
</UL>
<P><STRONG><a name="[201]"></a>FW_GPIO_Init</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ll_can.o(i.FW_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_IO_Init
</UL>

<P><STRONG><a name="[1fa]"></a>Loop</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ll_can.o(i.Loop))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DeInit
</UL>

<P><STRONG><a name="[2f1]"></a>RB_Data_IsCC</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, rbuffer.o(i.RB_Data_IsCC))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RB_Data_IsCC &rArr; FW_Unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_String_IsExist
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read_Inter
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read_Fisrt
</UL>

<P><STRONG><a name="[2f2]"></a>RB_Find_StringCS</STRONG> (Thumb, 286 bytes, Stack size 64 bytes, rbuffer.o(i.RB_Find_StringCS))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = RB_Find_StringCS &rArr; Strfind
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Get_BufferSize
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strfind
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Set_Index
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Offset_Index
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read_Inter
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read_Fisrt
</UL>

<P><STRONG><a name="[2f7]"></a>RB_Find_StringCS_RL1</STRONG> (Thumb, 310 bytes, Stack size 80 bytes, rbuffer.o(i.RB_Find_StringCS_RL1))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = RB_Find_StringCS_RL1 &rArr; Strfind
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Get_BufferSize
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strfind
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strcmp
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Set_Index
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Offset_Index
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_String_IsExist
</UL>

<P><STRONG><a name="[2f9]"></a>RB_Offset_Head</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rbuffer.o(i.RB_Offset_Head))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RB_Offset_Head
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read_Inter
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read_HL
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read_Fisrt
</UL>

<P><STRONG><a name="[2f5]"></a>RB_Offset_Index</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, rbuffer.o(i.RB_Offset_Index))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RB_Offset_Index
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read_HL
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Find_StringCS_RL1
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Find_StringCS
</UL>

<P><STRONG><a name="[2f6]"></a>RB_Set_Index</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, rbuffer.o(i.RB_Set_Index))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RB_Set_Index
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Find_StringCS_RL1
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Find_StringCS
</UL>

<P><STRONG><a name="[2f8]"></a>Strcmp</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, rbuffer.o(i.Strcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Find_StringCS_RL1
</UL>

<P><STRONG><a name="[2f4]"></a>Strfind</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, rbuffer.o(i.Strfind))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Strfind
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_String_IsExist
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read_Inter
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read_Fisrt
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Find_StringCS_RL1
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Find_StringCS
</UL>

<P><STRONG><a name="[271]"></a>FW_GPIO_Init</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, io_encoder.o(i.FW_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Encoder_Init
</UL>

<P><STRONG><a name="[27d]"></a>FW_GPIO_Read</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, io_encoder.o(i.FW_GPIO_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FW_GPIO_Read &rArr; GPIO_PinRead
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRead
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Encoder_GetCounter
</UL>

<P><STRONG><a name="[131]"></a>IO_Encoder_GetCounter</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, io_encoder.o(i.IO_Encoder_GetCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IO_Encoder_GetCounter &rArr; FW_GPIO_Read &rArr; GPIO_PinRead
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> io_encoder.o(.constdata)
</UL>
<P><STRONG><a name="[130]"></a>IO_Encoder_Init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, io_encoder.o(i.IO_Encoder_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IO_Encoder_Init &rArr; FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> io_encoder.o(.constdata)
</UL>
<P><STRONG><a name="[99]"></a>Bus_Init</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ili9341.o(i.Bus_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Bus_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili9341.o(i.ILI_Init)
</UL>
<P><STRONG><a name="[9c]"></a>Bus_Read_Data</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ili9341.o(i.Bus_Read_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Bus_Read_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili9341.o(i.ILI_Init)
</UL>
<P><STRONG><a name="[9a]"></a>Bus_Write_Cmd</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ili9341.o(i.Bus_Write_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Bus_Write_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili9341.o(i.ILI_Init)
</UL>
<P><STRONG><a name="[9b]"></a>Bus_Write_Data</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ili9341.o(i.Bus_Write_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Bus_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili9341.o(i.ILI_Init)
</UL>
<P><STRONG><a name="[1f8]"></a>FW_Device_GetDriver</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ili9341.o(i.FW_Device_GetDriver))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI_Init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_Write_Data
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_Write_Cmd
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_Read_Data
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_Init
</UL>

<P><STRONG><a name="[2c6]"></a>FW_Device_GetParent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ili9341.o(i.FW_Device_GetParent))
<BR><BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI_Set_Cursor
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI_Init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI_Get_Point
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI_Get_CID
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI_Fill_Area
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI_Draw_Point
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI_BL_Set
</UL>

<P><STRONG><a name="[272]"></a>FW_GPIO_Init</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ili9341.o(i.FW_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI_Init
</UL>

<P><STRONG><a name="[284]"></a>FW_GPIO_Write</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ili9341.o(i.FW_GPIO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI_Init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI_BL_Set
</UL>

<P><STRONG><a name="[135]"></a>ILI_BL_Get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ili9341.o(i.ILI_BL_Get))
<BR>[Address Reference Count : 1]<UL><LI> ili9341.o(.constdata)
</UL>
<P><STRONG><a name="[134]"></a>ILI_BL_Set</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ili9341.o(i.ILI_BL_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ILI_BL_Set &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili9341.o(.constdata)
</UL>
<P><STRONG><a name="[137]"></a>ILI_Draw_Point</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, ili9341.o(i.ILI_Draw_Point))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ILI_Draw_Point &rArr; ILI_Set_Cursor &rArr; LCD8_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD8_Write_Data
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD8_Write_Cmd
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI_Set_Cursor
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili9341.o(.constdata)
</UL>
<P><STRONG><a name="[136]"></a>ILI_Fill_Area</STRONG> (Thumb, 186 bytes, Stack size 64 bytes, ili9341.o(i.ILI_Fill_Area))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ILI_Fill_Area &rArr; LCD8_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD8_Write_Data
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD8_Write_Cmd
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili9341.o(.constdata)
</UL>
<P><STRONG><a name="[133]"></a>ILI_Get_CID</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ili9341.o(i.ILI_Get_CID))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ILI_Get_CID &rArr; LCD8_Write_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD8_Write_Cmd
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD8_Read_Data
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili9341.o(.constdata)
</UL>
<P><STRONG><a name="[138]"></a>ILI_Get_Point</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, ili9341.o(i.ILI_Get_Point))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ILI_Get_Point &rArr; ILI_Set_Cursor &rArr; LCD8_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD8_Write_Cmd
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD8_Read_Data
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI_Set_Cursor
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili9341.o(.constdata)
</UL>
<P><STRONG><a name="[132]"></a>ILI_Init</STRONG> (Thumb, 1060 bytes, Stack size 24 bytes, ili9341.o(i.ILI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ILI_Init &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Driver_Find
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Us
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD8_Write_Data
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD8_Write_Cmd
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili9341.o(.constdata)
</UL>
<P><STRONG><a name="[2c7]"></a>ILI_Set_Cursor</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, ili9341.o(i.ILI_Set_Cursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ILI_Set_Cursor &rArr; LCD8_Write_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD8_Write_Data
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD8_Write_Cmd
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI_Get_Point
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI_Draw_Point
</UL>

<P><STRONG><a name="[9d]"></a>IO_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ili9341.o(i.IO_Init))
<BR>[Address Reference Count : 1]<UL><LI> ili9341.o(i.ILI_Init)
</UL>
<P><STRONG><a name="[a0]"></a>IO_Read_Data</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ili9341.o(i.IO_Read_Data))
<BR>[Address Reference Count : 1]<UL><LI> ili9341.o(i.ILI_Init)
</UL>
<P><STRONG><a name="[9e]"></a>IO_Write_Cmd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ili9341.o(i.IO_Write_Cmd))
<BR>[Address Reference Count : 1]<UL><LI> ili9341.o(i.ILI_Init)
</UL>
<P><STRONG><a name="[9f]"></a>IO_Write_Data</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ili9341.o(i.IO_Write_Data))
<BR>[Address Reference Count : 1]<UL><LI> ili9341.o(i.ILI_Init)
</UL>
<P><STRONG><a name="[2ca]"></a>LCD8_Read_Data</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ili9341.o(i.LCD8_Read_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD8_Read_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI_Get_Point
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI_Get_CID
</UL>

<P><STRONG><a name="[2c8]"></a>LCD8_Write_Cmd</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, ili9341.o(i.LCD8_Write_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD8_Write_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI_Set_Cursor
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI_Init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI_Get_Point
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI_Get_CID
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI_Fill_Area
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI_Draw_Point
</UL>

<P><STRONG><a name="[2c9]"></a>LCD8_Write_Data</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, ili9341.o(i.LCD8_Write_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD8_Write_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI_Set_Cursor
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI_Init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI_Fill_Area
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI_Draw_Point
</UL>

<P><STRONG><a name="[304]"></a>FW_Device_GetParent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd25q64.o(i.FW_Device_GetParent))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNOR_Write
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNOR_Read
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNOR_Init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNOR_Get_CID
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNOR_Erase_Sector
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNOR_Erase_Chip
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Write_Byte
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Write
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Read_Byte
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Read
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Get_CID
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_EN
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_DI
</UL>

<P><STRONG><a name="[273]"></a>FW_GPIO_Init</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, gd25q64.o(i.FW_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Init
</UL>

<P><STRONG><a name="[286]"></a>FW_GPIO_Write</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, gd25q64.o(i.FW_GPIO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Init
</UL>

<P><STRONG><a name="[2ff]"></a>SGP_Busy_Wait</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, gd25q64.o(i.SGP_Busy_Wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SGP_Busy_Wait &rArr; SGP_Write_Byte &rArr; FW_SPI_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Write_Byte
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Read_Byte
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_EN
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_DI
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Write
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Read
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Erase_Sector
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Erase_Chip
</UL>

<P><STRONG><a name="[303]"></a>SGP_DI</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, gd25q64.o(i.SGP_DI))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SGP_DI &rArr; FW_SPI_CSSet
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_CSSet
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Write
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_WREN
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Read
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Get_CID
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Erase_Sector
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Erase_Chip
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Busy_Wait
</UL>

<P><STRONG><a name="[300]"></a>SGP_EN</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, gd25q64.o(i.SGP_EN))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SGP_EN &rArr; FW_SPI_CSSet
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_CSSet
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Write
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_WREN
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Read
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Get_CID
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Erase_Sector
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Erase_Chip
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Busy_Wait
</UL>

<P><STRONG><a name="[a6]"></a>SGP_Erase_Chip</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, gd25q64.o(i.SGP_Erase_Chip))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SGP_Erase_Chip &rArr; SGP_Busy_Wait &rArr; SGP_Write_Byte &rArr; FW_SPI_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Write_Byte
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_WREN
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_EN
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_DI
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Busy_Wait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gd25q64.o(i.SNOR_Init)
</UL>
<P><STRONG><a name="[a7]"></a>SGP_Erase_Sector</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, gd25q64.o(i.SGP_Erase_Sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SGP_Erase_Sector &rArr; SGP_Busy_Wait &rArr; SGP_Write_Byte &rArr; FW_SPI_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Write_Byte
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_WREN
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_EN
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_DI
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Busy_Wait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gd25q64.o(i.SNOR_Init)
</UL>
<P><STRONG><a name="[a5]"></a>SGP_Get_CID</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, gd25q64.o(i.SGP_Get_CID))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SGP_Get_CID &rArr; SGP_Write_Byte &rArr; FW_SPI_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_Read
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Write_Byte
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_EN
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_DI
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gd25q64.o(i.SNOR_Init)
</UL>
<P><STRONG><a name="[a4]"></a>SGP_Init</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, gd25q64.o(i.SGP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SGP_Init &rArr; FW_SPI_Init &rArr; FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_Init
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Write_Byte
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Read_Byte
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_EN
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_DI
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gd25q64.o(i.SNOR_Init)
</UL>
<P><STRONG><a name="[a9]"></a>SGP_Read</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, gd25q64.o(i.SGP_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SGP_Read &rArr; SGP_Busy_Wait &rArr; SGP_Write_Byte &rArr; FW_SPI_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_Read
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Write_Byte
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_EN
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_DI
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Busy_Wait
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gd25q64.o(i.SNOR_Init)
</UL>
<P><STRONG><a name="[302]"></a>SGP_Read_Byte</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, gd25q64.o(i.SGP_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SGP_Read_Byte &rArr; FW_SPI_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_Read
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Init
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Busy_Wait
</UL>

<P><STRONG><a name="[306]"></a>SGP_WREN</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gd25q64.o(i.SGP_WREN))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SGP_WREN &rArr; SGP_Write_Byte &rArr; FW_SPI_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Write_Byte
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_EN
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_DI
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Write
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Erase_Sector
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Erase_Chip
</UL>

<P><STRONG><a name="[a8]"></a>SGP_Write</STRONG> (Thumb, 262 bytes, Stack size 32 bytes, gd25q64.o(i.SGP_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SGP_Write &rArr; SGP_Busy_Wait &rArr; SGP_Write_Byte &rArr; FW_SPI_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_Write
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Write_Byte
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_WREN
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_EN
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_DI
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Busy_Wait
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gd25q64.o(i.SNOR_Init)
</UL>
<P><STRONG><a name="[301]"></a>SGP_Write_Byte</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, gd25q64.o(i.SGP_Write_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SGP_Write_Byte &rArr; FW_SPI_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_Write
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Write
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_WREN
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Read
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Get_CID
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Erase_Sector
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Erase_Chip
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Busy_Wait
</UL>

<P><STRONG><a name="[140]"></a>SNOR_Erase_Chip</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, gd25q64.o(i.SNOR_Erase_Chip))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SNOR_Erase_Chip
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gd25q64.o(.constdata)
</UL>
<P><STRONG><a name="[141]"></a>SNOR_Erase_Sector</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gd25q64.o(i.SNOR_Erase_Sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SNOR_Erase_Sector
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gd25q64.o(.constdata)
</UL>
<P><STRONG><a name="[13e]"></a>SNOR_Get_CID</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gd25q64.o(i.SNOR_Get_CID))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SNOR_Get_CID
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gd25q64.o(.constdata)
</UL>
<P><STRONG><a name="[13d]"></a>SNOR_Get_Main</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, gd25q64.o(i.SNOR_Get_Main))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SNOR_Get_Main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gd25q64.o(.constdata)
</UL>
<P><STRONG><a name="[13f]"></a>SNOR_Get_PEState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd25q64.o(i.SNOR_Get_PEState))
<BR>[Address Reference Count : 1]<UL><LI> gd25q64.o(.constdata)
</UL>
<P><STRONG><a name="[13b]"></a>SNOR_Get_SectorBase</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd25q64.o(i.SNOR_Get_SectorBase))
<BR>[Address Reference Count : 1]<UL><LI> gd25q64.o(.constdata)
</UL>
<P><STRONG><a name="[13a]"></a>SNOR_Get_SectorNum</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd25q64.o(i.SNOR_Get_SectorNum))
<BR>[Address Reference Count : 1]<UL><LI> gd25q64.o(.constdata)
</UL>
<P><STRONG><a name="[13c]"></a>SNOR_Get_SectorSize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd25q64.o(i.SNOR_Get_SectorSize))
<BR>[Address Reference Count : 1]<UL><LI> gd25q64.o(.constdata)
</UL>
<P><STRONG><a name="[139]"></a>SNOR_Init</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, gd25q64.o(i.SNOR_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SNOR_Init &rArr; FW_Driver_Find &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Driver_Find
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gd25q64.o(.constdata)
</UL>
<P><STRONG><a name="[143]"></a>SNOR_Read</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, gd25q64.o(i.SNOR_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SNOR_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gd25q64.o(.constdata)
</UL>
<P><STRONG><a name="[142]"></a>SNOR_Write</STRONG> (Thumb, 140 bytes, Stack size 296 bytes, gd25q64.o(i.SNOR_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = SNOR_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gd25q64.o(.constdata)
</UL>
<P><STRONG><a name="[374]"></a>FW_Device_GetParent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wf200d.o(i.FW_Device_GetParent))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF200D_SPI_WriteByte
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF200D_SPI_ReadByte
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF200D_SPI_Init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF200D_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF200D_I2C_WriteByte
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF200D_I2C_ReadByte
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF200D_I2C_Init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF200D_Get_Temprature
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF200D_Get_Pressure
</UL>

<P><STRONG><a name="[148]"></a>WF200D_Get_Pressure</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, wf200d.o(i.WF200D_Get_Pressure))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = WF200D_Get_Pressure &rArr; WF200D_Write_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Ms
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF200D_Write_Byte
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF200D_Read_Byte
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wf200d.o(.constdata)
</UL>
<P><STRONG><a name="[147]"></a>WF200D_Get_Temprature</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, wf200d.o(i.WF200D_Get_Temprature))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = WF200D_Get_Temprature &rArr; WF200D_Write_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Ms
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF200D_Write_Byte
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF200D_Read_Byte
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wf200d.o(.constdata)
</UL>
<P><STRONG><a name="[b9]"></a>WF200D_I2C_Init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, wf200d.o(i.WF200D_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = WF200D_I2C_Init &rArr; FW_I2C_Init &rArr; SGTR_Config &rArr; MM_Malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_I2C_SetDelay
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_I2C_Init
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wf200d.o(i.WF200D_Init)
</UL>
<P><STRONG><a name="[bb]"></a>WF200D_I2C_ReadByte</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, wf200d.o(i.WF200D_I2C_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WF200D_I2C_ReadByte &rArr; FW_I2C_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_I2C_Read
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wf200d.o(i.WF200D_Init)
</UL>
<P><STRONG><a name="[ba]"></a>WF200D_I2C_WriteByte</STRONG> (Thumb, 28 bytes, Stack size 32 bytes, wf200d.o(i.WF200D_I2C_WriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = WF200D_I2C_WriteByte &rArr; FW_I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_I2C_Write
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wf200d.o(i.WF200D_Init)
</UL>
<P><STRONG><a name="[144]"></a>WF200D_Init</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, wf200d.o(i.WF200D_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = WF200D_Init &rArr; FW_Driver_Find &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Driver_Find
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wf200d.o(.constdata)
</UL>
<P><STRONG><a name="[376]"></a>WF200D_Read_Byte</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, wf200d.o(i.WF200D_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WF200D_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF200D_Get_Temprature
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF200D_Get_Pressure
</UL>

<P><STRONG><a name="[145]"></a>WF200D_Reset</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wf200d.o(i.WF200D_Reset))
<BR>[Address Reference Count : 1]<UL><LI> wf200d.o(.constdata)
</UL>
<P><STRONG><a name="[bc]"></a>WF200D_SPI_Init</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, wf200d.o(i.WF200D_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = WF200D_SPI_Init &rArr; FW_SPI_Init &rArr; FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wf200d.o(i.WF200D_Init)
</UL>
<P><STRONG><a name="[be]"></a>WF200D_SPI_ReadByte</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, wf200d.o(i.WF200D_SPI_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WF200D_SPI_ReadByte &rArr; FW_SPI_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_Write
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_Read
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_CSSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wf200d.o(i.WF200D_Init)
</UL>
<P><STRONG><a name="[bd]"></a>WF200D_SPI_WriteByte</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, wf200d.o(i.WF200D_SPI_WriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WF200D_SPI_WriteByte &rArr; FW_SPI_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_Write
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_CSSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wf200d.o(i.WF200D_Init)
</UL>
<P><STRONG><a name="[146]"></a>WF200D_Set_Period</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wf200d.o(i.WF200D_Set_Period))
<BR>[Address Reference Count : 1]<UL><LI> wf200d.o(.constdata)
</UL>
<P><STRONG><a name="[375]"></a>WF200D_Write_Byte</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, wf200d.o(i.WF200D_Write_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WF200D_Write_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF200D_Get_Temprature
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF200D_Get_Pressure
</UL>

<P><STRONG><a name="[373]"></a>CRC_Get</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, wf183d.o(i.CRC_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CRC_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF183D_UART_GetTemprature
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF183D_UART_GetPressure
</UL>

<P><STRONG><a name="[371]"></a>FW_Device_GetParent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wf183d.o(i.FW_Device_GetParent))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF183D_UART_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF183D_UART_GetTemprature
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF183D_UART_GetPressure
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF183D_Init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF183D_I2C_Init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF183D_Get_Temprature
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF183D_Get_Pressure
</UL>

<P><STRONG><a name="[14e]"></a>WF183D_Get_Pressure</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, wf183d.o(i.WF183D_Get_Pressure))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WF183D_Get_Pressure
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wf183d.o(.constdata)
</UL>
<P><STRONG><a name="[14d]"></a>WF183D_Get_Temprature</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, wf183d.o(i.WF183D_Get_Temprature))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WF183D_Get_Temprature
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wf183d.o(.constdata)
</UL>
<P><STRONG><a name="[b4]"></a>WF183D_I2C_GetPressure</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wf183d.o(i.WF183D_I2C_GetPressure))
<BR>[Address Reference Count : 1]<UL><LI> wf183d.o(i.WF183D_Init)
</UL>
<P><STRONG><a name="[b5]"></a>WF183D_I2C_GetTemprature</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wf183d.o(i.WF183D_I2C_GetTemprature))
<BR>[Address Reference Count : 1]<UL><LI> wf183d.o(i.WF183D_Init)
</UL>
<P><STRONG><a name="[b3]"></a>WF183D_I2C_Init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, wf183d.o(i.WF183D_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = WF183D_I2C_Init &rArr; FW_I2C_Init &rArr; SGTR_Config &rArr; MM_Malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_I2C_SetDelay
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_I2C_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wf183d.o(i.WF183D_Init)
</UL>
<P><STRONG><a name="[14a]"></a>WF183D_Init</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, wf183d.o(i.WF183D_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = WF183D_Init &rArr; FW_Driver_Find &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Driver_Find
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wf183d.o(.constdata)
</UL>
<P><STRONG><a name="[b7]"></a>WF183D_OWI_GetPressure</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wf183d.o(i.WF183D_OWI_GetPressure))
<BR>[Address Reference Count : 1]<UL><LI> wf183d.o(i.WF183D_Init)
</UL>
<P><STRONG><a name="[b8]"></a>WF183D_OWI_GetTemprature</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wf183d.o(i.WF183D_OWI_GetTemprature))
<BR>[Address Reference Count : 1]<UL><LI> wf183d.o(i.WF183D_Init)
</UL>
<P><STRONG><a name="[b6]"></a>WF183D_OWI_Init</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, wf183d.o(i.WF183D_OWI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WF183D_OWI_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wf183d.o(i.WF183D_Init)
</UL>
<P><STRONG><a name="[14f]"></a>WF183D_Press_Formula</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wf183d.o(i.WF183D_Press_Formula))
<BR>[Address Reference Count : 1]<UL><LI> wf183d.o(.constdata)
</UL>
<P><STRONG><a name="[14b]"></a>WF183D_Reset</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wf183d.o(i.WF183D_Reset))
<BR>[Address Reference Count : 1]<UL><LI> wf183d.o(.constdata)
</UL>
<P><STRONG><a name="[14c]"></a>WF183D_Set_Period</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wf183d.o(i.WF183D_Set_Period))
<BR>[Address Reference Count : 1]<UL><LI> wf183d.o(.constdata)
</UL>
<P><STRONG><a name="[b1]"></a>WF183D_UART_GetPressure</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, wf183d.o(i.WF183D_UART_GetPressure))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = WF183D_UART_GetPressure &rArr; WF183D_UART_GetTemprature &rArr; FW_UART_ReadHL &rArr; RB_Read_HL &rArr; RB_Read &rArr; RB_Get_DataLength &rArr; FW_Unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Ms
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_Write
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_ReadHL
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF183D_UART_GetTemprature
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wf183d.o(i.WF183D_Init)
</UL>
<P><STRONG><a name="[b2]"></a>WF183D_UART_GetTemprature</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, wf183d.o(i.WF183D_UART_GetTemprature))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = WF183D_UART_GetTemprature &rArr; FW_UART_ReadHL &rArr; RB_Read_HL &rArr; RB_Read &rArr; RB_Get_DataLength &rArr; FW_Unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Ms
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_Write
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_ReadHL
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WF183D_UART_GetPressure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wf183d.o(i.WF183D_Init)
</UL>
<P><STRONG><a name="[b0]"></a>WF183D_UART_Init</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, wf183d.o(i.WF183D_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = WF183D_UART_Init &rArr; FW_UART_Init &rArr; SGTR_Config &rArr; MM_Malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_Init
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wf183d.o(i.WF183D_Init)
</UL>
<P><STRONG><a name="[1ec]"></a>AT_Send</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, esp8266.o(i.AT_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = AT_Send &rArr; ESP8266_String_IsExist &rArr; FW_UART_StringIsExist &rArr; RB_String_IsExist &rArr; RB_Find_StringCS_RL1 &rArr; Strfind
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Ms
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Write_Cmd
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_String_IsExist
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Clear_RBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Set_TRPT
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Set_Mode
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Restore
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Reset
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_ServerInfo
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_Mode
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_LocalInof
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_LinkState
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_APInfo
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_AP_AutoLink
</UL>

<P><STRONG><a name="[15c]"></a>ESP8266_AP_AutoLink</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, esp8266.o(i.ESP8266_AP_AutoLink))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = ESP8266_AP_AutoLink &rArr; AT_Send &rArr; ESP8266_String_IsExist &rArr; FW_UART_StringIsExist &rArr; RB_String_IsExist &rArr; RB_Find_StringCS_RL1 &rArr; Strfind
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.constdata)
</UL>
<P><STRONG><a name="[15a]"></a>ESP8266_AP_Link</STRONG> (Thumb, 258 bytes, Stack size 40 bytes, esp8266.o(i.ESP8266_AP_Link))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = ESP8266_AP_Link &rArr; ESP8266_String_IsExist &rArr; FW_UART_StringIsExist &rArr; RB_String_IsExist &rArr; RB_Find_StringCS_RL1 &rArr; Strfind
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Lock
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Ms
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Write_Cmd
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_String_IsExist
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_RBuff
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Clear_RBuff
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.constdata)
</UL>
<P><STRONG><a name="[159]"></a>ESP8266_AP_Probe</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, esp8266.o(i.ESP8266_AP_Probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = ESP8266_AP_Probe &rArr; ESP8266_String_IsExist &rArr; FW_UART_StringIsExist &rArr; RB_String_IsExist &rArr; RB_Find_StringCS_RL1 &rArr; Strfind
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Lock
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Ms
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Write_Cmd
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_String_IsExist
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Clear_RBuff
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.constdata)
</UL>
<P><STRONG><a name="[15b]"></a>ESP8266_AP_Unlink</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, esp8266.o(i.ESP8266_AP_Unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ESP8266_AP_Unlink &rArr; ESP8266_Write_Cmd &rArr; FW_UART_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Ms
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Write_Cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.constdata)
</UL>
<P><STRONG><a name="[1ed]"></a>ESP8266_Clear_RBuff</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, esp8266.o(i.ESP8266_Clear_RBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ESP8266_Clear_RBuff &rArr; FW_UART_ClearFIFO &rArr; RB_Clear_Buffer &rArr; FW_Unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_ClearFIFO
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Write
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Server_Link
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_AP_Probe
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_AP_Link
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Send
</UL>

<P><STRONG><a name="[153]"></a>ESP8266_Enter_LPM</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, esp8266.o(i.ESP8266_Enter_LPM))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ESP8266_Enter_LPM &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.constdata)
</UL>
<P><STRONG><a name="[154]"></a>ESP8266_Exit_LPM</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, esp8266.o(i.ESP8266_Exit_LPM))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ESP8266_Exit_LPM &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.constdata)
</UL>
<P><STRONG><a name="[15d]"></a>ESP8266_Get_APInfo</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, esp8266.o(i.ESP8266_Get_APInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = ESP8266_Get_APInfo &rArr; AT_Send &rArr; ESP8266_String_IsExist &rArr; FW_UART_StringIsExist &rArr; RB_String_IsExist &rArr; RB_Find_StringCS_RL1 &rArr; Strfind
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_RBuff
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Send
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.constdata)
</UL>
<P><STRONG><a name="[160]"></a>ESP8266_Get_LinkState</STRONG> (Thumb, 130 bytes, Stack size 88 bytes, esp8266.o(i.ESP8266_Get_LinkState))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = ESP8266_Get_LinkState &rArr; ESP8266_Read_Inter &rArr; FW_UART_ReadInter &rArr; RB_Read_Inter &rArr; RB_Find_StringCS &rArr; Strfind
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Lock
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Read_Inter
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Send
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.constdata)
</UL>
<P><STRONG><a name="[158]"></a>ESP8266_Get_LocalInof</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, esp8266.o(i.ESP8266_Get_LocalInof))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = ESP8266_Get_LocalInof &rArr; ESP8266_Read_Inter &rArr; FW_UART_ReadInter &rArr; RB_Read_Inter &rArr; RB_Find_StringCS &rArr; Strfind
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_String_IsExist
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Read_Inter
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.constdata)
</UL>
<P><STRONG><a name="[156]"></a>ESP8266_Get_Mode</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, esp8266.o(i.ESP8266_Get_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = ESP8266_Get_Mode &rArr; AT_Send &rArr; ESP8266_String_IsExist &rArr; FW_UART_StringIsExist &rArr; RB_String_IsExist &rArr; RB_Find_StringCS_RL1 &rArr; Strfind
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_ReadFirst
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.constdata)
</UL>
<P><STRONG><a name="[231]"></a>ESP8266_Get_RBuff</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, esp8266.o(i.ESP8266_Get_RBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ESP8266_Get_RBuff &rArr; FW_UART_GetFIFOBBase
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_GetFIFOBBase
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_ServerInfo
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_APInfo
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_AP_Link
</UL>

<P><STRONG><a name="[23c]"></a>ESP8266_Get_RDL</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, esp8266.o(i.ESP8266_Get_RDL))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ESP8266_Get_RDL &rArr; FW_UART_GetDataLength &rArr; RB_Get_DataLength &rArr; FW_Unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_GetDataLength
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Read
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_ServerInfo
</UL>

<P><STRONG><a name="[15f]"></a>ESP8266_Get_ServerInfo</STRONG> (Thumb, 348 bytes, Stack size 104 bytes, esp8266.o(i.ESP8266_Get_ServerInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = ESP8266_Get_ServerInfo &rArr; ESP8266_Read_Inter &rArr; FW_UART_ReadInter &rArr; RB_Read_Inter &rArr; RB_Find_StringCS &rArr; Strfind
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Lock
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Read_Inter
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_RDL
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_RBuff
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Send
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.constdata)
</UL>
<P><STRONG><a name="[150]"></a>ESP8266_Init</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, esp8266.o(i.ESP8266_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ESP8266_Init &rArr; FW_UART_Init &rArr; SGTR_Config &rArr; MM_Malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_Init
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.constdata)
</UL>
<P><STRONG><a name="[163]"></a>ESP8266_Read</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, esp8266.o(i.ESP8266_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = ESP8266_Read &rArr; ESP8266_Read_Inter &rArr; FW_UART_ReadInter &rArr; RB_Read_Inter &rArr; RB_Find_StringCS &rArr; Strfind
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Ms
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Read_Msg
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Read_Inter
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_RDL
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.constdata)
</UL>
<P><STRONG><a name="[239]"></a>ESP8266_Read_Inter</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, esp8266.o(i.ESP8266_Read_Inter))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = ESP8266_Read_Inter &rArr; FW_UART_ReadInter &rArr; RB_Read_Inter &rArr; RB_Find_StringCS &rArr; Strfind
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_ReadInter
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Read
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_ServerInfo
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_LocalInof
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_LinkState
</UL>

<P><STRONG><a name="[241]"></a>ESP8266_Read_Msg</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, esp8266.o(i.ESP8266_Read_Msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ESP8266_Read_Msg &rArr; FW_UART_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_Read
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Read
</UL>

<P><STRONG><a name="[151]"></a>ESP8266_Reset</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, esp8266.o(i.ESP8266_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = ESP8266_Reset &rArr; AT_Send &rArr; ESP8266_String_IsExist &rArr; FW_UART_StringIsExist &rArr; RB_String_IsExist &rArr; RB_Find_StringCS_RL1 &rArr; Strfind
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Ms
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.constdata)
</UL>
<P><STRONG><a name="[152]"></a>ESP8266_Restore</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, esp8266.o(i.ESP8266_Restore))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = ESP8266_Restore &rArr; AT_Send &rArr; ESP8266_String_IsExist &rArr; FW_UART_StringIsExist &rArr; RB_String_IsExist &rArr; RB_Find_StringCS_RL1 &rArr; Strfind
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.constdata)
</UL>
<P><STRONG><a name="[15e]"></a>ESP8266_Server_Link</STRONG> (Thumb, 314 bytes, Stack size 40 bytes, esp8266.o(i.ESP8266_Server_Link))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = ESP8266_Server_Link &rArr; ESP8266_String_IsExist &rArr; FW_UART_StringIsExist &rArr; RB_String_IsExist &rArr; RB_Find_StringCS_RL1 &rArr; Strfind
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Ms
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Itoa
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Write_Cmd
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_String_IsExist
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Clear_RBuff
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.constdata)
</UL>
<P><STRONG><a name="[157]"></a>ESP8266_Set_LocalInfo</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, esp8266.o(i.ESP8266_Set_LocalInfo))
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.constdata)
</UL>
<P><STRONG><a name="[155]"></a>ESP8266_Set_Mode</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, esp8266.o(i.ESP8266_Set_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = ESP8266_Set_Mode &rArr; AT_Send &rArr; ESP8266_String_IsExist &rArr; FW_UART_StringIsExist &rArr; RB_String_IsExist &rArr; RB_Find_StringCS_RL1 &rArr; Strfind
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Send
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.constdata)
</UL>
<P><STRONG><a name="[161]"></a>ESP8266_Set_TRPT</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, esp8266.o(i.ESP8266_Set_TRPT))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = ESP8266_Set_TRPT &rArr; AT_Send &rArr; ESP8266_String_IsExist &rArr; FW_UART_StringIsExist &rArr; RB_String_IsExist &rArr; RB_Find_StringCS_RL1 &rArr; Strfind
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Ms
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Write_Cmd
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.constdata)
</UL>
<P><STRONG><a name="[1ef]"></a>ESP8266_String_IsExist</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, esp8266.o(i.ESP8266_String_IsExist))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = ESP8266_String_IsExist &rArr; FW_UART_StringIsExist &rArr; RB_String_IsExist &rArr; RB_Find_StringCS_RL1 &rArr; Strfind
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_StringIsExist
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Write
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Server_Link
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_LocalInof
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_AP_Probe
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_AP_Link
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Send
</UL>

<P><STRONG><a name="[162]"></a>ESP8266_Write</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, esp8266.o(i.ESP8266_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = ESP8266_Write &rArr; ESP8266_String_IsExist &rArr; FW_UART_StringIsExist &rArr; RB_String_IsExist &rArr; RB_Find_StringCS_RL1 &rArr; Strfind
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Ms
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Itoa
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Write_Msg
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Write_Cmd
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_String_IsExist
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Clear_RBuff
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.constdata)
</UL>
<P><STRONG><a name="[1ee]"></a>ESP8266_Write_Cmd</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, esp8266.o(i.ESP8266_Write_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ESP8266_Write_Cmd &rArr; FW_UART_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_Write
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Write
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Set_TRPT
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Server_Link
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_AP_Unlink
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_AP_Probe
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_AP_Link
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Send
</UL>

<P><STRONG><a name="[248]"></a>ESP8266_Write_Msg</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, esp8266.o(i.ESP8266_Write_Msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ESP8266_Write_Msg &rArr; FW_UART_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_Write
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Write
</UL>

<P><STRONG><a name="[230]"></a>FW_Device_GetParent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, esp8266.o(i.FW_Device_GetParent))
<BR><BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Write_Msg
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Write_Cmd
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Write
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_String_IsExist
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Set_TRPT
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Set_Mode
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Server_Link
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Restore
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Reset
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Read_Msg
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Read_Inter
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Read
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_ServerInfo
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_RDL
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_RBuff
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_Mode
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_LocalInof
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_LinkState
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Get_APInfo
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Exit_LPM
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Enter_LPM
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Clear_RBuff
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_AP_Unlink
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_AP_Probe
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_AP_Link
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_AP_AutoLink
</UL>

<P><STRONG><a name="[240]"></a>FW_GPIO_Init</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, esp8266.o(i.FW_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Init
</UL>

<P><STRONG><a name="[235]"></a>FW_GPIO_Write</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, esp8266.o(i.FW_GPIO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Reset
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Exit_LPM
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Enter_LPM
</UL>

<P><STRONG><a name="[245]"></a>Itoa</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, esp8266.o(i.Itoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Itoa
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Write
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Server_Link
</UL>

<P><STRONG><a name="[254]"></a>FM_Anticollision</STRONG> (Thumb, 258 bytes, Stack size 64 bytes, fm17522.o(i.FM_Anticollision))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = FM_Anticollision &rArr; FM_Comm &rArr; FM_Read_FIFO &rArr; FM_Read_Reg
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Write_Reg
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Set_Timer
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Set_BitFraming
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Comm
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_CollSaveUID
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Clear_FIFO
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Clear_BitMask
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_CardRequest
</UL>

<P><STRONG><a name="[25c]"></a>FM_Authent</STRONG> (Thumb, 174 bytes, Stack size 56 bytes, fm17522.o(i.FM_Authent))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = FM_Authent &rArr; FM_Comm &rArr; FM_Read_FIFO &rArr; FM_Read_Reg
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Set_Timer
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Read_Reg
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Comm
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Clear_FIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_CardActive
</UL>

<P><STRONG><a name="[255]"></a>FM_Clear_BitMask</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, fm17522.o(i.FM_Clear_BitMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FM_Clear_BitMask &rArr; FM_Write_Reg
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Write_Reg
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Read_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_LPMConfig
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_CardHalt
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Set_RF
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Select
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Request
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Comm
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Anticollision
</UL>

<P><STRONG><a name="[25a]"></a>FM_Clear_FIFO</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fm17522.o(i.FM_Clear_FIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FM_Clear_FIFO &rArr; FM_Set_BitMask &rArr; FM_Write_Reg
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Set_BitMask
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Read_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_CardHalt
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_BlockWrite
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_BlockRead
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Select
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Request
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Comm
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Authent
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Anticollision
</UL>

<P><STRONG><a name="[257]"></a>FM_CollSaveUID</STRONG> (Thumb, 264 bytes, Stack size 48 bytes, fm17522.o(i.FM_CollSaveUID))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FM_CollSaveUID
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeftMoveBit
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Anticollision
</UL>

<P><STRONG><a name="[25b]"></a>FM_Comm</STRONG> (Thumb, 546 bytes, Stack size 112 bytes, fm17522.o(i.FM_Comm))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = FM_Comm &rArr; FM_Read_FIFO &rArr; FM_Read_Reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Ms
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Write_Reg
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Set_BitMask
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Read_Reg
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Read_FIFO
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Clear_FIFO
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Clear_BitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_CardHalt
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_BlockWrite
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_BlockRead
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Select
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Request
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Authent
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Anticollision
</UL>

<P><STRONG><a name="[261]"></a>FM_Config_ISOType</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, fm17522.o(i.FM_Config_ISOType))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FM_Config_ISOType &rArr; FM_Set_BitMask &rArr; FM_Write_Reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Ms
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Write_Reg
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Set_BitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_SetCP
</UL>

<P><STRONG><a name="[260]"></a>FM_Read_FIFO</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, fm17522.o(i.FM_Read_FIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FM_Read_FIFO &rArr; FM_Read_Reg
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Read_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Comm
</UL>

<P><STRONG><a name="[25d]"></a>FM_Read_Reg</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, fm17522.o(i.FM_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FM_Read_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_LPMConfig
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Set_RF
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Set_BitMask
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Read_FIFO
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Comm
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Clear_FIFO
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Clear_BitMask
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Authent
</UL>

<P><STRONG><a name="[262]"></a>FM_Request</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, fm17522.o(i.FM_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = FM_Request &rArr; FM_Comm &rArr; FM_Read_FIFO &rArr; FM_Read_Reg
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Write_Reg
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Set_Timer
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Set_BitMask
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Comm
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Clear_FIFO
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Clear_BitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_CardRequest
</UL>

<P><STRONG><a name="[263]"></a>FM_Select</STRONG> (Thumb, 158 bytes, Stack size 56 bytes, fm17522.o(i.FM_Select))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = FM_Select &rArr; FM_Comm &rArr; FM_Read_FIFO &rArr; FM_Read_Reg
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Write_Reg
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Set_Timer
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Set_BitMask
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Comm
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Clear_FIFO
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Clear_BitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_CardRequest
</UL>

<P><STRONG><a name="[258]"></a>FM_Set_BitFraming</STRONG> (Thumb, 268 bytes, Stack size 24 bytes, fm17522.o(i.FM_Set_BitFraming))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FM_Set_BitFraming &rArr; FM_Write_Reg
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Write_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Anticollision
</UL>

<P><STRONG><a name="[25e]"></a>FM_Set_BitMask</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, fm17522.o(i.FM_Set_BitMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FM_Set_BitMask &rArr; FM_Write_Reg
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Write_Reg
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Read_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_Reset
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_LPMConfig
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_CardHalt
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Set_Timer
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Set_RF
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Select
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Request
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Config_ISOType
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Comm
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Clear_FIFO
</UL>

<P><STRONG><a name="[264]"></a>FM_Set_RF</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, fm17522.o(i.FM_Set_RF))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FM_Set_RF &rArr; FM_Set_BitMask &rArr; FM_Write_Reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Ms
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Set_BitMask
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Read_Reg
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Clear_BitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_SetRFM
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_LPMConfig
</UL>

<P><STRONG><a name="[259]"></a>FM_Set_Timer</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, fm17522.o(i.FM_Set_Timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FM_Set_Timer &rArr; FM_Set_BitMask &rArr; FM_Write_Reg
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Write_Reg
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Set_BitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_CardHalt
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_BlockWrite
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_BlockRead
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Select
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Request
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Authent
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Anticollision
</UL>

<P><STRONG><a name="[256]"></a>FM_Write_Reg</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, fm17522.o(i.FM_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FM_Write_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_Reset
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_CardHalt
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Set_Timer
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Set_BitMask
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Set_BitFraming
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Select
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Request
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Config_ISOType
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Comm
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Clear_BitMask
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Anticollision
</UL>

<P><STRONG><a name="[2e6]"></a>FW_Device_GetParent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fm17522.o(i.FW_Device_GetParent))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Set_Reg
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Get_Reg
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_SetRFM
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_SetCP
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_Reset
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_LPMConfig
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_Init
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_CardRequest
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_CardHalt
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_CardActive
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_BlockWrite
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_BlockRead
</UL>

<P><STRONG><a name="[274]"></a>FW_GPIO_Init</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, fm17522.o(i.FW_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Init
</UL>

<P><STRONG><a name="[287]"></a>FW_GPIO_Write</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, fm17522.o(i.FW_GPIO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_Init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_Reset
</UL>

<P><STRONG><a name="[25f]"></a>LeftMoveBit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fm17522.o(i.LeftMoveBit))
<BR><BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_CollSaveUID
</UL>

<P><STRONG><a name="[16c]"></a>MF_S522_BlockRead</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, fm17522.o(i.MF_S522_BlockRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = MF_S522_BlockRead &rArr; FM_Comm &rArr; FM_Read_FIFO &rArr; FM_Read_Reg
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Set_Timer
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Comm
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Clear_FIFO
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fm17522.o(.constdata)
</UL>
<P><STRONG><a name="[16d]"></a>MF_S522_BlockWrite</STRONG> (Thumb, 150 bytes, Stack size 56 bytes, fm17522.o(i.MF_S522_BlockWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = MF_S522_BlockWrite &rArr; FM_Comm &rArr; FM_Read_FIFO &rArr; FM_Read_Reg
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Set_Timer
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Comm
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Clear_FIFO
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fm17522.o(.constdata)
</UL>
<P><STRONG><a name="[16b]"></a>MF_S522_CardActive</STRONG> (Thumb, 102 bytes, Stack size 56 bytes, fm17522.o(i.MF_S522_CardActive))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = MF_S522_CardActive &rArr; MF_S522_CardRequest &rArr; FM_Anticollision &rArr; FM_Comm &rArr; FM_Read_FIFO &rArr; FM_Read_Reg
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_CardRequest
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Authent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fm17522.o(.constdata)
</UL>
<P><STRONG><a name="[169]"></a>MF_S522_CardHalt</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, fm17522.o(i.MF_S522_CardHalt))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = MF_S522_CardHalt &rArr; FM_Comm &rArr; FM_Read_FIFO &rArr; FM_Read_Reg
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Write_Reg
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Set_Timer
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Set_BitMask
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Comm
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Clear_FIFO
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Clear_BitMask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fm17522.o(.constdata)
</UL>
<P><STRONG><a name="[16a]"></a>MF_S522_CardRequest</STRONG> (Thumb, 348 bytes, Stack size 32 bytes, fm17522.o(i.MF_S522_CardRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = MF_S522_CardRequest &rArr; FM_Anticollision &rArr; FM_Comm &rArr; FM_Read_FIFO &rArr; FM_Read_Reg
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Select
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Request
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Anticollision
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_S522_CardActive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fm17522.o(.constdata)
</UL>
<P><STRONG><a name="[164]"></a>MF_S522_Init</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, fm17522.o(i.MF_S522_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MF_S522_Init &rArr; FW_Driver_Find &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Driver_Find
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fm17522.o(.constdata)
</UL>
<P><STRONG><a name="[166]"></a>MF_S522_LPMConfig</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, fm17522.o(i.MF_S522_LPMConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MF_S522_LPMConfig &rArr; FM_Set_RF &rArr; FM_Set_BitMask &rArr; FM_Write_Reg
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Set_RF
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Set_BitMask
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Read_Reg
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Clear_BitMask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fm17522.o(.constdata)
</UL>
<P><STRONG><a name="[165]"></a>MF_S522_Reset</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, fm17522.o(i.MF_S522_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MF_S522_Reset &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Ms
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Write_Reg
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Set_BitMask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fm17522.o(.constdata)
</UL>
<P><STRONG><a name="[167]"></a>MF_S522_SetCP</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, fm17522.o(i.MF_S522_SetCP))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MF_S522_SetCP &rArr; FM_Config_ISOType &rArr; FM_Set_BitMask &rArr; FM_Write_Reg
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Config_ISOType
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fm17522.o(.constdata)
</UL>
<P><STRONG><a name="[168]"></a>MF_S522_SetRFM</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, fm17522.o(i.MF_S522_SetRFM))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MF_S522_SetRFM &rArr; FM_Set_RF &rArr; FM_Set_BitMask &rArr; FM_Write_Reg
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Set_RF
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fm17522.o(.constdata)
</UL>
<P><STRONG><a name="[a2]"></a>SGP_Get_Reg</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, fm17522.o(i.SGP_Get_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SGP_Get_Reg &rArr; FW_SPI_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_Write
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_Read
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_CSSet
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fm17522.o(i.MF_S522_Init)
</UL>
<P><STRONG><a name="[a1]"></a>SGP_Init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, fm17522.o(i.SGP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SGP_Init &rArr; FW_SPI_Init &rArr; FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_Init
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fm17522.o(i.MF_S522_Init)
</UL>
<P><STRONG><a name="[a3]"></a>SGP_Set_Reg</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, fm17522.o(i.SGP_Set_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SGP_Set_Reg &rArr; FW_SPI_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_Write
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_CSSet
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fm17522.o(i.MF_S522_Init)
</UL>
<P><STRONG><a name="[171]"></a>DS_Get_Temprature</STRONG> (Thumb, 206 bytes, Stack size 48 bytes, ds18b20.o(i.DS_Get_Temprature))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = DS_Get_Temprature &rArr; DS_Write &rArr; FW_OW_Write &rArr; FW_OW_WriteByte &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_OW_WaitACK
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_OW_Reset
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_Write
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ds18b20.o(.constdata)
</UL>
<P><STRONG><a name="[16e]"></a>DS_Init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, ds18b20.o(i.DS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DS_Init &rArr; FW_OW_Init &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_OW_Init
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ds18b20.o(.constdata)
</UL>
<P><STRONG><a name="[22b]"></a>DS_Read</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ds18b20.o(i.DS_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DS_Read &rArr; FW_OW_Read &rArr; FW_OW_ReadByte &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_OW_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_Get_Temprature
</UL>

<P><STRONG><a name="[16f]"></a>DS_Reset</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ds18b20.o(i.DS_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DS_Reset &rArr; FW_OW_Reset &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_OW_Reset
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ds18b20.o(.constdata)
</UL>
<P><STRONG><a name="[170]"></a>DS_Set_Period</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ds18b20.o(i.DS_Set_Period))
<BR>[Address Reference Count : 1]<UL><LI> ds18b20.o(.constdata)
</UL>
<P><STRONG><a name="[22a]"></a>DS_Write</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ds18b20.o(i.DS_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DS_Write &rArr; FW_OW_Write &rArr; FW_OW_WriteByte &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_OW_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_Get_Temprature
</UL>

<P><STRONG><a name="[227]"></a>FW_Device_GetParent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ds18b20.o(i.FW_Device_GetParent))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_Reset
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_Init
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_Get_Temprature
</UL>

<P><STRONG><a name="[2dd]"></a>FW_Device_GetParent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, st7735.o(i.FW_Device_GetParent))
<BR><BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Set_Cursor
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Init
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Get_ScreenSize
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Fill_Area
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Draw_Point
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_EN
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_DI
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD8_Write_Data
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD8_Write_Cmd
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD8_Write
</UL>

<P><STRONG><a name="[275]"></a>FW_GPIO_Init</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, st7735.o(i.FW_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Init
</UL>

<P><STRONG><a name="[288]"></a>FW_GPIO_Write</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, st7735.o(i.FW_GPIO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Init
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD8_Write_Cmd
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD8_RS_Data
</UL>

<P><STRONG><a name="[2db]"></a>LCD8_RS_Data</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, st7735.o(i.LCD8_RS_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LCD8_RS_Data &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD8_Write_Data
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD8_Write
</UL>

<P><STRONG><a name="[2dc]"></a>LCD8_Write</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, st7735.o(i.LCD8_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LCD8_Write &rArr; LCD8_RS_Data &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_Write
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_EN
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_DI
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD8_RS_Data
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Fill_Area
</UL>

<P><STRONG><a name="[2e1]"></a>LCD8_Write_Cmd</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, st7735.o(i.LCD8_Write_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LCD8_Write_Cmd &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_Write
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_EN
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_DI
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Set_Cursor
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Init
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Fill_Area
</UL>

<P><STRONG><a name="[2e2]"></a>LCD8_Write_Data</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, st7735.o(i.LCD8_Write_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LCD8_Write_Data &rArr; LCD8_RS_Data &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_Write
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_EN
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGP_DI
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD8_RS_Data
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Set_Cursor
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Init
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Draw_Point
</UL>

<P><STRONG><a name="[2e0]"></a>SGP_DI</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, st7735.o(i.SGP_DI))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SGP_DI &rArr; FW_SPI_CSSet
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_CSSet
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD8_Write_Data
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD8_Write_Cmd
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD8_Write
</UL>

<P><STRONG><a name="[2de]"></a>SGP_EN</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, st7735.o(i.SGP_EN))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SGP_EN &rArr; FW_SPI_CSSet
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_CSSet
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD8_Write_Data
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD8_Write_Cmd
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD8_Write
</UL>

<P><STRONG><a name="[175]"></a>ST7735_BL_Get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, st7735.o(i.ST7735_BL_Get))
<BR>[Address Reference Count : 1]<UL><LI> st7735.o(.constdata)
</UL>
<P><STRONG><a name="[174]"></a>ST7735_BL_Set</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, st7735.o(i.ST7735_BL_Set))
<BR>[Address Reference Count : 1]<UL><LI> st7735.o(.constdata)
</UL>
<P><STRONG><a name="[177]"></a>ST7735_Draw_Point</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, st7735.o(i.ST7735_Draw_Point))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ST7735_Draw_Point &rArr; ST7735_Set_Cursor &rArr; LCD8_Write_Data &rArr; LCD8_RS_Data &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Set_Cursor
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD8_Write_Data
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st7735.o(.constdata)
</UL>
<P><STRONG><a name="[176]"></a>ST7735_Fill_Area</STRONG> (Thumb, 264 bytes, Stack size 64 bytes, st7735.o(i.ST7735_Fill_Area))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ST7735_Fill_Area &rArr; LCD8_Write &rArr; LCD8_RS_Data &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD8_Write_Cmd
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD8_Write
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st7735.o(.constdata)
</UL>
<P><STRONG><a name="[173]"></a>ST7735_Get_CID</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, st7735.o(i.ST7735_Get_CID))
<BR>[Address Reference Count : 1]<UL><LI> st7735.o(.constdata)
</UL>
<P><STRONG><a name="[178]"></a>ST7735_Get_Point</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, st7735.o(i.ST7735_Get_Point))
<BR>[Address Reference Count : 1]<UL><LI> st7735.o(.constdata)
</UL>
<P><STRONG><a name="[179]"></a>ST7735_Get_ScreenSize</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, st7735.o(i.ST7735_Get_ScreenSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ST7735_Get_ScreenSize
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st7735.o(.constdata)
</UL>
<P><STRONG><a name="[172]"></a>ST7735_Init</STRONG> (Thumb, 1194 bytes, Stack size 24 bytes, st7735.o(i.ST7735_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ST7735_Init &rArr; FW_SPI_Init &rArr; FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_Init
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Driver_Find
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Us
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD8_Write_Data
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD8_Write_Cmd
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st7735.o(.constdata)
</UL>
<P><STRONG><a name="[323]"></a>ST7735_Set_Cursor</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, st7735.o(i.ST7735_Set_Cursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ST7735_Set_Cursor &rArr; LCD8_Write_Data &rArr; LCD8_RS_Data &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD8_Write_Data
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD8_Write_Cmd
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Draw_Point
</UL>

<P><STRONG><a name="[34e]"></a>Code_GetSrc</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, tm7711.o(i.Code_GetSrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Code_GetSrc
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM77_Get_Temprature
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM77_Get_Sample
</UL>

<P><STRONG><a name="[34d]"></a>FW_Device_GetParent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tm7711.o(i.FW_Device_GetParent))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM77_Set_Period
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM77_Init
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM77_Get_Temprature
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM77_Get_Sample
</UL>

<P><STRONG><a name="[276]"></a>FW_GPIO_Init</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, tm7711.o(i.FW_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM77_Init
</UL>

<P><STRONG><a name="[27f]"></a>FW_GPIO_Read</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tm7711.o(i.FW_GPIO_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FW_GPIO_Read &rArr; GPIO_PinRead
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRead
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM77_Get_Temprature
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM77_Get_Sample
</UL>

<P><STRONG><a name="[289]"></a>FW_GPIO_Write</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, tm7711.o(i.FW_GPIO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM77_Set_Period
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM77_Get_Temprature
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM77_Get_Sample
</UL>

<P><STRONG><a name="[17e]"></a>TM77_Get_Sample</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, tm7711.o(i.TM77_Get_Sample))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TM77_Get_Sample &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Us
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Read
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Code_GetSrc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tm7711.o(.constdata)
</UL>
<P><STRONG><a name="[17d]"></a>TM77_Get_Temprature</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, tm7711.o(i.TM77_Get_Temprature))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TM77_Get_Temprature &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Us
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Read
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Code_GetSrc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tm7711.o(.constdata)
</UL>
<P><STRONG><a name="[17a]"></a>TM77_Init</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, tm7711.o(i.TM77_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TM77_Init &rArr; FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tm7711.o(.constdata)
</UL>
<P><STRONG><a name="[17b]"></a>TM77_Reset</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tm7711.o(i.TM77_Reset))
<BR>[Address Reference Count : 1]<UL><LI> tm7711.o(.constdata)
</UL>
<P><STRONG><a name="[17f]"></a>TM77_Sample_Formula</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tm7711.o(i.TM77_Sample_Formula))
<BR>[Address Reference Count : 1]<UL><LI> tm7711.o(.constdata)
</UL>
<P><STRONG><a name="[17c]"></a>TM77_Set_Period</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, tm7711.o(i.TM77_Set_Period))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TM77_Set_Period &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Us
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tm7711.o(.constdata)
</UL>
<P><STRONG><a name="[1a6]"></a>EXT_GPIO_Config</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, hc595.o(i.EXT_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = EXT_GPIO_Config &rArr; FW_Device_Find &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_Find
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Driver_Find
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hc595.o(Device_Table)
</UL>
<P><STRONG><a name="[2be]"></a>FW_Device_GetParent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hc595.o(i.FW_Device_GetParent))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_HC595_Write
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_HC595_Init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC595_Port_Write
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC595_Port_Init
</UL>

<P><STRONG><a name="[277]"></a>FW_GPIO_Init</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, hc595.o(i.FW_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_HC595_Init
</UL>

<P><STRONG><a name="[28a]"></a>FW_GPIO_Write</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, hc595.o(i.FW_GPIO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_HC595_CTL
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_HC595_Write
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_HC595_Init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_HC595_CTL
</UL>

<P><STRONG><a name="[1a5]"></a>HC595_Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hc595.o(i.HC595_Config))
<BR>[Address Reference Count : 1]<UL><LI> hc595.o(Device_Table)
</UL>
<P><STRONG><a name="[180]"></a>HC595_Port_Init</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, hc595.o(i.HC595_Port_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HC595_Port_Init &rArr; FW_Device_Find &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_Find
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hc595.o(.constdata)
</UL>
<P><STRONG><a name="[181]"></a>HC595_Port_Write</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, hc595.o(i.HC595_Port_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HC595_Port_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hc595.o(.constdata)
</UL>
<P><STRONG><a name="[95]"></a>IO_HC595_CTL</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, hc595.o(i.IO_HC595_CTL))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IO_HC595_CTL &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hc595.o(i.HC595_Port_Init)
</UL>
<P><STRONG><a name="[94]"></a>IO_HC595_Init</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, hc595.o(i.IO_HC595_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IO_HC595_Init &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hc595.o(i.HC595_Port_Init)
</UL>
<P><STRONG><a name="[96]"></a>IO_HC595_Write</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, hc595.o(i.IO_HC595_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = IO_HC595_Write &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Us
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hc595.o(i.HC595_Port_Init)
</UL>
<P><STRONG><a name="[92]"></a>SPI_HC595_CTL</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, hc595.o(i.SPI_HC595_CTL))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI_HC595_CTL &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hc595.o(i.HC595_Port_Init)
</UL>
<P><STRONG><a name="[91]"></a>SPI_HC595_Init</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, hc595.o(i.SPI_HC595_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SPI_HC595_Init &rArr; FW_SPI_Init &rArr; FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_Init
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hc595.o(i.HC595_Port_Init)
</UL>
<P><STRONG><a name="[93]"></a>SPI_HC595_Write</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, hc595.o(i.SPI_HC595_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_HC595_Write &rArr; FW_SPI_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_Write
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_CSSet
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hc595.o(i.HC595_Port_Init)
</UL>
<P><STRONG><a name="[26d]"></a>FW_List_Init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fw_device.o(i.FW_List_Init))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_PreBind
</UL>

<P><STRONG><a name="[84]"></a>ILock</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, fw_system.o(i.ILock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ILock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_system.o(i.FW_System_Init)
</UL>
<P><STRONG><a name="[85]"></a>IUnlock</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, fw_system.o(i.IUnlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IUnlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_system.o(i.FW_System_Init)
</UL>
<P><STRONG><a name="[6]"></a>NLock</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fw_system.o(i.NLock))
<BR>[Address Reference Count : 1]<UL><LI> fw_system.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>NUnlock</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fw_system.o(i.NUnlock))
<BR>[Address Reference Count : 1]<UL><LI> fw_system.o(.data)
</UL>
<P><STRONG><a name="[6c]"></a>FW_Delay_DefMs</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, fw_delay.o(i.FW_Delay_DefMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FW_Delay_DefMs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_delay.o(i.FW_Delay_Init)
</UL>
<P><STRONG><a name="[283]"></a>FW_Device_GetDriver</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fw_gpio.o(i.FW_Device_GetDriver))
<BR><BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRead
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortWrite
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortInit
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_ToggleUseLAPI
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_ToggleUseGetOutput
</UL>

<P><STRONG><a name="[1a7]"></a>FW_GPIO_Driver_Probe</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, fw_gpio.o(i.FW_GPIO_Driver_Probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = FW_GPIO_Driver_Probe &rArr; FW_Driver_Find &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Driver_Find
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_gpio.o(Device_Table)
</UL>
<P><STRONG><a name="[6e]"></a>FW_GPIO_ToggleUseGetOutput</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, fw_gpio.o(i.FW_GPIO_ToggleUseGetOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FW_GPIO_ToggleUseGetOutput
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_gpio.o(i.FW_GPIO_Driver_Probe)
</UL>
<P><STRONG><a name="[6d]"></a>FW_GPIO_ToggleUseLAPI</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, fw_gpio.o(i.FW_GPIO_ToggleUseLAPI))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FW_GPIO_ToggleUseLAPI
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_gpio.o(i.FW_GPIO_Driver_Probe)
</UL>
<P><STRONG><a name="[2ab]"></a>FW_Device_GetDriver</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fw_uart.o(i.FW_Device_GetDriver))
<BR><BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_WritePOL
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_WriteINT
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_WriteDMA
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_ReadPOL
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_IH_TX
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_IH_TC
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_IH_RX
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_UART_IH_RC
</UL>

<P><STRONG><a name="[86]"></a>FW_UART_IH_RC</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, fw_uart.o(i.FW_UART_IH_RC))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = FW_UART_IH_RC &rArr; RB_Write &rArr; RB_Get_DataLength &rArr; FW_Unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Lock
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Write
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_uart.o(i.FW_UART_Init)
</UL>
<P><STRONG><a name="[87]"></a>FW_UART_IH_RX</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, fw_uart.o(i.FW_UART_IH_RX))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FW_UART_IH_RX &rArr; RB_Write &rArr; RB_Get_DataLength &rArr; FW_Unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Lock
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Write
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_uart.o(i.FW_UART_Init)
</UL>
<P><STRONG><a name="[88]"></a>FW_UART_IH_TC</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, fw_uart.o(i.FW_UART_IH_TC))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = FW_UART_IH_TC &rArr; RB_Read &rArr; RB_Get_DataLength &rArr; FW_Unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Lock
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Get_DataLength
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_uart.o(i.FW_UART_Init)
</UL>
<P><STRONG><a name="[89]"></a>FW_UART_IH_TX</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, fw_uart.o(i.FW_UART_IH_TX))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FW_UART_IH_TX &rArr; RB_Read &rArr; RB_Get_DataLength &rArr; FW_Unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Lock
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_uart.o(i.FW_UART_Init)
</UL>
<P><STRONG><a name="[8f]"></a>FW_UART_ReadDMA</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, fw_uart.o(i.FW_UART_ReadDMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FW_UART_ReadDMA &rArr; RB_Read &rArr; RB_Get_DataLength &rArr; FW_Unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_uart.o(i.FW_UART_Init)
</UL>
<P><STRONG><a name="[8e]"></a>FW_UART_ReadINT</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, fw_uart.o(i.FW_UART_ReadINT))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FW_UART_ReadINT &rArr; RB_Read &rArr; RB_Get_DataLength &rArr; FW_Unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_uart.o(i.FW_UART_Init)
</UL>
<P><STRONG><a name="[8d]"></a>FW_UART_ReadPOL</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, fw_uart.o(i.FW_UART_ReadPOL))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FW_UART_ReadPOL
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_uart.o(i.FW_UART_Init)
</UL>
<P><STRONG><a name="[90]"></a>FW_UART_WaitNull</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fw_uart.o(i.FW_UART_WaitNull))
<BR>[Address Reference Count : 2]<UL><LI> fw_uart.o(i.FW_UART_ReadPOL)
<LI> fw_uart.o(i.FW_UART_WritePOL)
</UL>
<P><STRONG><a name="[8c]"></a>FW_UART_WriteDMA</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, fw_uart.o(i.FW_UART_WriteDMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = FW_UART_WriteDMA &rArr; RB_Write &rArr; RB_Get_DataLength &rArr; FW_Unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Lock
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Write
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Get_DataLength
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_uart.o(i.FW_UART_Init)
</UL>
<P><STRONG><a name="[8b]"></a>FW_UART_WriteINT</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, fw_uart.o(i.FW_UART_WriteINT))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = FW_UART_WriteINT &rArr; RB_Write &rArr; RB_Get_DataLength &rArr; FW_Unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Lock
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Write
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Get_DataLength
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_uart.o(i.FW_UART_Init)
</UL>
<P><STRONG><a name="[8a]"></a>FW_UART_WritePOL</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, fw_uart.o(i.FW_UART_WritePOL))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FW_UART_WritePOL
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_uart.o(i.FW_UART_Init)
</UL>
<P><STRONG><a name="[278]"></a>FW_GPIO_Init</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, fw_suart.o(i.FW_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUART_Init
</UL>

<P><STRONG><a name="[280]"></a>FW_GPIO_Read</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fw_suart.o(i.FW_GPIO_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FW_GPIO_Read &rArr; GPIO_PinRead
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRead
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUART_Wait_RC
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUART_RX_Byte
</UL>

<P><STRONG><a name="[28b]"></a>FW_GPIO_Write</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, fw_suart.o(i.FW_GPIO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUART_TX_Byte
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUART_Init
</UL>

<P><STRONG><a name="[182]"></a>SUART_Init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, fw_suart.o(i.SUART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SUART_Init &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_suart.o(.constdata)
</UL>
<P><STRONG><a name="[184]"></a>SUART_RX_Byte</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, fw_suart.o(i.SUART_RX_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SUART_RX_Byte &rArr; FW_Delay_Us
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Us
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_suart.o(.constdata)
</UL>
<P><STRONG><a name="[183]"></a>SUART_TX_Byte</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, fw_suart.o(i.SUART_TX_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SUART_TX_Byte &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Us
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_suart.o(.constdata)
</UL>
<P><STRONG><a name="[185]"></a>SUART_Wait_RC</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, fw_suart.o(i.SUART_Wait_RC))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SUART_Wait_RC &rArr; FW_GPIO_Read &rArr; GPIO_PinRead
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_suart.o(.constdata)
</UL>
<P><STRONG><a name="[2b3]"></a>FW_Device_GetDriver</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fw_flash.o(i.FW_Device_GetDriver))
<BR><BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Direct
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Erase_Sector
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Get_SectorSize
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Get_SectorIndex
</UL>

<P><STRONG><a name="[1a8]"></a>IFlash_Driver_Probe</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, fw_flash.o(i.IFlash_Driver_Probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = IFlash_Driver_Probe &rArr; FW_Driver_Find &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Driver_Find
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_flash.o(Device_Table)
</UL>
<P><STRONG><a name="[1a9]"></a>IRTC_Driver_Probe</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, fw_rtc.o(i.IRTC_Driver_Probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = IRTC_Driver_Probe &rArr; FW_Driver_Find &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Driver_Find
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_rtc.o(Device_Table)
</UL>
<P><STRONG><a name="[1aa]"></a>IWDG_Driver_Probe</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, fw_wdg.o(i.IWDG_Driver_Probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = IWDG_Driver_Probe &rArr; FW_Driver_Find &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Driver_Find
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_wdg.o(Device_Table)
</UL>
<P><STRONG><a name="[1ab]"></a>WWDG_Driver_Probe</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, fw_wdg.o(i.WWDG_Driver_Probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = WWDG_Driver_Probe &rArr; FW_Driver_Find &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Driver_Find
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_wdg.o(Device_Table)
</UL>
<P><STRONG><a name="[186]"></a>Bus_LCD8_Init</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, fw_bus.o(i.Bus_LCD8_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Bus_LCD8_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_bus.o(.constdata)
</UL>
<P><STRONG><a name="[189]"></a>Bus_LCD8_ReadData</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, fw_bus.o(i.Bus_LCD8_ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Bus_LCD8_ReadData
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_bus.o(.constdata)
</UL>
<P><STRONG><a name="[67]"></a>Bus_LCD8_ReadDataU16</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fw_bus.o(i.Bus_LCD8_ReadDataU16))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bus_LCD8_ReadDataU16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_bus.o(i.Bus_LCD8_Init)
</UL>
<P><STRONG><a name="[64]"></a>Bus_LCD8_ReadDataU32</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fw_bus.o(i.Bus_LCD8_ReadDataU32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bus_LCD8_ReadDataU32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_bus.o(i.Bus_LCD8_Init)
</UL>
<P><STRONG><a name="[6a]"></a>Bus_LCD8_ReadDataU8</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fw_bus.o(i.Bus_LCD8_ReadDataU8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bus_LCD8_ReadDataU8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_bus.o(i.Bus_LCD8_Init)
</UL>
<P><STRONG><a name="[187]"></a>Bus_LCD8_WriteCmd</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, fw_bus.o(i.Bus_LCD8_WriteCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Bus_LCD8_WriteCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_bus.o(.constdata)
</UL>
<P><STRONG><a name="[65]"></a>Bus_LCD8_WriteCmdU16</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fw_bus.o(i.Bus_LCD8_WriteCmdU16))
<BR>[Address Reference Count : 1]<UL><LI> fw_bus.o(i.Bus_LCD8_Init)
</UL>
<P><STRONG><a name="[62]"></a>Bus_LCD8_WriteCmdU32</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fw_bus.o(i.Bus_LCD8_WriteCmdU32))
<BR>[Address Reference Count : 1]<UL><LI> fw_bus.o(i.Bus_LCD8_Init)
</UL>
<P><STRONG><a name="[68]"></a>Bus_LCD8_WriteCmdU8</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fw_bus.o(i.Bus_LCD8_WriteCmdU8))
<BR>[Address Reference Count : 1]<UL><LI> fw_bus.o(i.Bus_LCD8_Init)
</UL>
<P><STRONG><a name="[188]"></a>Bus_LCD8_WriteData</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, fw_bus.o(i.Bus_LCD8_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Bus_LCD8_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_bus.o(.constdata)
</UL>
<P><STRONG><a name="[66]"></a>Bus_LCD8_WriteDataU16</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, fw_bus.o(i.Bus_LCD8_WriteDataU16))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Bus_LCD8_WriteDataU16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_bus.o(i.Bus_LCD8_Init)
</UL>
<P><STRONG><a name="[63]"></a>Bus_LCD8_WriteDataU32</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, fw_bus.o(i.Bus_LCD8_WriteDataU32))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Bus_LCD8_WriteDataU32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_bus.o(i.Bus_LCD8_Init)
</UL>
<P><STRONG><a name="[69]"></a>Bus_LCD8_WriteDataU8</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, fw_bus.o(i.Bus_LCD8_WriteDataU8))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Bus_LCD8_WriteDataU8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_bus.o(i.Bus_LCD8_Init)
</UL>
<P><STRONG><a name="[1f9]"></a>FW_Device_GetParent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fw_bus.o(i.FW_Device_GetParent))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_LCD8_WriteData
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_LCD8_WriteCmd
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_LCD8_ReadData
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_LCD8_Init
</UL>

<P><STRONG><a name="[29f]"></a>FW_Device_GetDriver</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fw_spi.o(i.FW_Device_GetDriver))
<BR><BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_Init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_WritePOL
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_WriteINT
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_WriteDMA
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_WRByte
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_ReadPOL
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_ReadINT
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_ReadDMA
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_IH_TX
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_IH_TC
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_IH_RX
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_IH_RC
</UL>

<P><STRONG><a name="[279]"></a>FW_GPIO_Init</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, fw_spi.o(i.FW_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_Init
</UL>

<P><STRONG><a name="[28c]"></a>FW_GPIO_Write</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, fw_spi.o(i.FW_GPIO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_CSIOSet
</UL>

<P><STRONG><a name="[83]"></a>FW_SPI_CSIOSet</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fw_spi.o(i.FW_SPI_CSIOSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FW_SPI_CSIOSet &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_spi.o(i.FW_SPI_Init)
</UL>
<P><STRONG><a name="[79]"></a>FW_SPI_IH_RC</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, fw_spi.o(i.FW_SPI_IH_RC))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = FW_SPI_IH_RC &rArr; RB_Write &rArr; RB_Get_DataLength &rArr; FW_Unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Lock
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Write
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_spi.o(i.FW_SPI_Init)
</UL>
<P><STRONG><a name="[7a]"></a>FW_SPI_IH_RX</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, fw_spi.o(i.FW_SPI_IH_RX))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FW_SPI_IH_RX &rArr; RB_Write &rArr; RB_Get_DataLength &rArr; FW_Unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Lock
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Write
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_spi.o(i.FW_SPI_Init)
</UL>
<P><STRONG><a name="[7b]"></a>FW_SPI_IH_TC</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, fw_spi.o(i.FW_SPI_IH_TC))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = FW_SPI_IH_TC &rArr; RB_Read &rArr; RB_Get_DataLength &rArr; FW_Unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Lock
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Get_DataLength
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_spi.o(i.FW_SPI_Init)
</UL>
<P><STRONG><a name="[7c]"></a>FW_SPI_IH_TX</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, fw_spi.o(i.FW_SPI_IH_TX))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FW_SPI_IH_TX &rArr; RB_Read &rArr; RB_Get_DataLength &rArr; FW_Unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Unlock
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Lock
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Read
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_spi.o(i.FW_SPI_Init)
</UL>
<P><STRONG><a name="[82]"></a>FW_SPI_ReadDMA</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, fw_spi.o(i.FW_SPI_ReadDMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FW_SPI_ReadDMA
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_spi.o(i.FW_SPI_Init)
</UL>
<P><STRONG><a name="[81]"></a>FW_SPI_ReadINT</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, fw_spi.o(i.FW_SPI_ReadINT))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FW_SPI_ReadINT &rArr; RB_PMB_Write &rArr; FW_Unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_PMB_Write
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_PMB_Set
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Get_DataLength
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_spi.o(i.FW_SPI_Init)
</UL>
<P><STRONG><a name="[80]"></a>FW_SPI_ReadPOL</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, fw_spi.o(i.FW_SPI_ReadPOL))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FW_SPI_ReadPOL &rArr; FW_SPI_WRByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_WRByte
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_spi.o(i.FW_SPI_Init)
</UL>
<P><STRONG><a name="[2a6]"></a>FW_SPI_WRByte</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, fw_spi.o(i.FW_SPI_WRByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FW_SPI_WRByte
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_WritePOL
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_ReadPOL
</UL>

<P><STRONG><a name="[7f]"></a>FW_SPI_WriteDMA</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, fw_spi.o(i.FW_SPI_WriteDMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FW_SPI_WriteDMA
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_spi.o(i.FW_SPI_Init)
</UL>
<P><STRONG><a name="[7e]"></a>FW_SPI_WriteINT</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, fw_spi.o(i.FW_SPI_WriteINT))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FW_SPI_WriteINT &rArr; RB_PMB_Write &rArr; FW_Unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_PMB_Write
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RB_Get_DataLength
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_spi.o(i.FW_SPI_Init)
</UL>
<P><STRONG><a name="[7d]"></a>FW_SPI_WritePOL</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, fw_spi.o(i.FW_SPI_WritePOL))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FW_SPI_WritePOL &rArr; FW_SPI_WRByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SPI_WRByte
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_spi.o(i.FW_SPI_Init)
</UL>
<P><STRONG><a name="[27a]"></a>FW_GPIO_Init</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, fw_sspi.o(i.FW_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPI_Init
</UL>

<P><STRONG><a name="[281]"></a>FW_GPIO_Read</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fw_sspi.o(i.FW_GPIO_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FW_GPIO_Read &rArr; GPIO_PinRead
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRead
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRByte_MSB
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRByte_LSB
</UL>

<P><STRONG><a name="[28d]"></a>FW_GPIO_Write</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, fw_sspi.o(i.FW_GPIO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRByte_MSB
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRByte_LSB
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPI_Init
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPI_CS_Set
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCK_RE
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCK_FE
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCK_CPOL1
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCK_CPOL0
</UL>

<P><STRONG><a name="[af]"></a>SCK_CPOL0</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fw_sspi.o(i.SCK_CPOL0))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SCK_CPOL0 &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_sspi.o(i.SSPI_Init)
</UL>
<P><STRONG><a name="[ac]"></a>SCK_CPOL1</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fw_sspi.o(i.SCK_CPOL1))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SCK_CPOL1 &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_sspi.o(i.SSPI_Init)
</UL>
<P><STRONG><a name="[ad]"></a>SCK_FE</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fw_sspi.o(i.SCK_FE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SCK_FE &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Us
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_sspi.o(i.SSPI_Init)
</UL>
<P><STRONG><a name="[ae]"></a>SCK_RE</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fw_sspi.o(i.SCK_RE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SCK_RE &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Us
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_sspi.o(i.SSPI_Init)
</UL>
<P><STRONG><a name="[18c]"></a>SSPI_CS_Set</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fw_sspi.o(i.SSPI_CS_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SSPI_CS_Set &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_sspi.o(.constdata)
</UL>
<P><STRONG><a name="[18a]"></a>SSPI_DeInit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fw_sspi.o(i.SSPI_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SSPI_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_sspi.o(.constdata)
</UL>
<P><STRONG><a name="[18b]"></a>SSPI_Init</STRONG> (Thumb, 258 bytes, Stack size 8 bytes, fw_sspi.o(i.SSPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SSPI_Init &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_sspi.o(.constdata)
</UL>
<P><STRONG><a name="[18e]"></a>SSPI_Read</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, fw_sspi.o(i.SSPI_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SSPI_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_sspi.o(.constdata)
</UL>
<P><STRONG><a name="[18d]"></a>SSPI_Write</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, fw_sspi.o(i.SSPI_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SSPI_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_sspi.o(.constdata)
</UL>
<P><STRONG><a name="[ab]"></a>TRByte_LSB</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, fw_sspi.o(i.TRByte_LSB))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TRByte_LSB &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_sspi.o(i.SSPI_Init)
</UL>
<P><STRONG><a name="[aa]"></a>TRByte_MSB</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, fw_sspi.o(i.TRByte_MSB))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TRByte_MSB &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_sspi.o(i.SSPI_Init)
</UL>
<P><STRONG><a name="[291]"></a>FW_Device_GetDriver</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fw_i2c.o(i.FW_Device_GetDriver))
<BR><BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_I2C_Init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_I2C_WritePOL
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_I2C_ReadPOL
</UL>

<P><STRONG><a name="[6f]"></a>FW_I2C_IH_RC</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fw_i2c.o(i.FW_I2C_IH_RC))
<BR>[Address Reference Count : 1]<UL><LI> fw_i2c.o(i.FW_I2C_Init)
</UL>
<P><STRONG><a name="[70]"></a>FW_I2C_IH_RX</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fw_i2c.o(i.FW_I2C_IH_RX))
<BR>[Address Reference Count : 1]<UL><LI> fw_i2c.o(i.FW_I2C_Init)
</UL>
<P><STRONG><a name="[71]"></a>FW_I2C_IH_TC</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fw_i2c.o(i.FW_I2C_IH_TC))
<BR>[Address Reference Count : 1]<UL><LI> fw_i2c.o(i.FW_I2C_Init)
</UL>
<P><STRONG><a name="[72]"></a>FW_I2C_IH_TX</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fw_i2c.o(i.FW_I2C_IH_TX))
<BR>[Address Reference Count : 1]<UL><LI> fw_i2c.o(i.FW_I2C_Init)
</UL>
<P><STRONG><a name="[78]"></a>FW_I2C_ReadDMA</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, fw_i2c.o(i.FW_I2C_ReadDMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FW_I2C_ReadDMA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_i2c.o(i.FW_I2C_Init)
</UL>
<P><STRONG><a name="[77]"></a>FW_I2C_ReadINT</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, fw_i2c.o(i.FW_I2C_ReadINT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FW_I2C_ReadINT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_i2c.o(i.FW_I2C_Init)
</UL>
<P><STRONG><a name="[76]"></a>FW_I2C_ReadPOL</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, fw_i2c.o(i.FW_I2C_ReadPOL))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FW_I2C_ReadPOL
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_i2c.o(i.FW_I2C_Init)
</UL>
<P><STRONG><a name="[75]"></a>FW_I2C_WriteDMA</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, fw_i2c.o(i.FW_I2C_WriteDMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FW_I2C_WriteDMA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_i2c.o(i.FW_I2C_Init)
</UL>
<P><STRONG><a name="[74]"></a>FW_I2C_WriteINT</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, fw_i2c.o(i.FW_I2C_WriteINT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FW_I2C_WriteINT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_i2c.o(i.FW_I2C_Init)
</UL>
<P><STRONG><a name="[73]"></a>FW_I2C_WritePOL</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, fw_i2c.o(i.FW_I2C_WritePOL))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FW_I2C_WritePOL
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_i2c.o(i.FW_I2C_Init)
</UL>
<P><STRONG><a name="[27b]"></a>FW_GPIO_Init</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, fw_si2c.o(i.FW_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_Read_Byte
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SI2C_Init
</UL>

<P><STRONG><a name="[28e]"></a>FW_GPIO_Write</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, fw_si2c.o(i.FW_GPIO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_OUT
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SI2C_Init
</UL>

<P><STRONG><a name="[298]"></a>FW_I2C_Get10BAddrH</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fw_si2c.o(i.FW_I2C_Get10BAddrH))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SI2C_Write
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SI2C_Read
</UL>

<P><STRONG><a name="[18f]"></a>FW_SI2C_Init</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, fw_si2c.o(i.FW_SI2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FW_SI2C_Init &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_si2c.o(.constdata)
</UL>
<P><STRONG><a name="[191]"></a>FW_SI2C_Read</STRONG> (Thumb, 330 bytes, Stack size 40 bytes, fw_si2c.o(i.FW_SI2C_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = FW_SI2C_Read &rArr; SI2C_Write_Byte &rArr; SDA_OUT &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Us
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_Write_Byte
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_Stop
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_Start
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_Read_Byte
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_ACK
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_OUT
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_I2C_Get10BAddrH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_si2c.o(.constdata)
</UL>
<P><STRONG><a name="[190]"></a>FW_SI2C_Write</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, fw_si2c.o(i.FW_SI2C_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = FW_SI2C_Write &rArr; SI2C_Write_Byte &rArr; SDA_OUT &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_Write_Byte
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_Stop
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_Start
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_ACK
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_I2C_Get10BAddrH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_si2c.o(.constdata)
</UL>
<P><STRONG><a name="[29c]"></a>SCL_OUT</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, fw_si2c.o(i.SCL_OUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SCL_OUT &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_Write_Byte
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_Stop
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_Start
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_Read_Byte
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_ACK
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SI2C_Read
</UL>

<P><STRONG><a name="[2fe]"></a>SDA_IN</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, fw_si2c.o(i.SDA_IN))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SDA_IN &rArr; GPIO_PinRead
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRead
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_Read_Byte
</UL>

<P><STRONG><a name="[29d]"></a>SDA_OUT</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, fw_si2c.o(i.SDA_OUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SDA_OUT &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_Write_Byte
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_Stop
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_Start
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_Read_Byte
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI2C_ACK
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SI2C_Read
</UL>

<P><STRONG><a name="[29a]"></a>SI2C_ACK</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, fw_si2c.o(i.SI2C_ACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SI2C_ACK &rArr; SDA_OUT &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Us
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SI2C_Write
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SI2C_Read
</UL>

<P><STRONG><a name="[29b]"></a>SI2C_Read_Byte</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, fw_si2c.o(i.SI2C_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SI2C_Read_Byte &rArr; SDA_OUT &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Us
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_IN
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_OUT
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SI2C_Read
</UL>

<P><STRONG><a name="[297]"></a>SI2C_Start</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, fw_si2c.o(i.SI2C_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SI2C_Start &rArr; SDA_OUT &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Us
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SI2C_Write
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SI2C_Read
</UL>

<P><STRONG><a name="[29e]"></a>SI2C_Stop</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, fw_si2c.o(i.SI2C_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SI2C_Stop &rArr; SDA_OUT &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Us
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SI2C_Write
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SI2C_Read
</UL>

<P><STRONG><a name="[299]"></a>SI2C_Write_Byte</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, fw_si2c.o(i.SI2C_Write_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SI2C_Write_Byte &rArr; SDA_OUT &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Us
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SI2C_Write
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SI2C_Read
</UL>

<P><STRONG><a name="[2a7]"></a>FW_Device_GetDriver</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fw_timer.o(i.FW_Device_GetDriver))
<BR><BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_TIM_SetFrequency
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_TIM_Init
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_TIM_CTL
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_TIM_GetClock
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Set_Frequency
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Set_DC
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Get_Frequency
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Get_DC
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_CTL
</UL>

<P><STRONG><a name="[2e7]"></a>FW_Device_GetParent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fw_timer.o(i.FW_Device_GetParent))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Set_Frequency
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Set_DC
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Get_Frequency
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Get_DC
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_CTL
</UL>

<P><STRONG><a name="[197]"></a>PWM_CTL</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, fw_timer.o(i.PWM_CTL))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PWM_CTL
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_timer.o(.constdata)
</UL>
<P><STRONG><a name="[196]"></a>PWM_Get_DC</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, fw_timer.o(i.PWM_Get_DC))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PWM_Get_DC
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_timer.o(.constdata)
</UL>
<P><STRONG><a name="[194]"></a>PWM_Get_Frequency</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, fw_timer.o(i.PWM_Get_Frequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PWM_Get_Frequency
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_timer.o(.constdata)
</UL>
<P><STRONG><a name="[192]"></a>PWM_Init</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, fw_timer.o(i.PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PWM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_timer.o(.constdata)
</UL>
<P><STRONG><a name="[195]"></a>PWM_Set_DC</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, fw_timer.o(i.PWM_Set_DC))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PWM_Set_DC
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_timer.o(.constdata)
</UL>
<P><STRONG><a name="[193]"></a>PWM_Set_Frequency</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, fw_timer.o(i.PWM_Set_Frequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PWM_Set_Frequency
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetParent
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Device_GetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fw_timer.o(.constdata)
</UL>
<P><STRONG><a name="[27c]"></a>FW_GPIO_Init</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, fw_ow.o(i.FW_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FW_GPIO_Init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_OW_WaitACK
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_OW_Reset
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_OW_Init
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_OW_WriteByte
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_OW_ReadByte
</UL>

<P><STRONG><a name="[282]"></a>FW_GPIO_Read</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fw_ow.o(i.FW_GPIO_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FW_GPIO_Read &rArr; GPIO_PinRead
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRead
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_OW_WaitACK
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_OW_Init
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_OW_ReadByte
</UL>

<P><STRONG><a name="[28f]"></a>FW_GPIO_Write</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, fw_ow.o(i.FW_GPIO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_OW_Reset
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_OW_Init
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_OW_WriteByte
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_OW_ReadByte
</UL>

<P><STRONG><a name="[295]"></a>FW_OW_ReadByte</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, fw_ow.o(i.FW_OW_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FW_OW_ReadByte &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Us
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Read
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_OW_Read
</UL>

<P><STRONG><a name="[296]"></a>FW_OW_WriteByte</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, fw_ow.o(i.FW_OW_WriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FW_OW_WriteByte &rArr; FW_GPIO_Write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Delay_Us
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Write
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_OW_Write
</UL>

<P><STRONG><a name="[398]"></a>system_clock_120m_irc8m</STRONG> (Thumb, 236 bytes, Stack size 0 bytes, system_gd32f30x.o(i.system_clock_120m_irc8m))
<BR><BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[326]"></a>system_clock_config</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_gd32f30x.o(i.system_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = system_clock_config
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_120m_irc8m
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[387]"></a>dma_periph_and_channel_check</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f30x_dma.o(i.dma_periph_and_channel_check))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_circulation_enable
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_transfer_number_get
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_transfer_number_config
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_memory_to_memory_disable
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_memory_address_config
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_init
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_deinit
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_circulation_disable
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_enable
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_disable
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_memory_increase_enable
</UL>

<P><STRONG><a name="[3a7]"></a>usbd_intf_esof</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, usbd_int.o(i.usbd_intf_esof))
<BR><BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_isr
</UL>

<P><STRONG><a name="[39e]"></a>usbd_intf_lpst</STRONG> (Thumb, 340 bytes, Stack size 32 bytes, usbd_int.o(i.usbd_intf_lpst))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = usbd_intf_lpst &rArr; usbd_setup_transaction &rArr; usbd_device_class_request &rArr; usbd_enum_error &rArr; usbd_ep_stall
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_rx
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_transaction
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_out_transaction
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_in_transaction
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_data_read
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_isr
</UL>

<P><STRONG><a name="[3a8]"></a>usbd_intf_reset</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, usbd_int.o(i.usbd_intf_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_intf_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_isr
</UL>

<P><STRONG><a name="[3a6]"></a>usbd_intf_sof</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbd_int.o(i.usbd_intf_sof))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_intf_sof
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_isr
</UL>

<P><STRONG><a name="[3a2]"></a>usbd_intf_suspend</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usbd_int.o(i.usbd_intf_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_intf_suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_isr
</UL>

<P><STRONG><a name="[3a4]"></a>usbd_intf_wakeup</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd_int.o(i.usbd_intf_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_intf_wakeup
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_mcu
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_isr
</UL>

<P><STRONG><a name="[9]"></a>usbd_clearfeature</STRONG> (Thumb, 280 bytes, Stack size 16 bytes, usbd_std.o(i.usbd_clearfeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = usbd_clearfeature &rArr; usbd_enum_error &rArr; usbd_ep_stall
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enum_error
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_clear_stall
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_std.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>usbd_configuration_descriptor_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbd_std.o(i.usbd_configuration_descriptor_get))
<BR>[Address Reference Count : 1]<UL><LI> usbd_std.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>usbd_device_descriptor_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbd_std.o(i.usbd_device_descriptor_get))
<BR>[Address Reference Count : 1]<UL><LI> usbd_std.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>usbd_getconfiguration</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, usbd_std.o(i.usbd_getconfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = usbd_getconfiguration &rArr; usbd_ep_tx &rArr; usbd_ep_data_write
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enum_error
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_tx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_std.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>usbd_getdescriptor</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, usbd_std.o(i.usbd_getdescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = usbd_getdescriptor &rArr; usbd_ep_tx &rArr; usbd_ep_data_write
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enum_error
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_tx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_std.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>usbd_getinterface</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, usbd_std.o(i.usbd_getinterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = usbd_getinterface &rArr; usbd_enum_error &rArr; usbd_ep_stall
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enum_error
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_std.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>usbd_getstatus</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, usbd_std.o(i.usbd_getstatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = usbd_getstatus &rArr; usbd_ep_tx &rArr; usbd_ep_data_write
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enum_error
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_tx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_std.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>usbd_reserved</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_std.o(i.usbd_reserved))
<BR>[Address Reference Count : 1]<UL><LI> usbd_std.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>usbd_setaddress</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, usbd_std.o(i.usbd_setaddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = usbd_setaddress &rArr; usbd_enum_error &rArr; usbd_ep_stall
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enum_error
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_std.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>usbd_setconfiguration</STRONG> (Thumb, 328 bytes, Stack size 16 bytes, usbd_std.o(i.usbd_setconfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = usbd_setconfiguration &rArr; usbd_enum_error &rArr; usbd_ep_stall
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enum_error
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_std.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>usbd_setdescriptor</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_std.o(i.usbd_setdescriptor))
<BR>[Address Reference Count : 1]<UL><LI> usbd_std.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>usbd_setfeature</STRONG> (Thumb, 242 bytes, Stack size 16 bytes, usbd_std.o(i.usbd_setfeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = usbd_setfeature &rArr; usbd_enum_error &rArr; usbd_ep_stall
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_stall
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enum_error
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_std.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>usbd_setinterface</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, usbd_std.o(i.usbd_setinterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = usbd_setinterface &rArr; usbd_enum_error &rArr; usbd_ep_stall
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enum_error
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_std.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>usbd_string_descriptor_get</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_std.o(i.usbd_string_descriptor_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_string_descriptor_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_std.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>usbd_synchframe</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_std.o(i.usbd_synchframe))
<BR>[Address Reference Count : 1]<UL><LI> usbd_std.o(.data)
</UL>
<P><STRONG><a name="[37c]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[37a]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[37f]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[37e]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[37b]"></a>internal_alloc</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, mallocr.o(i.internal_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
